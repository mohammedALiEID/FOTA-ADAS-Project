
ADAS_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000739c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080074b0  080074b0  000174b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  080075c0  080075c0  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c0  080075c0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080075c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  20000100  080076c8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014c4  080076c8  000214c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023038  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058e9  00000000  00000000  000431a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f320  00000000  00000000  00048a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013b8  00000000  00000000  00057db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019e4  00000000  00000000  00059168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b7d7  00000000  00000000  0005ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002adf3  00000000  00000000  00076323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00098f6a  00000000  00000000  000a1116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004738  00000000  00000000  0013a080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0013e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08007494 	.word	0x08007494

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08007494 	.word	0x08007494

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <BLU_voidReceivePolling>:
  * @param  Size  Number of bytes to receive.
  * @param  Timeout Timeout duration in milliseconds.
  * @retval HAL status.
  */
HAL_StatusTypeDef BLU_voidReceivePolling(uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001070:	468c      	mov	ip, r1
 8001072:	b508      	push	{r3, lr}
 8001074:	4686      	mov	lr, r0
 8001076:	4613      	mov	r3, r2
    HAL_StatusTypeDef Local_u8Status  = HAL_OK;

    // Call HAL_UART_Receive function to receive data from the Bluetooth module
    Local_u8Status = HAL_UART_Receive(&huart2, pData, Size, Timeout);
 8001078:	4671      	mov	r1, lr
 800107a:	4662      	mov	r2, ip
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <BLU_voidReceivePolling+0x1c>)
 800107e:	f004 fc5f 	bl	8005940 <HAL_UART_Receive>
        {

        }

        return Local_u8Status;
}
 8001082:	3800      	subs	r0, #0
 8001084:	bf18      	it	ne
 8001086:	2001      	movne	r0, #1
 8001088:	bd08      	pop	{r3, pc}
 800108a:	bf00      	nop
 800108c:	200005f8 	.word	0x200005f8

08001090 <BUZZER_voidTurnOn>:
#include "BUZZER_config.h"

void BUZZER_voidTurnOn(void)
{
	// Set GPIO pin to high state to turn on BUZZER
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4801      	ldr	r0, [pc, #4]	; (800109c <BUZZER_voidTurnOn+0xc>)
 8001096:	f002 bd4d 	b.w	8003b34 <HAL_GPIO_WritePin>
 800109a:	bf00      	nop
 800109c:	40010800 	.word	0x40010800

080010a0 <BUZZER_voidTurnOff>:
}
void BUZZER_voidTurnOff(void)
{
	// Set GPIO pin to low state to turn off LED
	HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2110      	movs	r1, #16
 80010a4:	4801      	ldr	r0, [pc, #4]	; (80010ac <BUZZER_voidTurnOff+0xc>)
 80010a6:	f002 bd45 	b.w	8003b34 <HAL_GPIO_WritePin>
 80010aa:	bf00      	nop
 80010ac:	40010800 	.word	0x40010800

080010b0 <BUZZER_voidToggle>:
}
void BUZZER_voidToggle(void)
{
	// Toggle GPIO pins to change LED state
	HAL_GPIO_TogglePin(BUZZER_PORT, BUZZER_PIN);
 80010b0:	2110      	movs	r1, #16
 80010b2:	4801      	ldr	r0, [pc, #4]	; (80010b8 <BUZZER_voidToggle+0x8>)
 80010b4:	f002 bd42 	b.w	8003b3c <HAL_GPIO_TogglePin>
 80010b8:	40010800 	.word	0x40010800

080010bc <DC_voidInit>:


void DC_voidInit (void)
{
	//init PWM Timer1 for Back wheels
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010bc:	2100      	movs	r1, #0
 80010be:	4801      	ldr	r0, [pc, #4]	; (80010c4 <DC_voidInit+0x8>)
 80010c0:	f003 bf18 	b.w	8004ef4 <HAL_TIM_PWM_Start>
 80010c4:	20000520 	.word	0x20000520

080010c8 <DC_voidMoveForward>:
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
}

void DC_voidMoveForward (uint8_t copy_u8Speed)
{
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4603      	mov	r3, r0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <DC_voidMoveForward+0x24>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80010ce:	4c08      	ldr	r4, [pc, #32]	; (80010f0 <DC_voidMoveForward+0x28>)
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 80010d0:	6815      	ldr	r5, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80010d2:	4620      	mov	r0, r4
 80010d4:	2201      	movs	r2, #1
 80010d6:	2110      	movs	r1, #16
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 80010d8:	636b      	str	r3, [r5, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80010da:	f002 fd2b 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010de:	4620      	mov	r0, r4
}
 80010e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	f002 bd24 	b.w	8003b34 <HAL_GPIO_WritePin>
 80010ec:	20000520 	.word	0x20000520
 80010f0:	40010c00 	.word	0x40010c00

080010f4 <DC_voidMoveForwardRight>:

void DC_voidMoveForwardRight (uint8_t copy_u8Speed)
{
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4605      	mov	r5, r0


void DC_voidTurnRight (void)
{
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 70);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80010f8:	4c0d      	ldr	r4, [pc, #52]	; (8001130 <DC_voidMoveForwardRight+0x3c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	4620      	mov	r0, r4
 80010fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001102:	f002 fd17 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <DC_voidMoveForwardRight+0x40>)
 800110c:	f002 fd12 	bl	8003b34 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <DC_voidMoveForwardRight+0x44>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001112:	4620      	mov	r0, r4
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 8001114:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2110      	movs	r1, #16
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 800111a:	635d      	str	r5, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800111c:	f002 fd0a 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001120:	4620      	mov	r0, r4
}
 8001122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2108      	movs	r1, #8
 800112a:	f002 bd03 	b.w	8003b34 <HAL_GPIO_WritePin>
 800112e:	bf00      	nop
 8001130:	40010c00 	.word	0x40010c00
 8001134:	40010800 	.word	0x40010800
 8001138:	20000520 	.word	0x20000520

0800113c <DC_voidMoveForwardLeft>:
{
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0


void DC_voidTurnLeft (void)
{
	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 70);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001140:	4c0d      	ldr	r4, [pc, #52]	; (8001178 <DC_voidMoveForwardLeft+0x3c>)
 8001142:	2200      	movs	r2, #0
 8001144:	4620      	mov	r0, r4
 8001146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114a:	f002 fcf3 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2102      	movs	r1, #2
 8001152:	480a      	ldr	r0, [pc, #40]	; (800117c <DC_voidMoveForwardLeft+0x40>)
 8001154:	f002 fcee 	bl	8003b34 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <DC_voidMoveForwardLeft+0x44>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800115a:	4620      	mov	r0, r4
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 800115c:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2110      	movs	r1, #16
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 8001162:	635d      	str	r5, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001164:	f002 fce6 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001168:	4620      	mov	r0, r4
}
 800116a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2108      	movs	r1, #8
 8001172:	f002 bcdf 	b.w	8003b34 <HAL_GPIO_WritePin>
 8001176:	bf00      	nop
 8001178:	40010c00 	.word	0x40010c00
 800117c:	40010800 	.word	0x40010800
 8001180:	20000520 	.word	0x20000520

08001184 <DC_voidMoveBackward>:
{
 8001184:	b538      	push	{r3, r4, r5, lr}
 8001186:	4603      	mov	r3, r0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <DC_voidMoveBackward+0x24>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800118a:	4c08      	ldr	r4, [pc, #32]	; (80011ac <DC_voidMoveBackward+0x28>)
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 800118c:	6815      	ldr	r5, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800118e:	4620      	mov	r0, r4
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, copy_u8Speed);
 8001194:	636b      	str	r3, [r5, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001196:	f002 fccd 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800119a:	4620      	mov	r0, r4
}
 800119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2108      	movs	r1, #8
 80011a4:	f002 bcc6 	b.w	8003b34 <HAL_GPIO_WritePin>
 80011a8:	20000520 	.word	0x20000520
 80011ac:	40010c00 	.word	0x40010c00

080011b0 <DC_voidTurnRight>:
{
 80011b0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <DC_voidTurnRight+0x1c>)
 80011ba:	f002 fcbb 	bl	8003b34 <HAL_GPIO_WritePin>
}
 80011be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2102      	movs	r1, #2
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DC_voidTurnRight+0x20>)
 80011c8:	f002 bcb4 	b.w	8003b34 <HAL_GPIO_WritePin>
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40010800 	.word	0x40010800

080011d4 <DC_voidTurnLeft>:
{
 80011d4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <DC_voidTurnLeft+0x1c>)
 80011de:	f002 fca9 	bl	8003b34 <HAL_GPIO_WritePin>
}
 80011e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2102      	movs	r1, #2
 80011ea:	4802      	ldr	r0, [pc, #8]	; (80011f4 <DC_voidTurnLeft+0x20>)
 80011ec:	f002 bca2 	b.w	8003b34 <HAL_GPIO_WritePin>
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	40010800 	.word	0x40010800

080011f8 <DC_voidStop>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
}

void DC_voidStop(void)
{
 80011f8:	b510      	push	{r4, lr}
	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011fa:	4c0c      	ldr	r4, [pc, #48]	; (800122c <DC_voidStop+0x34>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	4620      	mov	r0, r4
 8001200:	2102      	movs	r1, #2
 8001202:	f002 fc97 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120c:	4808      	ldr	r0, [pc, #32]	; (8001230 <DC_voidStop+0x38>)
 800120e:	f002 fc91 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001212:	4620      	mov	r0, r4
 8001214:	2200      	movs	r2, #0
 8001216:	2108      	movs	r1, #8
 8001218:	f002 fc8c 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800121c:	4620      	mov	r0, r4

	//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
}
 800121e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2110      	movs	r1, #16
 8001226:	f002 bc85 	b.w	8003b34 <HAL_GPIO_WritePin>
 800122a:	bf00      	nop
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40010800 	.word	0x40010800

08001234 <LCD_voidWriteCommand>:
	//Set cursor to the beginning of the first line
	LCD_voidWriteCommand(0x80);
}

void LCD_voidWriteCommand(uint8_t copy_u8Cmd)
{
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	4604      	mov	r4, r0
	// Write high nibble of command to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Cmd, 7)));
 8001238:	4d34      	ldr	r5, [pc, #208]	; (800130c <LCD_voidWriteCommand+0xd8>)
 800123a:	09e2      	lsrs	r2, r4, #7
 800123c:	4628      	mov	r0, r5
 800123e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001242:	f002 fc77 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 6)));
 8001246:	4628      	mov	r0, r5
 8001248:	f3c4 1280 	ubfx	r2, r4, #6, #1
 800124c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 5)));
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 4)));

	// Set RS pin for command mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 8001250:	4e2f      	ldr	r6, [pc, #188]	; (8001310 <LCD_voidWriteCommand+0xdc>)
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 6)));
 8001252:	f002 fc6f 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 5)));
 8001256:	4628      	mov	r0, r5
 8001258:	f3c4 1240 	ubfx	r2, r4, #5, #1
 800125c:	2120      	movs	r1, #32
 800125e:	f002 fc69 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 4)));
 8001262:	4628      	mov	r0, r5
 8001264:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001268:	2101      	movs	r1, #1
 800126a:	f002 fc63 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 800126e:	4630      	mov	r0, r6
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001276:	f002 fc5d 	bl	8003b34 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001280:	4630      	mov	r0, r6
 8001282:	f002 fc57 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f005 fa54 	bl	8006734 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	4630      	mov	r0, r6
 8001294:	f002 fc4e 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8001298:	2002      	movs	r0, #2
 800129a:	f005 fa4b 	bl	8006734 <vTaskDelay>

	// Write low nibble of command to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Cmd, 3)));
 800129e:	4628      	mov	r0, r5
 80012a0:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 80012a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a8:	f002 fc44 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Cmd, 2)));
 80012ac:	4628      	mov	r0, r5
 80012ae:	f3c4 0280 	ubfx	r2, r4, #2, #1
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	f002 fc3d 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Cmd, 1)));
 80012ba:	4628      	mov	r0, r5
 80012bc:	f3c4 0240 	ubfx	r2, r4, #1, #1
 80012c0:	2120      	movs	r1, #32
 80012c2:	f002 fc37 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Cmd, 0)));
 80012c6:	2101      	movs	r1, #1
 80012c8:	4628      	mov	r0, r5
 80012ca:	ea04 0201 	and.w	r2, r4, r1
 80012ce:	f002 fc31 	bl	8003b34 <HAL_GPIO_WritePin>

	// Set RS pin for command mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_RESET); /* command */
 80012d2:	4630      	mov	r0, r6
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012da:	f002 fc2b 	bl	8003b34 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	4630      	mov	r0, r6
 80012e6:	f002 fc25 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 80012ea:	2002      	movs	r0, #2
 80012ec:	f005 fa22 	bl	8006734 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 80012f0:	4630      	mov	r0, r6
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f8:	f002 fc1c 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 80012fc:	2002      	movs	r0, #2
 80012fe:	f005 fa19 	bl	8006734 <vTaskDelay>

	vTaskDelay(1);
}
 8001302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	vTaskDelay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f005 ba14 	b.w	8006734 <vTaskDelay>
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000

08001314 <LCD_voidInit>:
{
 8001314:	b508      	push	{r3, lr}
	vTaskDelay(50);
 8001316:	2032      	movs	r0, #50	; 0x32
 8001318:	f005 fa0c 	bl	8006734 <vTaskDelay>
	LCD_voidWriteCommand(0x33);
 800131c:	2033      	movs	r0, #51	; 0x33
 800131e:	f7ff ff89 	bl	8001234 <LCD_voidWriteCommand>
	vTaskDelay(10);
 8001322:	200a      	movs	r0, #10
 8001324:	f005 fa06 	bl	8006734 <vTaskDelay>
	LCD_voidWriteCommand(0x32);
 8001328:	2032      	movs	r0, #50	; 0x32
 800132a:	f7ff ff83 	bl	8001234 <LCD_voidWriteCommand>
	vTaskDelay(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f005 fa00 	bl	8006734 <vTaskDelay>
	LCD_voidWriteCommand(0x28);
 8001334:	2028      	movs	r0, #40	; 0x28
 8001336:	f7ff ff7d 	bl	8001234 <LCD_voidWriteCommand>
	vTaskDelay(1);
 800133a:	2001      	movs	r0, #1
 800133c:	f005 f9fa 	bl	8006734 <vTaskDelay>
	LCD_voidWriteCommand(0x0C);
 8001340:	200c      	movs	r0, #12
 8001342:	f7ff ff77 	bl	8001234 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8001346:	2001      	movs	r0, #1
 8001348:	f005 f9f4 	bl	8006734 <vTaskDelay>
	LCD_voidWriteCommand(0x06);
 800134c:	2006      	movs	r0, #6
 800134e:	f7ff ff71 	bl	8001234 <LCD_voidWriteCommand>
	vTaskDelay(1);
 8001352:	2001      	movs	r0, #1
 8001354:	f005 f9ee 	bl	8006734 <vTaskDelay>
	LCD_voidWriteCommand(0x01);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff ff6b 	bl	8001234 <LCD_voidWriteCommand>
	vTaskDelay(2);
 800135e:	2002      	movs	r0, #2
 8001360:	f005 f9e8 	bl	8006734 <vTaskDelay>
}
 8001364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LCD_voidWriteCommand(0x80);
 8001368:	2080      	movs	r0, #128	; 0x80
 800136a:	f7ff bf63 	b.w	8001234 <LCD_voidWriteCommand>
 800136e:	bf00      	nop

08001370 <LCD_voidWriteData>:

void LCD_voidWriteData(uint8_t copy_u8Char)
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4604      	mov	r4, r0
	// Write high nibble of character to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Char, 7)));
 8001374:	4d34      	ldr	r5, [pc, #208]	; (8001448 <LCD_voidWriteData+0xd8>)
 8001376:	09e2      	lsrs	r2, r4, #7
 8001378:	4628      	mov	r0, r5
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	f002 fbd9 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 6)));
 8001382:	4628      	mov	r0, r5
 8001384:	f3c4 1280 	ubfx	r2, r4, #6, #1
 8001388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 5)));
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 4)));

	// Set RS pin for data mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800138c:	4e2f      	ldr	r6, [pc, #188]	; (800144c <LCD_voidWriteData+0xdc>)
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 6)));
 800138e:	f002 fbd1 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 5)));
 8001392:	4628      	mov	r0, r5
 8001394:	f3c4 1240 	ubfx	r2, r4, #5, #1
 8001398:	2120      	movs	r1, #32
 800139a:	f002 fbcb 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 4)));
 800139e:	4628      	mov	r0, r5
 80013a0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80013a4:	2101      	movs	r1, #1
 80013a6:	f002 fbc5 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80013aa:	4630      	mov	r0, r6
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b2:	f002 fbbf 	bl	8003b34 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013bc:	4630      	mov	r0, r6
 80013be:	f002 fbb9 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 80013c2:	2002      	movs	r0, #2
 80013c4:	f005 f9b6 	bl	8006734 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ce:	4630      	mov	r0, r6
 80013d0:	f002 fbb0 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 80013d4:	2002      	movs	r0, #2
 80013d6:	f005 f9ad 	bl	8006734 <vTaskDelay>

	// Write low nibble of character to data pins
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin7, (GET_BIT(copy_u8Char, 3)));
 80013da:	4628      	mov	r0, r5
 80013dc:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 80013e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e4:	f002 fba6 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin6, (GET_BIT(copy_u8Char, 2)));
 80013e8:	4628      	mov	r0, r5
 80013ea:	f3c4 0280 	ubfx	r2, r4, #2, #1
 80013ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f2:	f002 fb9f 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin5, (GET_BIT(copy_u8Char, 1)));
 80013f6:	4628      	mov	r0, r5
 80013f8:	f3c4 0240 	ubfx	r2, r4, #1, #1
 80013fc:	2120      	movs	r1, #32
 80013fe:	f002 fb99 	bl	8003b34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_Pin4, (GET_BIT(copy_u8Char, 0)));
 8001402:	2101      	movs	r1, #1
 8001404:	4628      	mov	r0, r5
 8001406:	ea04 0201 	and.w	r2, r4, r1
 800140a:	f002 fb93 	bl	8003b34 <HAL_GPIO_WritePin>

	// Set RS pin for data mode
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800140e:	4630      	mov	r0, r6
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	f002 fb8d 	bl	8003b34 <HAL_GPIO_WritePin>

	// Enable pulse
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001420:	4630      	mov	r0, r6
 8001422:	f002 fb87 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8001426:	2002      	movs	r0, #2
 8001428:	f005 f984 	bl	8006734 <vTaskDelay>
	HAL_GPIO_WritePin(LCD_Ctrl_Port, LCD_EN_Pin, GPIO_PIN_RESET); // Disable enable pin
 800142c:	4630      	mov	r0, r6
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001434:	f002 fb7e 	bl	8003b34 <HAL_GPIO_WritePin>
	vTaskDelay(2);
 8001438:	2002      	movs	r0, #2
 800143a:	f005 f97b 	bl	8006734 <vTaskDelay>

	vTaskDelay(1);
}
 800143e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	vTaskDelay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f005 b976 	b.w	8006734 <vTaskDelay>
 8001448:	40010c00 	.word	0x40010c00
 800144c:	40011000 	.word	0x40011000

08001450 <LCD_voidSetCursor>:
	vTaskDelay(2); // Delay for 2 milliseconds
}

void LCD_voidSetCursor(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
	LCD_voidWriteCommand((128 + (copy_u8Row * 64) + copy_u8Col)); // Set cursor position
 8001450:	3002      	adds	r0, #2
 8001452:	eb01 1080 	add.w	r0, r1, r0, lsl #6
 8001456:	b2c0      	uxtb	r0, r0
 8001458:	f7ff beec 	b.w	8001234 <LCD_voidWriteCommand>

0800145c <LCD_voidWriteString>:
}

void LCD_voidWriteString(const uint8_t *copy_cu8pString)
{
 800145c:	b538      	push	{r3, r4, r5, lr}
	uint8_t local_u8i = 0;
 800145e:	2400      	movs	r4, #0
{
 8001460:	4605      	mov	r5, r0
	do
	{
		LCD_voidWriteData(copy_cu8pString[local_u8i]); // Write each character in the string
 8001462:	7800      	ldrb	r0, [r0, #0]
		local_u8i++;
 8001464:	3401      	adds	r4, #1
 8001466:	b2e4      	uxtb	r4, r4
		LCD_voidWriteData(copy_cu8pString[local_u8i]); // Write each character in the string
 8001468:	f7ff ff82 	bl	8001370 <LCD_voidWriteData>
	} while (copy_cu8pString[local_u8i] != '\0'); // Continue until null terminator is reached
 800146c:	5d28      	ldrb	r0, [r5, r4]
 800146e:	2800      	cmp	r0, #0
 8001470:	d1f8      	bne.n	8001464 <LCD_voidWriteString+0x8>
}
 8001472:	bd38      	pop	{r3, r4, r5, pc}

08001474 <LCD_voidWriteNum>:

void LCD_voidWriteNum(uint32_t copy_u32Num)
{
	if (0 == copy_u32Num)
 8001474:	b318      	cbz	r0, 80014be <LCD_voidWriteNum+0x4a>
{
 8001476:	b538      	push	{r3, r4, r5, lr}
	{
		LCD_voidWriteData((copy_u32Num % 10) + 48); // Write digit as character
	}
	else
	{
		uint32_t reverse = 1;
 8001478:	2301      	movs	r3, #1
		while (copy_u32Num != 0)
		{
			reverse = (reverse * 10) + (copy_u32Num % 10);
 800147a:	4d12      	ldr	r5, [pc, #72]	; (80014c4 <LCD_voidWriteNum+0x50>)
 800147c:	4601      	mov	r1, r0
 800147e:	fba5 4200 	umull	r4, r2, r5, r0
 8001482:	08d2      	lsrs	r2, r2, #3
 8001484:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8001488:	eba0 0044 	sub.w	r0, r0, r4, lsl #1
 800148c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		while (copy_u32Num != 0)
 8001490:	2909      	cmp	r1, #9
			reverse = (reverse * 10) + (copy_u32Num % 10);
 8001492:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			copy_u32Num /= 10;
 8001496:	4610      	mov	r0, r2
		while (copy_u32Num != 0)
 8001498:	d8f0      	bhi.n	800147c <LCD_voidWriteNum+0x8>
		}
		while (reverse != 1)
 800149a:	2b01      	cmp	r3, #1
 800149c:	d00e      	beq.n	80014bc <LCD_voidWriteNum+0x48>
		{
			LCD_voidWriteData((reverse % 10) + 48); // Write digit as character
 800149e:	4d09      	ldr	r5, [pc, #36]	; (80014c4 <LCD_voidWriteNum+0x50>)
 80014a0:	fba5 2403 	umull	r2, r4, r5, r3
 80014a4:	08e4      	lsrs	r4, r4, #3
 80014a6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80014aa:	eba3 0042 	sub.w	r0, r3, r2, lsl #1
 80014ae:	3030      	adds	r0, #48	; 0x30
 80014b0:	b2c0      	uxtb	r0, r0
 80014b2:	f7ff ff5d 	bl	8001370 <LCD_voidWriteData>
		while (reverse != 1)
 80014b6:	2c01      	cmp	r4, #1
			reverse /= 10;
 80014b8:	4623      	mov	r3, r4
		while (reverse != 1)
 80014ba:	d1f1      	bne.n	80014a0 <LCD_voidWriteNum+0x2c>
		}
	}
}
 80014bc:	bd38      	pop	{r3, r4, r5, pc}
		LCD_voidWriteData((copy_u32Num % 10) + 48); // Write digit as character
 80014be:	2030      	movs	r0, #48	; 0x30
 80014c0:	f7ff bf56 	b.w	8001370 <LCD_voidWriteData>
 80014c4:	cccccccd 	.word	0xcccccccd

080014c8 <LED_voidTurnOn>:
//include LED Header files
#include "LED_interface.h"
#include "LED_config.h"

void LED_voidTurnOn(uint8_t copy_u8LedNum)
{
 80014c8:	4601      	mov	r1, r0
	// Set GPIO pin to high state to turn on LED
	HAL_GPIO_WritePin(GPIOA, copy_u8LedNum, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	4801      	ldr	r0, [pc, #4]	; (80014d4 <LED_voidTurnOn+0xc>)
 80014ce:	f002 bb31 	b.w	8003b34 <HAL_GPIO_WritePin>
 80014d2:	bf00      	nop
 80014d4:	40010800 	.word	0x40010800

080014d8 <LED_voidTurnOff>:
}
void LED_voidTurnOff(uint8_t copy_u8LedNum)
{
 80014d8:	4601      	mov	r1, r0
	// Set GPIO pin to low state to turn off LED
	HAL_GPIO_WritePin(GPIOA, copy_u8LedNum, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <LED_voidTurnOff+0xc>)
 80014de:	f002 bb29 	b.w	8003b34 <HAL_GPIO_WritePin>
 80014e2:	bf00      	nop
 80014e4:	40010800 	.word	0x40010800

080014e8 <LED_voidToggle>:
}
void LED_voidToggle(uint8_t copy_u8LedNum)
{
 80014e8:	4601      	mov	r1, r0
	// Toggle GPIO pins to change LED state
	HAL_GPIO_TogglePin(GPIOA, copy_u8LedNum);
 80014ea:	4801      	ldr	r0, [pc, #4]	; (80014f0 <LED_voidToggle+0x8>)
 80014ec:	f002 bb26 	b.w	8003b3c <HAL_GPIO_TogglePin>
 80014f0:	40010800 	.word	0x40010800

080014f4 <LineDetector_voidRead>:
#define Line_Tracker_Port	GPIOB
#define Line_Tracker_Pin1 	GPIO_PIN_10
#define Line_Tracker_Pin2 	GPIO_PIN_11

void LineDetector_voidRead(uint8_t *IR1, uint8_t *IR2)
{
 80014f4:	b570      	push	{r4, r5, r6, lr}
	*IR1 = HAL_GPIO_ReadPin(Line_Tracker_Port, Line_Tracker_Pin1);
 80014f6:	4e08      	ldr	r6, [pc, #32]	; (8001518 <LineDetector_voidRead+0x24>)
{
 80014f8:	4605      	mov	r5, r0
 80014fa:	460c      	mov	r4, r1
	*IR1 = HAL_GPIO_ReadPin(Line_Tracker_Port, Line_Tracker_Pin1);
 80014fc:	4630      	mov	r0, r6
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	f002 fb11 	bl	8003b28 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
	*IR2 = HAL_GPIO_ReadPin(Line_Tracker_Port, Line_Tracker_Pin2);
 8001508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150c:	4630      	mov	r0, r6
	*IR1 = HAL_GPIO_ReadPin(Line_Tracker_Port, Line_Tracker_Pin1);
 800150e:	702b      	strb	r3, [r5, #0]
	*IR2 = HAL_GPIO_ReadPin(Line_Tracker_Port, Line_Tracker_Pin2);
 8001510:	f002 fb0a 	bl	8003b28 <HAL_GPIO_ReadPin>
 8001514:	7020      	strb	r0, [r4, #0]
}
 8001516:	bd70      	pop	{r4, r5, r6, pc}
 8001518:	40010c00 	.word	0x40010c00

0800151c <LM35_fReadTemperature>:
#include "adc.h"
//#include "stm32f1xx_hal_adc.h"


float LM35_fReadTemperature(void)
{
 800151c:	b510      	push	{r4, lr}
	uint16_t adc_value = 0;

	// Start ADC conversion
	if (HAL_ADC_Start(&hadc2) != HAL_OK) {
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <LM35_fReadTemperature+0x48>)
 8001520:	f001 ffd0 	bl	80034c4 <HAL_ADC_Start>
 8001524:	b110      	cbz	r0, 800152c <LM35_fReadTemperature+0x10>
		// Handle ADC start error
		// Add error handling code here
		return 0.0f;
 8001526:	2400      	movs	r4, #0
	temperature *= 100.0f; // LM35 has a sensitivity of 10mV/°C

	HAL_ADC_Stop(&hadc2);

	return temperature;
}
 8001528:	4620      	mov	r0, r4
 800152a:	bd10      	pop	{r4, pc}
	if (HAL_ADC_PollForConversion(&hadc2, 100) != HAL_OK) {
 800152c:	2164      	movs	r1, #100	; 0x64
 800152e:	480d      	ldr	r0, [pc, #52]	; (8001564 <LM35_fReadTemperature+0x48>)
 8001530:	f001 fe34 	bl	800319c <HAL_ADC_PollForConversion>
 8001534:	2800      	cmp	r0, #0
 8001536:	d1f6      	bne.n	8001526 <LM35_fReadTemperature+0xa>
	adc_value = HAL_ADC_GetValue(&hadc2);
 8001538:	480a      	ldr	r0, [pc, #40]	; (8001564 <LM35_fReadTemperature+0x48>)
 800153a:	f001 fee1 	bl	8003300 <HAL_ADC_GetValue>
	float temperature = adc_value * 3.3f / 4096.0f;
 800153e:	b280      	uxth	r0, r0
 8001540:	f7ff fb7c 	bl	8000c3c <__aeabi_i2f>
 8001544:	4908      	ldr	r1, [pc, #32]	; (8001568 <LM35_fReadTemperature+0x4c>)
 8001546:	f7ff fbcd 	bl	8000ce4 <__aeabi_fmul>
 800154a:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 800154e:	f7ff fbc9 	bl	8000ce4 <__aeabi_fmul>
	temperature *= 100.0f; // LM35 has a sensitivity of 10mV/°C
 8001552:	4906      	ldr	r1, [pc, #24]	; (800156c <LM35_fReadTemperature+0x50>)
 8001554:	f7ff fbc6 	bl	8000ce4 <__aeabi_fmul>
 8001558:	4604      	mov	r4, r0
	HAL_ADC_Stop(&hadc2);
 800155a:	4802      	ldr	r0, [pc, #8]	; (8001564 <LM35_fReadTemperature+0x48>)
 800155c:	f002 f8e4 	bl	8003728 <HAL_ADC_Stop>
}
 8001560:	4620      	mov	r0, r4
 8001562:	bd10      	pop	{r4, pc}
 8001564:	2000015c 	.word	0x2000015c
 8001568:	40533333 	.word	0x40533333
 800156c:	42c80000 	.word	0x42c80000

08001570 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN voidTIM1_CC_IRQn 0 */



	if (htim->Instance == TIM1) {
 8001570:	4a91      	ldr	r2, [pc, #580]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001572:	6803      	ldr	r3, [r0, #0]
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001574:	b430      	push	{r4, r5}
	if (htim->Instance == TIM1) {
 8001576:	4293      	cmp	r3, r2
 8001578:	d02c      	beq.n	80015d4 <HAL_TIM_IC_CaptureCallback+0x64>
		/********************************************************TIMER3******************************************/




	} else if (htim->Instance == TIM3) {
 800157a:	4a90      	ldr	r2, [pc, #576]	; (80017bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d001      	beq.n	8001584 <HAL_TIM_IC_CaptureCallback+0x14>

	}



}
 8001580:	bc30      	pop	{r4, r5}
 8001582:	4770      	bx	lr
		if (State_T3 == 0) {
 8001584:	498e      	ldr	r1, [pc, #568]	; (80017c0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001586:	780a      	ldrb	r2, [r1, #0]
 8001588:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800158c:	2a00      	cmp	r2, #0
 800158e:	f040 80c7 	bne.w	8001720 <HAL_TIM_IC_CaptureCallback+0x1b0>
			if (__HAL_TIM_GET_FLAG(&htim3 ,TIM_FLAG_CC1)){
 8001592:	4a8c      	ldr	r2, [pc, #560]	; (80017c4 <HAL_TIM_IC_CaptureCallback+0x254>)
			TIM3->CNT = 0x0;
 8001594:	6258      	str	r0, [r3, #36]	; 0x24
			if (__HAL_TIM_GET_FLAG(&htim3 ,TIM_FLAG_CC1)){
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	6914      	ldr	r4, [r2, #16]
 800159a:	07a4      	lsls	r4, r4, #30
 800159c:	f100 80fa 	bmi.w	8001794 <HAL_TIM_IC_CaptureCallback+0x224>
 80015a0:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x258>)
			if (__HAL_TIM_GET_FLAG(&htim3 ,TIM_FLAG_CC2)){
 80015a2:	6910      	ldr	r0, [r2, #16]
 80015a4:	0745      	lsls	r5, r0, #29
 80015a6:	d511      	bpl.n	80015cc <HAL_TIM_IC_CaptureCallback+0x5c>
				TIM3->CCR2 = 0x0;
 80015a8:	2500      	movs	r5, #0
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC2);
 80015aa:	f06f 0404 	mvn.w	r4, #4
				TIM3->CCR2 = 0x0;
 80015ae:	4883      	ldr	r0, [pc, #524]	; (80017bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 80015b0:	6385      	str	r5, [r0, #56]	; 0x38
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015b2:	6a10      	ldr	r0, [r2, #32]
 80015b4:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
 80015b8:	6210      	str	r0, [r2, #32]
 80015ba:	6a10      	ldr	r0, [r2, #32]
 80015bc:	f040 0020 	orr.w	r0, r0, #32
 80015c0:	6210      	str	r0, [r2, #32]
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC2);
 80015c2:	6114      	str	r4, [r2, #16]
				IT_numbers_T3++ ;
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	3201      	adds	r2, #1
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
			if(IT_numbers_T3==2){
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	2a02      	cmp	r2, #2
 80015d0:	d1d6      	bne.n	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
 80015d2:	e04f      	b.n	8001674 <HAL_TIM_IC_CaptureCallback+0x104>
		if (State == 0) {
 80015d4:	497d      	ldr	r1, [pc, #500]	; (80017cc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80015d6:	780a      	ldrb	r2, [r1, #0]
 80015d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d150      	bne.n	8001682 <HAL_TIM_IC_CaptureCallback+0x112>
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC1)){
 80015e0:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x260>)
			TIM1->CNT = 0x0;
 80015e2:	6258      	str	r0, [r3, #36]	; 0x24
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC1)){
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	6914      	ldr	r4, [r2, #16]
 80015e8:	07a4      	lsls	r4, r4, #30
 80015ea:	f100 80c1 	bmi.w	8001770 <HAL_TIM_IC_CaptureCallback+0x200>
 80015ee:	4b79      	ldr	r3, [pc, #484]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x264>)
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC2)){
 80015f0:	6910      	ldr	r0, [r2, #16]
 80015f2:	0745      	lsls	r5, r0, #29
 80015f4:	d511      	bpl.n	800161a <HAL_TIM_IC_CaptureCallback+0xaa>
				TIM1->CCR2 = 0x0;
 80015f6:	2500      	movs	r5, #0
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC2);
 80015f8:	f06f 0404 	mvn.w	r4, #4
				TIM1->CCR2 = 0x0;
 80015fc:	486e      	ldr	r0, [pc, #440]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80015fe:	6385      	str	r5, [r0, #56]	; 0x38
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001600:	6a10      	ldr	r0, [r2, #32]
 8001602:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
 8001606:	6210      	str	r0, [r2, #32]
 8001608:	6a10      	ldr	r0, [r2, #32]
 800160a:	f040 0020 	orr.w	r0, r0, #32
 800160e:	6210      	str	r0, [r2, #32]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC2);
 8001610:	6114      	str	r4, [r2, #16]
				IT_numbers++ ;
 8001612:	7818      	ldrb	r0, [r3, #0]
 8001614:	3001      	adds	r0, #1
 8001616:	b2c0      	uxtb	r0, r0
 8001618:	7018      	strb	r0, [r3, #0]
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC3)){
 800161a:	6910      	ldr	r0, [r2, #16]
 800161c:	0704      	lsls	r4, r0, #28
 800161e:	d511      	bpl.n	8001644 <HAL_TIM_IC_CaptureCallback+0xd4>
				TIM1->CCR3 = 0x0;
 8001620:	2500      	movs	r5, #0
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC3);
 8001622:	f06f 0408 	mvn.w	r4, #8
				TIM1->CCR3 = 0x0;
 8001626:	4864      	ldr	r0, [pc, #400]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001628:	63c5      	str	r5, [r0, #60]	; 0x3c
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800162a:	6a10      	ldr	r0, [r2, #32]
 800162c:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8001630:	6210      	str	r0, [r2, #32]
 8001632:	6a10      	ldr	r0, [r2, #32]
 8001634:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8001638:	6210      	str	r0, [r2, #32]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC3);
 800163a:	6114      	str	r4, [r2, #16]
				IT_numbers++ ;
 800163c:	7818      	ldrb	r0, [r3, #0]
 800163e:	3001      	adds	r0, #1
 8001640:	b2c0      	uxtb	r0, r0
 8001642:	7018      	strb	r0, [r3, #0]
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC4)){
 8001644:	6910      	ldr	r0, [r2, #16]
 8001646:	06c0      	lsls	r0, r0, #27
 8001648:	d511      	bpl.n	800166e <HAL_TIM_IC_CaptureCallback+0xfe>
				TIM1->CCR4 = 0x0;
 800164a:	2500      	movs	r5, #0
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC4);
 800164c:	f06f 0410 	mvn.w	r4, #16
				TIM1->CCR4 = 0x0;
 8001650:	4859      	ldr	r0, [pc, #356]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001652:	6405      	str	r5, [r0, #64]	; 0x40
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001654:	6a10      	ldr	r0, [r2, #32]
 8001656:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800165a:	6210      	str	r0, [r2, #32]
 800165c:	6a10      	ldr	r0, [r2, #32]
 800165e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8001662:	6210      	str	r0, [r2, #32]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC4);
 8001664:	6114      	str	r4, [r2, #16]
				IT_numbers++ ;
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	3201      	adds	r2, #1
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]
			if(IT_numbers==4){
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	2a04      	cmp	r2, #4
 8001672:	d185      	bne.n	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
				IT_numbers_T3 = 0 ;
 8001674:	2000      	movs	r0, #0
				State_T3++ ;
 8001676:	780a      	ldrb	r2, [r1, #0]
 8001678:	3201      	adds	r2, #1
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	700a      	strb	r2, [r1, #0]
				IT_numbers_T3 = 0 ;
 800167e:	7018      	strb	r0, [r3, #0]
 8001680:	e77e      	b.n	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
		} else if (State == 1) {
 8001682:	780a      	ldrb	r2, [r1, #0]
 8001684:	2a01      	cmp	r2, #1
 8001686:	f47f af7b 	bne.w	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC1)){
 800168a:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_TIM_IC_CaptureCallback+0x260>)
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	6910      	ldr	r0, [r2, #16]
 8001690:	0785      	lsls	r5, r0, #30
 8001692:	f100 80a9 	bmi.w	80017e8 <HAL_TIM_IC_CaptureCallback+0x278>
 8001696:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x264>)
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC2)){
 8001698:	6910      	ldr	r0, [r2, #16]
 800169a:	0744      	lsls	r4, r0, #29
 800169c:	d511      	bpl.n	80016c2 <HAL_TIM_IC_CaptureCallback+0x152>
				TIMEON2 = TIM1->CCR2;
 800169e:	4846      	ldr	r0, [pc, #280]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80016a0:	4c4d      	ldr	r4, [pc, #308]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0x268>)
 80016a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80016a4:	b280      	uxth	r0, r0
 80016a6:	8020      	strh	r0, [r4, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC2);
 80016a8:	f06f 0404 	mvn.w	r4, #4
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80016ac:	6a10      	ldr	r0, [r2, #32]
 80016ae:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
 80016b2:	6210      	str	r0, [r2, #32]
 80016b4:	6a10      	ldr	r0, [r2, #32]
 80016b6:	6210      	str	r0, [r2, #32]
				IT_numbers++ ;
 80016b8:	7818      	ldrb	r0, [r3, #0]
 80016ba:	3001      	adds	r0, #1
 80016bc:	b2c0      	uxtb	r0, r0
 80016be:	7018      	strb	r0, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC2);
 80016c0:	6114      	str	r4, [r2, #16]
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC3)){
 80016c2:	6910      	ldr	r0, [r2, #16]
 80016c4:	0700      	lsls	r0, r0, #28
 80016c6:	d511      	bpl.n	80016ec <HAL_TIM_IC_CaptureCallback+0x17c>
				TIMEON3 = TIM1->CCR3;
 80016c8:	483b      	ldr	r0, [pc, #236]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80016ca:	4c44      	ldr	r4, [pc, #272]	; (80017dc <HAL_TIM_IC_CaptureCallback+0x26c>)
 80016cc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80016ce:	b280      	uxth	r0, r0
 80016d0:	8020      	strh	r0, [r4, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC3);
 80016d2:	f06f 0408 	mvn.w	r4, #8
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80016d6:	6a10      	ldr	r0, [r2, #32]
 80016d8:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80016dc:	6210      	str	r0, [r2, #32]
 80016de:	6a10      	ldr	r0, [r2, #32]
 80016e0:	6210      	str	r0, [r2, #32]
				IT_numbers++ ;
 80016e2:	7818      	ldrb	r0, [r3, #0]
 80016e4:	3001      	adds	r0, #1
 80016e6:	b2c0      	uxtb	r0, r0
 80016e8:	7018      	strb	r0, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC3);
 80016ea:	6114      	str	r4, [r2, #16]
			if (__HAL_TIM_GET_FLAG(&htim1 ,TIM_FLAG_CC4)){
 80016ec:	6910      	ldr	r0, [r2, #16]
 80016ee:	06c5      	lsls	r5, r0, #27
 80016f0:	d511      	bpl.n	8001716 <HAL_TIM_IC_CaptureCallback+0x1a6>
				TIMEON4 = TIM1->CCR4;
 80016f2:	4831      	ldr	r0, [pc, #196]	; (80017b8 <HAL_TIM_IC_CaptureCallback+0x248>)
 80016f4:	4c3a      	ldr	r4, [pc, #232]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0x270>)
 80016f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80016f8:	b280      	uxth	r0, r0
 80016fa:	8020      	strh	r0, [r4, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC4);
 80016fc:	f06f 0410 	mvn.w	r4, #16
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8001700:	6a10      	ldr	r0, [r2, #32]
 8001702:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8001706:	6210      	str	r0, [r2, #32]
 8001708:	6a10      	ldr	r0, [r2, #32]
 800170a:	6210      	str	r0, [r2, #32]
				IT_numbers++ ;
 800170c:	7818      	ldrb	r0, [r3, #0]
 800170e:	3001      	adds	r0, #1
 8001710:	b2c0      	uxtb	r0, r0
 8001712:	7018      	strb	r0, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC4);
 8001714:	6114      	str	r4, [r2, #16]
			if(IT_numbers==4){
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b04      	cmp	r3, #4
 800171a:	f47f af31 	bne.w	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
 800171e:	e022      	b.n	8001766 <HAL_TIM_IC_CaptureCallback+0x1f6>
		else if (State_T3==1){
 8001720:	780a      	ldrb	r2, [r1, #0]
 8001722:	2a01      	cmp	r2, #1
 8001724:	f47f af2c 	bne.w	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
			if (__HAL_TIM_GET_FLAG(&htim3 ,TIM_FLAG_CC1)){
 8001728:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_TIM_IC_CaptureCallback+0x254>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	6910      	ldr	r0, [r2, #16]
 800172e:	0784      	lsls	r4, r0, #30
 8001730:	d46d      	bmi.n	800180e <HAL_TIM_IC_CaptureCallback+0x29e>
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x258>)
			if (__HAL_TIM_GET_FLAG(&htim3 ,TIM_FLAG_CC2)){
 8001734:	6910      	ldr	r0, [r2, #16]
 8001736:	0740      	lsls	r0, r0, #29
 8001738:	d511      	bpl.n	800175e <HAL_TIM_IC_CaptureCallback+0x1ee>
				TIMEON2_T3 = TIM3->CCR2;
 800173a:	4820      	ldr	r0, [pc, #128]	; (80017bc <HAL_TIM_IC_CaptureCallback+0x24c>)
 800173c:	4c29      	ldr	r4, [pc, #164]	; (80017e4 <HAL_TIM_IC_CaptureCallback+0x274>)
 800173e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001740:	b280      	uxth	r0, r0
 8001742:	8020      	strh	r0, [r4, #0]
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC2);
 8001744:	f06f 0404 	mvn.w	r4, #4
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001748:	6a10      	ldr	r0, [r2, #32]
 800174a:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
 800174e:	6210      	str	r0, [r2, #32]
 8001750:	6a10      	ldr	r0, [r2, #32]
 8001752:	6210      	str	r0, [r2, #32]
				IT_numbers_T3++ ;
 8001754:	7818      	ldrb	r0, [r3, #0]
 8001756:	3001      	adds	r0, #1
 8001758:	b2c0      	uxtb	r0, r0
 800175a:	7018      	strb	r0, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC2);
 800175c:	6114      	str	r4, [r2, #16]
			if(IT_numbers_T3==2){
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b02      	cmp	r3, #2
 8001762:	f47f af0d 	bne.w	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
				State_T3++ ;
 8001766:	780b      	ldrb	r3, [r1, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	700b      	strb	r3, [r1, #0]
}
 800176e:	e707      	b.n	8001580 <HAL_TIM_IC_CaptureCallback+0x10>
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 8001770:	f06f 0402 	mvn.w	r4, #2
				TIM1->CCR1 = 0x0;
 8001774:	6358      	str	r0, [r3, #52]	; 0x34
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001776:	6a13      	ldr	r3, [r2, #32]
 8001778:	f023 030a 	bic.w	r3, r3, #10
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	6a13      	ldr	r3, [r2, #32]
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6213      	str	r3, [r2, #32]
				IT_numbers++ ;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_TIM_IC_CaptureCallback+0x264>)
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 8001788:	6114      	str	r4, [r2, #16]
				IT_numbers++ ;
 800178a:	7818      	ldrb	r0, [r3, #0]
 800178c:	3001      	adds	r0, #1
 800178e:	b2c0      	uxtb	r0, r0
 8001790:	7018      	strb	r0, [r3, #0]
 8001792:	e72d      	b.n	80015f0 <HAL_TIM_IC_CaptureCallback+0x80>
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC1);
 8001794:	f06f 0402 	mvn.w	r4, #2
				TIM3->CCR1 = 0x0;
 8001798:	6358      	str	r0, [r3, #52]	; 0x34
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800179a:	6a13      	ldr	r3, [r2, #32]
 800179c:	f023 030a 	bic.w	r3, r3, #10
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	6a13      	ldr	r3, [r2, #32]
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6213      	str	r3, [r2, #32]
				IT_numbers_T3++ ;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_TIM_IC_CaptureCallback+0x258>)
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC1);
 80017ac:	6114      	str	r4, [r2, #16]
				IT_numbers_T3++ ;
 80017ae:	7818      	ldrb	r0, [r3, #0]
 80017b0:	3001      	adds	r0, #1
 80017b2:	b2c0      	uxtb	r0, r0
 80017b4:	7018      	strb	r0, [r3, #0]
 80017b6:	e6f4      	b.n	80015a2 <HAL_TIM_IC_CaptureCallback+0x32>
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40000400 	.word	0x40000400
 80017c0:	2000011f 	.word	0x2000011f
 80017c4:	20000568 	.word	0x20000568
 80017c8:	2000011d 	.word	0x2000011d
 80017cc:	2000011e 	.word	0x2000011e
 80017d0:	200004d8 	.word	0x200004d8
 80017d4:	2000011c 	.word	0x2000011c
 80017d8:	20000124 	.word	0x20000124
 80017dc:	20000128 	.word	0x20000128
 80017e0:	2000012a 	.word	0x2000012a
 80017e4:	20000126 	.word	0x20000126
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 80017e8:	f06f 0402 	mvn.w	r4, #2
				TIMEON1 = TIM1->CCR1;
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	8003      	strh	r3, [r0, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80017f4:	6a10      	ldr	r0, [r2, #32]
				IT_numbers++ ;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_TIM_IC_CaptureCallback+0x2c8>)
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80017f8:	f020 000a 	bic.w	r0, r0, #10
 80017fc:	6210      	str	r0, [r2, #32]
 80017fe:	6a10      	ldr	r0, [r2, #32]
 8001800:	6210      	str	r0, [r2, #32]
				IT_numbers++ ;
 8001802:	7818      	ldrb	r0, [r3, #0]
 8001804:	3001      	adds	r0, #1
 8001806:	b2c0      	uxtb	r0, r0
 8001808:	7018      	strb	r0, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_CC1);
 800180a:	6114      	str	r4, [r2, #16]
 800180c:	e744      	b.n	8001698 <HAL_TIM_IC_CaptureCallback+0x128>
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC1);
 800180e:	f06f 0402 	mvn.w	r4, #2
				TIMEON1_T3 = TIM3->CCR1;
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8001816:	b29b      	uxth	r3, r3
 8001818:	8003      	strh	r3, [r0, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800181a:	6a10      	ldr	r0, [r2, #32]
				IT_numbers_T3++ ;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_TIM_IC_CaptureCallback+0x2d0>)
				__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800181e:	f020 000a 	bic.w	r0, r0, #10
 8001822:	6210      	str	r0, [r2, #32]
 8001824:	6a10      	ldr	r0, [r2, #32]
 8001826:	6210      	str	r0, [r2, #32]
				IT_numbers_T3++ ;
 8001828:	7818      	ldrb	r0, [r3, #0]
 800182a:	3001      	adds	r0, #1
 800182c:	b2c0      	uxtb	r0, r0
 800182e:	7018      	strb	r0, [r3, #0]
				__HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_CC1);
 8001830:	6114      	str	r4, [r2, #16]
 8001832:	e77f      	b.n	8001734 <HAL_TIM_IC_CaptureCallback+0x1c4>
 8001834:	20000120 	.word	0x20000120
 8001838:	2000011c 	.word	0x2000011c
 800183c:	20000122 	.word	0x20000122
 8001840:	2000011d 	.word	0x2000011d

08001844 <UltraSonic_INIT_TIMER1_ALL_CHANNEL>:

}
/**
 * @brief Initialize the ultrasonic sensor
 */
void UltraSonic_INIT_TIMER1_ALL_CHANNEL(void) {
 8001844:	b510      	push	{r4, lr}
	// Start the input capture interrupt for TIM1 all channel
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001846:	4c09      	ldr	r4, [pc, #36]	; (800186c <UltraSonic_INIT_TIMER1_ALL_CHANNEL+0x28>)
 8001848:	2100      	movs	r1, #0
 800184a:	4620      	mov	r0, r4
 800184c:	f003 fb56 	bl	8004efc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) ;
 8001850:	2104      	movs	r1, #4
 8001852:	4620      	mov	r0, r4
 8001854:	f003 fb52 	bl	8004efc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001858:	2108      	movs	r1, #8
 800185a:	4620      	mov	r0, r4
 800185c:	f003 fb4e 	bl	8004efc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4) ;
 8001860:	4620      	mov	r0, r4

}
 8001862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4) ;
 8001866:	210c      	movs	r1, #12
 8001868:	f003 bb48 	b.w	8004efc <HAL_TIM_IC_Start_IT>
 800186c:	200004d8 	.word	0x200004d8

08001870 <UltraSonic_INIT_TIMER3_Ch1_ch2>:
void UltraSonic_INIT_TIMER3_Ch1_ch2(void){
 8001870:	b510      	push	{r4, lr}

	// Start the input capture interrupt for TIM3 channel 1 ,2
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001872:	4c05      	ldr	r4, [pc, #20]	; (8001888 <UltraSonic_INIT_TIMER3_Ch1_ch2+0x18>)
 8001874:	2100      	movs	r1, #0
 8001876:	4620      	mov	r0, r4
 8001878:	f003 fb40 	bl	8004efc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2) ;
 800187c:	4620      	mov	r0, r4

}
 800187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2) ;
 8001882:	2104      	movs	r1, #4
 8001884:	f003 bb3a 	b.w	8004efc <HAL_TIM_IC_Start_IT>
 8001888:	20000568 	.word	0x20000568
 800188c:	00000000 	.word	0x00000000

08001890 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL>:
/**
 * @brief Measure the distance using the ultrasonic sensor
 * @param Distance_CM Pointer to store the measured distance in centimeters
 */
void UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL(float *Distance_CM_T1ch1 ,float *Distance_CM_T1ch2,float *Distance_CM_T1ch3,float *Distance_CM_T1ch4) {
 8001890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	4681      	mov	r9, r0
 8001896:	4688      	mov	r8, r1
 8001898:	4617      	mov	r7, r2
	uint32_t TON_microSec1 = 0;
	uint32_t TON_microSec2 = 0;
	uint32_t TON_microSec3 = 0;
	uint32_t TON_microSec4 = 0;
	// Trigger the ultrasonic sensor by sending a pulse
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	2200      	movs	r2, #0
 80018a0:	4845      	ldr	r0, [pc, #276]	; (80019b8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x128>)
void UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL(float *Distance_CM_T1ch1 ,float *Distance_CM_T1ch2,float *Distance_CM_T1ch3,float *Distance_CM_T1ch4) {
 80018a2:	461e      	mov	r6, r3
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80018a4:	f002 f946 	bl	8003b34 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // Reset the timer counter
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8df a110 	ldr.w	sl, [pc, #272]	; 80019bc <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x12c>
 80018ae:	f8da 5000 	ldr.w	r5, [sl]
 80018b2:	626b      	str	r3, [r5, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time); // Wait until the timer counter reaches the specified time
 80018b4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80018b6:	2c02      	cmp	r4, #2
 80018b8:	d9fc      	bls.n	80018b4 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x24>
	delay(3); // Wait for a short duration
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c0:	483d      	ldr	r0, [pc, #244]	; (80019b8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x128>)
 80018c2:	f002 f937 	bl	8003b34 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // Reset the timer counter
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8da 5000 	ldr.w	r5, [sl]
 80018cc:	626b      	str	r3, [r5, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time); // Wait until the timer counter reaches the specified time
 80018ce:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80018d0:	2c09      	cmp	r4, #9
 80018d2:	d9fc      	bls.n	80018ce <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x3e>
	delay(10); // Keep the trigger pin high for the required duration
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Reset the trigger pin
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	4837      	ldr	r0, [pc, #220]	; (80019b8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x128>)
 80018dc:	f002 f92a 	bl	8003b34 <HAL_GPIO_WritePin>
	if (State == 2) // Wait until the measurement is complete
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x130>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	2a02      	cmp	r2, #2
 80018e6:	d00b      	beq.n	8001900 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x70>
 80018e8:	2300      	movs	r3, #0
 80018ea:	461c      	mov	r4, r3
 80018ec:	461d      	mov	r5, r3
 80018ee:	469a      	mov	sl, r3

	// Measure the time-on period using the internal function
	ICU_VoidGet_TON_TIMER1_ALL_CHANNEL(&TON_microSec1,&TON_microSec2,&TON_microSec3,&TON_microSec4);

	// Calculate the distance in centimeters using the time-on period and the speed of sound
	*Distance_CM_T1ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 80018f0:	f8c9 a000 	str.w	sl, [r9]
	*Distance_CM_T1ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 80018f4:	f8c8 5000 	str.w	r5, [r8]
	*Distance_CM_T1ch3 = (float)(((velocity * TON_microSec3) / 10000.0) / 2.0); // CENTIMETER
 80018f8:	603c      	str	r4, [r7, #0]
	*Distance_CM_T1ch4 = (float)(((velocity * TON_microSec4) / 10000.0) / 2.0); // CENTIMETER
 80018fa:	6033      	str	r3, [r6, #0]


}
 80018fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		State = 0 ;
 8001900:	2200      	movs	r2, #0
	*Distance_CM_T1ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001902:	f240 1b57 	movw	fp, #343	; 0x157
		*TON_microSec1 = TIMEON1;
 8001906:	492f      	ldr	r1, [pc, #188]	; (80019c4 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x134>)
 8001908:	8808      	ldrh	r0, [r1, #0]
		*TON_microSec2 = TIMEON2;
 800190a:	492f      	ldr	r1, [pc, #188]	; (80019c8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x138>)
		*TON_microSec1 = TIMEON1;
 800190c:	b280      	uxth	r0, r0
		*TON_microSec2 = TIMEON2;
 800190e:	f8b1 a000 	ldrh.w	sl, [r1]
		*TON_microSec3 = TIMEON3;
 8001912:	492e      	ldr	r1, [pc, #184]	; (80019cc <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x13c>)
	*Distance_CM_T1ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001914:	fb0b f000 	mul.w	r0, fp, r0
		*TON_microSec3 = TIMEON3;
 8001918:	880d      	ldrh	r5, [r1, #0]
		*TON_microSec4 = TIMEON4;
 800191a:	492d      	ldr	r1, [pc, #180]	; (80019d0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x140>)
		*TON_microSec2 = TIMEON2;
 800191c:	fa1f fa8a 	uxth.w	sl, sl
		*TON_microSec4 = TIMEON4;
 8001920:	880c      	ldrh	r4, [r1, #0]
		State = 0 ;
 8001922:	701a      	strb	r2, [r3, #0]
		IT_numbers = 0 ;
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x144>)
		*TON_microSec3 = TIMEON3;
 8001926:	b2ad      	uxth	r5, r5
		IT_numbers = 0 ;
 8001928:	701a      	strb	r2, [r3, #0]
	*Distance_CM_T1ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 800192a:	f7fe fd53 	bl	80003d4 <__aeabi_ui2d>
 800192e:	a320      	add	r3, pc, #128	; (adr r3, 80019b0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x120>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fef2 	bl	800071c <__aeabi_ddiv>
 8001938:	2200      	movs	r2, #0
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x148>)
 800193c:	f7fe fdc4 	bl	80004c8 <__aeabi_dmul>
 8001940:	f7ff f872 	bl	8000a28 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
	*Distance_CM_T1ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 8001946:	fb0b f00a 	mul.w	r0, fp, sl
	*Distance_CM_T1ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 800194a:	469a      	mov	sl, r3
	*Distance_CM_T1ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 800194c:	f7fe fd42 	bl	80003d4 <__aeabi_ui2d>
 8001950:	a317      	add	r3, pc, #92	; (adr r3, 80019b0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x120>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fee1 	bl	800071c <__aeabi_ddiv>
 800195a:	2200      	movs	r2, #0
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x148>)
 800195e:	f7fe fdb3 	bl	80004c8 <__aeabi_dmul>
 8001962:	f7ff f861 	bl	8000a28 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
	*Distance_CM_T1ch3 = (float)(((velocity * TON_microSec3) / 10000.0) / 2.0); // CENTIMETER
 8001968:	fb0b f005 	mul.w	r0, fp, r5
	*Distance_CM_T1ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 800196c:	461d      	mov	r5, r3
	*Distance_CM_T1ch3 = (float)(((velocity * TON_microSec3) / 10000.0) / 2.0); // CENTIMETER
 800196e:	f7fe fd31 	bl	80003d4 <__aeabi_ui2d>
 8001972:	a30f      	add	r3, pc, #60	; (adr r3, 80019b0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x120>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fed0 	bl	800071c <__aeabi_ddiv>
 800197c:	2200      	movs	r2, #0
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x148>)
 8001980:	f7fe fda2 	bl	80004c8 <__aeabi_dmul>
 8001984:	f7ff f850 	bl	8000a28 <__aeabi_d2f>
 8001988:	4603      	mov	r3, r0
		*TON_microSec4 = TIMEON4;
 800198a:	b2a4      	uxth	r4, r4
	*Distance_CM_T1ch4 = (float)(((velocity * TON_microSec4) / 10000.0) / 2.0); // CENTIMETER
 800198c:	fb0b f004 	mul.w	r0, fp, r4
	*Distance_CM_T1ch3 = (float)(((velocity * TON_microSec3) / 10000.0) / 2.0); // CENTIMETER
 8001990:	461c      	mov	r4, r3
	*Distance_CM_T1ch4 = (float)(((velocity * TON_microSec4) / 10000.0) / 2.0); // CENTIMETER
 8001992:	f7fe fd1f 	bl	80003d4 <__aeabi_ui2d>
 8001996:	a306      	add	r3, pc, #24	; (adr r3, 80019b0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x120>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe febe 	bl	800071c <__aeabi_ddiv>
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x148>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f7fe fd90 	bl	80004c8 <__aeabi_dmul>
 80019a8:	f7ff f83e 	bl	8000a28 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	e79f      	b.n	80018f0 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL+0x60>
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40c38800 	.word	0x40c38800
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	200004d8 	.word	0x200004d8
 80019c0:	2000011e 	.word	0x2000011e
 80019c4:	20000120 	.word	0x20000120
 80019c8:	20000124 	.word	0x20000124
 80019cc:	20000128 	.word	0x20000128
 80019d0:	2000012a 	.word	0x2000012a
 80019d4:	2000011c 	.word	0x2000011c
 80019d8:	3fe00000 	.word	0x3fe00000
 80019dc:	00000000 	.word	0x00000000

080019e0 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2>:

void UltraSonic_Get_Distance_TIMER3_Ch1_ch2(float *Distance_CM_T3ch1 ,float *Distance_CM_T3ch2){
 80019e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	uint32_t TON_microSec1 = 0;
	uint32_t TON_microSec2 = 0;
	// Trigger the ultrasonic sensor by sending a pulse
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e4:	2200      	movs	r2, #0
void UltraSonic_Get_Distance_TIMER3_Ch1_ch2(float *Distance_CM_T3ch1 ,float *Distance_CM_T3ch2){
 80019e6:	4605      	mov	r5, r0
 80019e8:	460c      	mov	r4, r1
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ea:	482d      	ldr	r0, [pc, #180]	; (8001aa0 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xc0>)
 80019ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f0:	f002 f8a0 	bl	8003b34 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // Reset the timer counter
 80019f4:	2300      	movs	r3, #0
 80019f6:	4e2b      	ldr	r6, [pc, #172]	; (8001aa4 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xc4>)
 80019f8:	6832      	ldr	r2, [r6, #0]
 80019fa:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time); // Wait until the timer counter reaches the specified time
 80019fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d9fc      	bls.n	80019fc <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0x1c>
	delay(3); // Wait for a short duration
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a08:	4825      	ldr	r0, [pc, #148]	; (8001aa0 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xc0>)
 8001a0a:	f002 f893 	bl	8003b34 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0); // Reset the timer counter
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6832      	ldr	r2, [r6, #0]
 8001a12:	6253      	str	r3, [r2, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time); // Wait until the timer counter reaches the specified time
 8001a14:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a16:	2b09      	cmp	r3, #9
 8001a18:	d9fc      	bls.n	8001a14 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0x34>
	delay(10); // Keep the trigger pin high for the required duration
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Reset the trigger pin
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a20:	481f      	ldr	r0, [pc, #124]	; (8001aa0 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xc0>)
 8001a22:	f002 f887 	bl	8003b34 <HAL_GPIO_WritePin>
	if (State_T3 == 2)
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xc8>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	2a02      	cmp	r2, #2
 8001a2c:	d005      	beq.n	8001a3a <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0x5a>
 8001a2e:	2000      	movs	r0, #0
 8001a30:	4606      	mov	r6, r0

	ICU_VoidGet_TON_TIMER3_Ch1_ch2(&TON_microSec1,&TON_microSec2) ;

	// Calculate the distance in centimeters using the time-on period and the speed of sound
	*Distance_CM_T3ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001a32:	602e      	str	r6, [r5, #0]
	*Distance_CM_T3ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 8001a34:	6020      	str	r0, [r4, #0]
}
 8001a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*TON_microSec1 = TIMEON1_T3;
 8001a3a:	491c      	ldr	r1, [pc, #112]	; (8001aac <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xcc>)
		*TON_microSec2 = TIMEON2_T3;
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xd0>)
		*TON_microSec1 = TIMEON1_T3;
 8001a3e:	8808      	ldrh	r0, [r1, #0]
		*TON_microSec2 = TIMEON2_T3;
 8001a40:	8817      	ldrh	r7, [r2, #0]
		State_T3 = 0 ;
 8001a42:	2200      	movs	r2, #0
	*Distance_CM_T3ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001a44:	f240 1857 	movw	r8, #343	; 0x157
		State_T3 = 0 ;
 8001a48:	701a      	strb	r2, [r3, #0]
		IT_numbers_T3 = 0 ;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xd4>)
		*TON_microSec1 = TIMEON1_T3;
 8001a4c:	b280      	uxth	r0, r0
		IT_numbers_T3 = 0 ;
 8001a4e:	701a      	strb	r2, [r3, #0]
	*Distance_CM_T3ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001a50:	fb08 f000 	mul.w	r0, r8, r0
 8001a54:	f7fe fcbe 	bl	80003d4 <__aeabi_ui2d>
 8001a58:	a30f      	add	r3, pc, #60	; (adr r3, 8001a98 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xb8>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fe5d 	bl	800071c <__aeabi_ddiv>
 8001a62:	2200      	movs	r2, #0
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xd8>)
 8001a66:	f7fe fd2f 	bl	80004c8 <__aeabi_dmul>
 8001a6a:	f7fe ffdd 	bl	8000a28 <__aeabi_d2f>
		*TON_microSec2 = TIMEON2_T3;
 8001a6e:	b2bf      	uxth	r7, r7
	*Distance_CM_T3ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001a70:	4606      	mov	r6, r0
	*Distance_CM_T3ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 8001a72:	fb08 f007 	mul.w	r0, r8, r7
 8001a76:	f7fe fcad 	bl	80003d4 <__aeabi_ui2d>
 8001a7a:	a307      	add	r3, pc, #28	; (adr r3, 8001a98 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xb8>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fe4c 	bl	800071c <__aeabi_ddiv>
 8001a84:	2200      	movs	r2, #0
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2+0xd8>)
 8001a88:	f7fe fd1e 	bl	80004c8 <__aeabi_dmul>
 8001a8c:	f7fe ffcc 	bl	8000a28 <__aeabi_d2f>
	*Distance_CM_T3ch1 = (float)(((velocity * TON_microSec1) / 10000.0) / 2.0); // CENTIMETER
 8001a90:	602e      	str	r6, [r5, #0]
	*Distance_CM_T3ch2 = (float)(((velocity * TON_microSec2) / 10000.0) / 2.0); // CENTIMETER
 8001a92:	6020      	str	r0, [r4, #0]
}
 8001a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40c38800 	.word	0x40c38800
 8001aa0:	40010c00 	.word	0x40010c00
 8001aa4:	200004d8 	.word	0x200004d8
 8001aa8:	2000011f 	.word	0x2000011f
 8001aac:	20000122 	.word	0x20000122
 8001ab0:	20000126 	.word	0x20000126
 8001ab4:	2000011d 	.word	0x2000011d
 8001ab8:	3fe00000 	.word	0x3fe00000

08001abc <MX_ADC1_Init>:

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001abc:	2300      	movs	r3, #0
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001abe:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001ac2:	2201      	movs	r2, #1
{
 8001ac4:	b510      	push	{r4, lr}
  hadc1.Instance = ADC1;
 8001ac6:	4811      	ldr	r0, [pc, #68]	; (8001b0c <MX_ADC1_Init+0x50>)
 8001ac8:	4c11      	ldr	r4, [pc, #68]	; (8001b10 <MX_ADC1_Init+0x54>)
{
 8001aca:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8001acc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc1.Instance = ADC1;
 8001ad0:	6004      	str	r4, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ad2:	9301      	str	r3, [sp, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ad4:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad6:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad8:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ada:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001adc:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ade:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ae0:	f001 fd80 	bl	80035e4 <HAL_ADC_Init>
 8001ae4:	b958      	cbnz	r0, 8001afe <MX_ADC1_Init+0x42>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ae6:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ae8:	2200      	movs	r2, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_ADC1_Init+0x50>)
 8001aec:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aee:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001af2:	9203      	str	r2, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	f001 fc08 	bl	8003308 <HAL_ADC_ConfigChannel>
 8001af8:	b920      	cbnz	r0, 8001b04 <MX_ADC1_Init+0x48>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afa:	b004      	add	sp, #16
 8001afc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001afe:	f000 fd93 	bl	8002628 <Error_Handler>
 8001b02:	e7f0      	b.n	8001ae6 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8001b04:	f000 fd90 	bl	8002628 <Error_Handler>
}
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd10      	pop	{r4, pc}
 8001b0c:	2000012c 	.word	0x2000012c
 8001b10:	40012400 	.word	0x40012400

08001b14 <MX_ADC2_Init>:

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b14:	2300      	movs	r3, #0
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b16:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8001b1a:	2201      	movs	r2, #1
{
 8001b1c:	b510      	push	{r4, lr}
  hadc2.Instance = ADC2;
 8001b1e:	4811      	ldr	r0, [pc, #68]	; (8001b64 <MX_ADC2_Init+0x50>)
 8001b20:	4c11      	ldr	r4, [pc, #68]	; (8001b68 <MX_ADC2_Init+0x54>)
{
 8001b22:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b24:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc2.Instance = ADC2;
 8001b28:	6004      	str	r4, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2a:	9301      	str	r3, [sp, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b2c:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b2e:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b30:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b32:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b34:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001b36:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b38:	f001 fd54 	bl	80035e4 <HAL_ADC_Init>
 8001b3c:	b958      	cbnz	r0, 8001b56 <MX_ADC2_Init+0x42>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b3e:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b40:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <MX_ADC2_Init+0x50>)
 8001b44:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b46:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b4a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b4c:	f001 fbdc 	bl	8003308 <HAL_ADC_ConfigChannel>
 8001b50:	b920      	cbnz	r0, 8001b5c <MX_ADC2_Init+0x48>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b52:	b004      	add	sp, #16
 8001b54:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b56:	f000 fd67 	bl	8002628 <Error_Handler>
 8001b5a:	e7f0      	b.n	8001b3e <MX_ADC2_Init+0x2a>
    Error_Handler();
 8001b5c:	f000 fd64 	bl	8002628 <Error_Handler>
}
 8001b60:	b004      	add	sp, #16
 8001b62:	bd10      	pop	{r4, pc}
 8001b64:	2000015c 	.word	0x2000015c
 8001b68:	40012800 	.word	0x40012800

08001b6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	2300      	movs	r3, #0
{
 8001b6e:	b530      	push	{r4, r5, lr}
  if(adcHandle->Instance==ADC1)
 8001b70:	4925      	ldr	r1, [pc, #148]	; (8001c08 <HAL_ADC_MspInit+0x9c>)
 8001b72:	6802      	ldr	r2, [r0, #0]
{
 8001b74:	b089      	sub	sp, #36	; 0x24
  if(adcHandle->Instance==ADC1)
 8001b76:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001b7c:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8001b80:	d004      	beq.n	8001b8c <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_ADC_MspInit+0xa0>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d021      	beq.n	8001bcc <HAL_ADC_MspInit+0x60>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001b88:	b009      	add	sp, #36	; 0x24
 8001b8a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = LDR_Pin;
 8001b8c:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8e:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b94:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b98:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	481d      	ldr	r0, [pc, #116]	; (8001c10 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba0:	619a      	str	r2, [r3, #24]
 8001ba2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ba6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001baa:	9200      	str	r2, [sp, #0]
 8001bac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	f042 0204 	orr.w	r2, r2, #4
 8001bb4:	619a      	str	r2, [r3, #24]
 8001bb6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb8:	e9cd 5404 	strd	r5, r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f001 feb0 	bl	8003928 <HAL_GPIO_Init>
}
 8001bc8:	b009      	add	sp, #36	; 0x24
 8001bca:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = LM35_Pin;
 8001bcc:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bce:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bd0:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001bd4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8001be0:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001be2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001be6:	9202      	str	r2, [sp, #8]
 8001be8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	f042 0204 	orr.w	r2, r2, #4
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf4:	e9cd 5404 	strd	r5, r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	9303      	str	r3, [sp, #12]
 8001bfe:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f001 fe92 	bl	8003928 <HAL_GPIO_Init>
}
 8001c04:	b009      	add	sp, #36	; 0x24
 8001c06:	bd30      	pop	{r4, r5, pc}
 8001c08:	40012400 	.word	0x40012400
 8001c0c:	40012800 	.word	0x40012800
 8001c10:	40010800 	.word	0x40010800

08001c14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f004 f90e 	bl	8005e38 <osDelay>
  for(;;)
 8001c1c:	e7fb      	b.n	8001c16 <StartDefaultTask+0x2>
 8001c1e:	bf00      	nop

08001c20 <vApplicationGetIdleTaskMemory>:
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c20:	2380      	movs	r3, #128	; 0x80
{
 8001c22:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c24:	4d03      	ldr	r5, [pc, #12]	; (8001c34 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c26:	4c04      	ldr	r4, [pc, #16]	; (8001c38 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c28:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c2a:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bc30      	pop	{r4, r5}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000390 	.word	0x20000390
 8001c38:	20000190 	.word	0x20000190

08001c3c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001c3c:	b510      	push	{r4, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001c3e:	4c09      	ldr	r4, [pc, #36]	; (8001c64 <MX_FREERTOS_Init+0x28>)
void MX_FREERTOS_Init(void) {
 8001c40:	b088      	sub	sp, #32
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001c42:	f10d 0c04 	add.w	ip, sp, #4
 8001c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001c4c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c50:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c54:	2100      	movs	r1, #0
 8001c56:	a801      	add	r0, sp, #4
 8001c58:	f004 f8bc 	bl	8005dd4 <osThreadCreate>
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <MX_FREERTOS_Init+0x2c>)
 8001c5e:	6018      	str	r0, [r3, #0]
}
 8001c60:	b008      	add	sp, #32
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	080074b0 	.word	0x080074b0
 8001c68:	2000018c 	.word	0x2000018c

08001c6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001c72:	f44f 4140 	mov.w	r1, #49152	; 0xc000
{
 8001c76:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001c7c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <MX_GPIO_Init+0xf0>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c88:	f042 0210 	orr.w	r2, r2, #16
 8001c8c:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin;
 8001c8e:	4688      	mov	r8, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001c92:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8001d60 <MX_GPIO_Init+0xf4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	f002 0210 	and.w	r2, r2, #16
 8001c9a:	9200      	str	r2, [sp, #0]
 8001c9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|LED_Pin|MOTOR_FWD2_Pin, GPIO_PIN_RESET);
 8001ca0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001d64 <MX_GPIO_Init+0xf8>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LCD_4_Pin|MOTOR_FWD1_Pin|LCD_6_Pin|LCD_7_Pin
 8001cac:	4f2e      	ldr	r7, [pc, #184]	; (8001d68 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	f002 0220 	and.w	r2, r2, #32
 8001cb2:	9201      	str	r2, [sp, #4]
 8001cb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001cb8:	4650      	mov	r0, sl
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	f042 0204 	orr.w	r2, r2, #4
 8001cbe:	619a      	str	r2, [r3, #24]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	f002 0204 	and.w	r2, r2, #4
 8001cc6:	9202      	str	r2, [sp, #8]
 8001cc8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	f042 0208 	orr.w	r2, r2, #8
 8001cd0:	619a      	str	r2, [r3, #24]
 8001cd2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001cd4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001cde:	f001 ff29 	bl	8003b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|LED_Pin|MOTOR_FWD2_Pin, GPIO_PIN_RESET);
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	4648      	mov	r0, r9
 8001ce6:	f241 0130 	movw	r1, #4144	; 0x1030
 8001cea:	f001 ff23 	bl	8003b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_4_Pin|MOTOR_FWD1_Pin|LCD_6_Pin|LCD_7_Pin
 8001cee:	4622      	mov	r2, r4
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	f24f 013b 	movw	r1, #61499	; 0xf03b
 8001cf6:	f001 ff1d 	bl	8003b34 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	4650      	mov	r0, sl
 8001cfc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	e9cd 8604 	strd	r8, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f001 fe0f 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MOTOR_FWD2_Pin;
 8001d0a:	f241 0330 	movw	r3, #4144	; 0x1030
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	4648      	mov	r0, r9
 8001d10:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BUZZER_Pin|LED_Pin|MOTOR_FWD2_Pin;
 8001d12:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f001 fe05 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_4_Pin|MOTOR_FWD1_Pin|LCD_6_Pin|LCD_7_Pin
 8001d1e:	f243 033b 	movw	r3, #12347	; 0x303b
                          |MOTOR_Back1_Pin|MOTOR_Back2_Pin|LCD_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	4638      	mov	r0, r7
 8001d24:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LCD_4_Pin|MOTOR_FWD1_Pin|LCD_6_Pin|LCD_7_Pin
 8001d26:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	e9cd 6405 	strd	r6, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f001 fdfb 	bl	8003928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin;
 8001d32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	4638      	mov	r0, r7
 8001d38:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin;
 8001d3a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d3c:	e9cd 4505 	strd	r4, r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f001 fdf2 	bl	8003928 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	4638      	mov	r0, r7
 8001d46:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	e9cd 8604 	strd	r8, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	e9cd 5506 	strd	r5, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f001 fdea 	bl	8003928 <HAL_GPIO_Init>

}
 8001d54:	b008      	add	sp, #32
 8001d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40011000 	.word	0x40011000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00

08001d6c <MX_I2C1_Init>:
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d6c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
{
 8001d72:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8001d74:	4809      	ldr	r0, [pc, #36]	; (8001d9c <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 400000;
 8001d76:	4c0a      	ldr	r4, [pc, #40]	; (8001da0 <MX_I2C1_Init+0x34>)
 8001d78:	490a      	ldr	r1, [pc, #40]	; (8001da4 <MX_I2C1_Init+0x38>)
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001d7e:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d82:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d86:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d8a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d8c:	f002 f956 	bl	800403c <HAL_I2C_Init>
 8001d90:	b900      	cbnz	r0, 8001d94 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d92:	bd10      	pop	{r4, pc}
 8001d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001d98:	f000 bc46 	b.w	8002628 <Error_Handler>
 8001d9c:	200003e4 	.word	0x200003e4
 8001da0:	40005400 	.word	0x40005400
 8001da4:	00061a80 	.word	0x00061a80

08001da8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	2300      	movs	r3, #0
{
 8001daa:	b530      	push	{r4, r5, lr}
  if(i2cHandle->Instance==I2C1)
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_I2C_MspInit+0x68>)
 8001dae:	6801      	ldr	r1, [r0, #0]
{
 8001db0:	b087      	sub	sp, #28
  if(i2cHandle->Instance==I2C1)
 8001db2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001db8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(i2cHandle->Instance==I2C1)
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001dbe:	b007      	add	sp, #28
 8001dc0:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc2:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc6:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	4c12      	ldr	r4, [pc, #72]	; (8001e14 <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	69a3      	ldr	r3, [r4, #24]
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	61a3      	str	r3, [r4, #24]
 8001dd6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dd8:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f001 fd9e 	bl	8003928 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_I2C_MspInit+0x74>)
 8001dee:	6853      	ldr	r3, [r2, #4]
 8001df0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfa:	69e3      	ldr	r3, [r4, #28]
 8001dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e00:	61e3      	str	r3, [r4, #28]
 8001e02:	69e3      	ldr	r3, [r4, #28]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	9b01      	ldr	r3, [sp, #4]
}
 8001e0c:	b007      	add	sp, #28
 8001e0e:	bd30      	pop	{r4, r5, pc}
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40010c00 	.word	0x40010c00
 8001e1c:	40010000 	.word	0x40010000

08001e20 <Data_Acq_Task>:
  }
}

/* USER CODE BEGIN 4 */
void Data_Acq_Task		(void  * argument)
{
 8001e20:	b508      	push	{r3, lr}
 8001e22:	4c12      	ldr	r4, [pc, #72]	; (8001e6c <Data_Acq_Task+0x4c>)

		// Read light intensity from LDR sensor
		//DataAcquistion.LDR_Read = HAL_u8LDRRead();

		// Read IR sensor values for left and right directions
		LineDetector_voidRead(&(DataAcquistion.IR_Left), &(DataAcquistion.IR_Right));
 8001e24:	f104 061f 	add.w	r6, r4, #31

		// Read distances from ultrasonic sensors
		UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL(&(DataAcquistion.Distance_left_back), &(DataAcquistion.Distance_right_back), &(DataAcquistion.Distance_left_front), &(DataAcquistion.Distance_right_front));
 8001e28:	f104 0508 	add.w	r5, r4, #8
		DataAcquistion.temprature = LM35_fReadTemperature();
 8001e2c:	f7ff fb76 	bl	800151c <LM35_fReadTemperature>
 8001e30:	4603      	mov	r3, r0
		LineDetector_voidRead(&(DataAcquistion.IR_Left), &(DataAcquistion.IR_Right));
 8001e32:	4631      	mov	r1, r6
 8001e34:	480e      	ldr	r0, [pc, #56]	; (8001e70 <Data_Acq_Task+0x50>)
		DataAcquistion.temprature = LM35_fReadTemperature();
 8001e36:	61a3      	str	r3, [r4, #24]
		LineDetector_voidRead(&(DataAcquistion.IR_Left), &(DataAcquistion.IR_Right));
 8001e38:	f7ff fb5c 	bl	80014f4 <LineDetector_voidRead>
		UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL(&(DataAcquistion.Distance_left_back), &(DataAcquistion.Distance_right_back), &(DataAcquistion.Distance_left_front), &(DataAcquistion.Distance_right_front));
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <Data_Acq_Task+0x4c>)
 8001e3e:	462b      	mov	r3, r5
 8001e40:	f102 0110 	add.w	r1, r2, #16
 8001e44:	f102 000c 	add.w	r0, r2, #12
 8001e48:	f7ff fd22 	bl	8001890 <UltraSonic_Get_Distance_TIMER1_ALL_CHANNEL>
		vTaskDelay(200);
 8001e4c:	20c8      	movs	r0, #200	; 0xc8
 8001e4e:	f004 fc71 	bl	8006734 <vTaskDelay>
		UltraSonic_Get_Distance_TIMER3_Ch1_ch2(&(DataAcquistion.Distance_back), &(DataAcquistion.Distance_front));
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <Data_Acq_Task+0x54>)
 8001e54:	f101 0010 	add.w	r0, r1, #16
 8001e58:	f7ff fdc2 	bl	80019e0 <UltraSonic_Get_Distance_TIMER3_Ch1_ch2>

		MPU6050_Read_All(&hi2c1, &(DataAcquistion.Mpu6050));
 8001e5c:	4906      	ldr	r1, [pc, #24]	; (8001e78 <Data_Acq_Task+0x58>)
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <Data_Acq_Task+0x5c>)
 8001e60:	f000 fd1e 	bl	80028a0 <MPU6050_Read_All>


		vTaskDelay(200);
 8001e64:	20c8      	movs	r0, #200	; 0xc8
 8001e66:	f004 fc65 	bl	8006734 <vTaskDelay>
	while(1)
 8001e6a:	e7df      	b.n	8001e2c <Data_Acq_Task+0xc>
 8001e6c:	20000440 	.word	0x20000440
 8001e70:	2000045e 	.word	0x2000045e
 8001e74:	20000444 	.word	0x20000444
 8001e78:	20000460 	.word	0x20000460
 8001e7c:	200003e4 	.word	0x200003e4

08001e80 <Auto_Motion_Task>:
	}
}

void Auto_Motion_Task			(void  * argument)
{
 8001e80:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001e84:	4c54      	ldr	r4, [pc, #336]	; (8001fd8 <Auto_Motion_Task+0x158>)
				Duty = 50;
				LED_voidToggle(LED_Pin);
				BUZZER_voidToggle();
				//DC_voidMoveForward(Duty);
			}
			else if(DataAcquistion.Distance_front < 8.0)
 8001e86:	f04f 4b82 	mov.w	fp, #1090519040	; 0x41000000
 8001e8a:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001fdc <Auto_Motion_Task+0x15c>
 8001e8e:	4d54      	ldr	r5, [pc, #336]	; (8001fe0 <Auto_Motion_Task+0x160>)
 8001e90:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8001fe4 <Auto_Motion_Task+0x164>
		if(DataAcquistion.Distance_left_back <= 5 || DataAcquistion.Distance_right_back <= 5)
 8001e94:	4e54      	ldr	r6, [pc, #336]	; (8001fe8 <Auto_Motion_Task+0x168>)
			if(DataAcquistion.Distance_front <= 15.0 && DataAcquistion.Distance_front > 8.0)
 8001e96:	4f55      	ldr	r7, [pc, #340]	; (8001fec <Auto_Motion_Task+0x16c>)
{
 8001e98:	b083      	sub	sp, #12
 8001e9a:	e05c      	b.n	8001f56 <Auto_Motion_Task+0xd6>
			LED_voidTurnOn(LED_Pin);
 8001e9c:	2020      	movs	r0, #32
 8001e9e:	f7ff fb13 	bl	80014c8 <LED_voidTurnOn>
			BUZZER_voidTurnOn();
 8001ea2:	f7ff f8f5 	bl	8001090 <BUZZER_voidTurnOn>
		if (ACC_State)
 8001ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8001eaa:	b1eb      	cbz	r3, 8001ee8 <Auto_Motion_Task+0x68>
			if(DataAcquistion.Distance_front <= 15.0 && DataAcquistion.Distance_front > 8.0)
 8001eac:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8001eb0:	4639      	mov	r1, r7
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	f7ff f8be 	bl	8001034 <__aeabi_fcmple>
 8001eb8:	b128      	cbz	r0, 8001ec6 <Auto_Motion_Task+0x46>
 8001eba:	4659      	mov	r1, fp
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	f7ff f8cd 	bl	800105c <__aeabi_fcmpgt>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d171      	bne.n	8001faa <Auto_Motion_Task+0x12a>
			else if(DataAcquistion.Distance_front < 8.0)
 8001ec6:	4640      	mov	r0, r8
 8001ec8:	4659      	mov	r1, fp
 8001eca:	f7ff f8a9 	bl	8001020 <__aeabi_fcmplt>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d161      	bne.n	8001f96 <Auto_Motion_Task+0x116>
				BUZZER_voidToggle();
				//DC_voidMoveForward(Duty);
			}
			else
			{
				Duty=65;
 8001ed2:	f04f 0341 	mov.w	r3, #65	; 0x41
 8001ed6:	702b      	strb	r3, [r5, #0]
				if (Duty > MOTOR_MAX_SPEED)
 8001ed8:	782b      	ldrb	r3, [r5, #0]
 8001eda:	2b64      	cmp	r3, #100	; 0x64
				{
					Duty = MOTOR_MAX_SPEED;
 8001edc:	bf84      	itt	hi
 8001ede:	2364      	movhi	r3, #100	; 0x64
 8001ee0:	702b      	strbhi	r3, [r5, #0]
				}
			}
			DC_voidMoveForward(Duty);
 8001ee2:	7828      	ldrb	r0, [r5, #0]
 8001ee4:	f7ff f8f0 	bl	80010c8 <DC_voidMoveForward>
		}

		//Obstacle Avoiding
		if(OBD_State)
 8001ee8:	f899 3000 	ldrb.w	r3, [r9]
 8001eec:	b333      	cbz	r3, 8001f3c <Auto_Motion_Task+0xbc>
		{
			if (DataAcquistion.Distance_front <= 15)
 8001eee:	4639      	mov	r1, r7
 8001ef0:	6860      	ldr	r0, [r4, #4]
 8001ef2:	f7ff f89f 	bl	8001034 <__aeabi_fcmple>
 8001ef6:	b308      	cbz	r0, 8001f3c <Auto_Motion_Task+0xbc>
			{
				if (DataAcquistion.Distance_right_front > DataAcquistion.Distance_left_front && DataAcquistion.Distance_right_front > 30)
 8001ef8:	68a3      	ldr	r3, [r4, #8]
 8001efa:	f8d4 8000 	ldr.w	r8, [r4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	4641      	mov	r1, r8
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f7ff f8aa 	bl	800105c <__aeabi_fcmpgt>
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	b130      	cbz	r0, 8001f1a <Auto_Motion_Task+0x9a>
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	4938      	ldr	r1, [pc, #224]	; (8001ff0 <Auto_Motion_Task+0x170>)
 8001f10:	f7ff f8a4 	bl	800105c <__aeabi_fcmpgt>
 8001f14:	9b01      	ldr	r3, [sp, #4]
 8001f16:	2800      	cmp	r0, #0
 8001f18:	d156      	bne.n	8001fc8 <Auto_Motion_Task+0x148>
				{
					DC_voidMoveForwardRight (Duty);
					Car_Direction = 1;
				}
				else if (DataAcquistion.Distance_right_front < DataAcquistion.Distance_left_front && DataAcquistion.Distance_left_front > 30)
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4641      	mov	r1, r8
 8001f1e:	f7ff f87f 	bl	8001020 <__aeabi_fcmplt>
 8001f22:	b128      	cbz	r0, 8001f30 <Auto_Motion_Task+0xb0>
 8001f24:	4640      	mov	r0, r8
 8001f26:	4932      	ldr	r1, [pc, #200]	; (8001ff0 <Auto_Motion_Task+0x170>)
 8001f28:	f7ff f898 	bl	800105c <__aeabi_fcmpgt>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d144      	bne.n	8001fba <Auto_Motion_Task+0x13a>
					DC_voidMoveForwardLeft (Duty);
					Car_Direction = 2;
				}
				else
				{
					DC_voidMoveBackward(Duty);
 8001f30:	7828      	ldrb	r0, [r5, #0]
 8001f32:	f7ff f927 	bl	8001184 <DC_voidMoveBackward>
					Car_State = MOTOR_BACK;
 8001f36:	2301      	movs	r3, #1
 8001f38:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <Auto_Motion_Task+0x174>)
 8001f3a:	7013      	strb	r3, [r2, #0]
				}
			}
		}

		if(LKA_State)
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <Auto_Motion_Task+0x178>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b133      	cbz	r3, 8001f50 <Auto_Motion_Task+0xd0>
		{
			if(!DataAcquistion.IR_Left)
 8001f42:	7fa3      	ldrb	r3, [r4, #30]
 8001f44:	b303      	cbz	r3, 8001f88 <Auto_Motion_Task+0x108>
			{
				DC_voidMoveForwardRight(Duty);
				Car_Direction = 1;
			}
			if(!DataAcquistion.IR_Right)
 8001f46:	7fe3      	ldrb	r3, [r4, #31]
 8001f48:	b1bb      	cbz	r3, 8001f7a <Auto_Motion_Task+0xfa>
			{
				DC_voidMoveForwardLeft(Duty);
				Car_Direction = 2;
			}
			DC_voidMoveForward(Duty);
 8001f4a:	7828      	ldrb	r0, [r5, #0]
 8001f4c:	f7ff f8bc 	bl	80010c8 <DC_voidMoveForward>
			else
			{
				// If no parking spots are available on either side, handle error or take appropriate action
			}
		}*/
		vTaskDelay(200);
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f004 fbef 	bl	8006734 <vTaskDelay>
		if(DataAcquistion.Distance_left_back <= 5 || DataAcquistion.Distance_right_back <= 5)
 8001f56:	4631      	mov	r1, r6
 8001f58:	68e0      	ldr	r0, [r4, #12]
 8001f5a:	f7ff f86b 	bl	8001034 <__aeabi_fcmple>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d19c      	bne.n	8001e9c <Auto_Motion_Task+0x1c>
 8001f62:	4631      	mov	r1, r6
 8001f64:	6920      	ldr	r0, [r4, #16]
 8001f66:	f7ff f865 	bl	8001034 <__aeabi_fcmple>
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d196      	bne.n	8001e9c <Auto_Motion_Task+0x1c>
			LED_voidTurnOff(LED_Pin);
 8001f6e:	2020      	movs	r0, #32
 8001f70:	f7ff fab2 	bl	80014d8 <LED_voidTurnOff>
			BUZZER_voidTurnOff();
 8001f74:	f7ff f894 	bl	80010a0 <BUZZER_voidTurnOff>
 8001f78:	e795      	b.n	8001ea6 <Auto_Motion_Task+0x26>
				DC_voidMoveForwardLeft(Duty);
 8001f7a:	7828      	ldrb	r0, [r5, #0]
 8001f7c:	f7ff f8de 	bl	800113c <DC_voidMoveForwardLeft>
				Car_Direction = 2;
 8001f80:	2302      	movs	r3, #2
 8001f82:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <Auto_Motion_Task+0x17c>)
 8001f84:	7013      	strb	r3, [r2, #0]
 8001f86:	e7e0      	b.n	8001f4a <Auto_Motion_Task+0xca>
				DC_voidMoveForwardRight(Duty);
 8001f88:	7828      	ldrb	r0, [r5, #0]
 8001f8a:	f7ff f8b3 	bl	80010f4 <DC_voidMoveForwardRight>
				Car_Direction = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <Auto_Motion_Task+0x17c>)
 8001f92:	7013      	strb	r3, [r2, #0]
 8001f94:	e7d7      	b.n	8001f46 <Auto_Motion_Task+0xc6>
				Duty = MOTOR_MIN_SPEED;
 8001f96:	2300      	movs	r3, #0
 8001f98:	702b      	strb	r3, [r5, #0]
				DC_voidStop();
 8001f9a:	f7ff f92d 	bl	80011f8 <DC_voidStop>
				LED_voidToggle(LED_Pin);
 8001f9e:	2020      	movs	r0, #32
 8001fa0:	f7ff faa2 	bl	80014e8 <LED_voidToggle>
				BUZZER_voidToggle();
 8001fa4:	f7ff f884 	bl	80010b0 <BUZZER_voidToggle>
 8001fa8:	e79b      	b.n	8001ee2 <Auto_Motion_Task+0x62>
				Duty = 50;
 8001faa:	2332      	movs	r3, #50	; 0x32
				LED_voidToggle(LED_Pin);
 8001fac:	2020      	movs	r0, #32
				Duty = 50;
 8001fae:	702b      	strb	r3, [r5, #0]
				LED_voidToggle(LED_Pin);
 8001fb0:	f7ff fa9a 	bl	80014e8 <LED_voidToggle>
				BUZZER_voidToggle();
 8001fb4:	f7ff f87c 	bl	80010b0 <BUZZER_voidToggle>
 8001fb8:	e793      	b.n	8001ee2 <Auto_Motion_Task+0x62>
					DC_voidMoveForwardLeft (Duty);
 8001fba:	7828      	ldrb	r0, [r5, #0]
 8001fbc:	f7ff f8be 	bl	800113c <DC_voidMoveForwardLeft>
					Car_Direction = 2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <Auto_Motion_Task+0x17c>)
 8001fc4:	7013      	strb	r3, [r2, #0]
 8001fc6:	e7b9      	b.n	8001f3c <Auto_Motion_Task+0xbc>
					DC_voidMoveForwardRight (Duty);
 8001fc8:	7828      	ldrb	r0, [r5, #0]
 8001fca:	f7ff f893 	bl	80010f4 <DC_voidMoveForwardRight>
					Car_Direction = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <Auto_Motion_Task+0x17c>)
 8001fd2:	7013      	strb	r3, [r2, #0]
 8001fd4:	e7b2      	b.n	8001f3c <Auto_Motion_Task+0xbc>
 8001fd6:	bf00      	nop
 8001fd8:	20000440 	.word	0x20000440
 8001fdc:	20000438 	.word	0x20000438
 8001fe0:	200004b8 	.word	0x200004b8
 8001fe4:	200004ce 	.word	0x200004ce
 8001fe8:	40a00000 	.word	0x40a00000
 8001fec:	41700000 	.word	0x41700000
 8001ff0:	41f00000 	.word	0x41f00000
 8001ff4:	2000043b 	.word	0x2000043b
 8001ff8:	200004cd 	.word	0x200004cd
 8001ffc:	2000043a 	.word	0x2000043a

08002000 <Display_Task>:
	}
}

void Display_Task     (void  * argument)
{
 8002000:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002004:	4d48      	ldr	r5, [pc, #288]	; (8002128 <Display_Task+0x128>)
 8002006:	4f49      	ldr	r7, [pc, #292]	; (800212c <Display_Task+0x12c>)
 8002008:	4c49      	ldr	r4, [pc, #292]	; (8002130 <Display_Task+0x130>)
 800200a:	4e4a      	ldr	r6, [pc, #296]	; (8002134 <Display_Task+0x134>)
 800200c:	f8df b128 	ldr.w	fp, [pc, #296]	; 8002138 <Display_Task+0x138>
				LCD_voidInit();
				u8LCDFlagInit = 1;
			}
			// Display ( Duty & ACC & AutoParkingState On LCD)
			LCD_voidSetCursor(0, 0);
			LCD_voidWriteString((uint8_t*)"Speed:");
 8002010:	f8df a128 	ldr.w	sl, [pc, #296]	; 800213c <Display_Task+0x13c>
				LCD_voidWriteNum(Duty);
				LCD_voidWriteString((uint8_t*)"%");
				u8DutyFlag = 2;
			}
			LCD_voidSetCursor(1, 9);
			LCD_voidWriteString((uint8_t*)"ACC:");
 8002014:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8002140 <Display_Task+0x140>
			else
			{
				LCD_voidWriteString((uint8_t*)"OFF");
			}
			LCD_voidSetCursor(0, 10);
			LCD_voidWriteString((uint8_t*)"AP:");
 8002018:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002144 <Display_Task+0x144>
{
 800201c:	b083      	sub	sp, #12
 800201e:	e03e      	b.n	800209e <Display_Task+0x9e>
				if(u8DutyFlag == 1)
 8002020:	7833      	ldrb	r3, [r6, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d071      	beq.n	800210a <Display_Task+0x10a>
				LCD_voidSetCursor(0, 6);
 8002026:	2106      	movs	r1, #6
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fa11 	bl	8001450 <LCD_voidSetCursor>
				LCD_voidWriteNum(Duty);
 800202e:	7820      	ldrb	r0, [r4, #0]
 8002030:	f7ff fa20 	bl	8001474 <LCD_voidWriteNum>
				LCD_voidWriteString((uint8_t*)"%");
 8002034:	4844      	ldr	r0, [pc, #272]	; (8002148 <Display_Task+0x148>)
 8002036:	f7ff fa11 	bl	800145c <LCD_voidWriteString>
				u8DutyFlag = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	7033      	strb	r3, [r6, #0]
			LCD_voidSetCursor(1, 9);
 800203e:	2109      	movs	r1, #9
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff fa05 	bl	8001450 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"ACC:");
 8002046:	4648      	mov	r0, r9
 8002048:	f7ff fa08 	bl	800145c <LCD_voidWriteString>
			if(ACC_State == 1)
 800204c:	f89b 3000 	ldrb.w	r3, [fp]
 8002050:	2b01      	cmp	r3, #1
				LCD_voidWriteString((uint8_t*)" ON");
 8002052:	bf0c      	ite	eq
 8002054:	483d      	ldreq	r0, [pc, #244]	; (800214c <Display_Task+0x14c>)
				LCD_voidWriteString((uint8_t*)"OFF");
 8002056:	483e      	ldrne	r0, [pc, #248]	; (8002150 <Display_Task+0x150>)
 8002058:	f7ff fa00 	bl	800145c <LCD_voidWriteString>
			LCD_voidSetCursor(0, 10);
 800205c:	210a      	movs	r1, #10
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff f9f6 	bl	8001450 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"AP:");
 8002064:	4640      	mov	r0, r8
 8002066:	f7ff f9f9 	bl	800145c <LCD_voidWriteString>
			if(AP_State == 1)
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <Display_Task+0x154>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
			{
				LCD_voidWriteString((uint8_t*)" ON");
 8002070:	bf0c      	ite	eq
 8002072:	4836      	ldreq	r0, [pc, #216]	; (800214c <Display_Task+0x14c>)
			}
			else
			{
				LCD_voidWriteString((uint8_t*)"OFF");
 8002074:	4836      	ldrne	r0, [pc, #216]	; (8002150 <Display_Task+0x150>)
 8002076:	f7ff f9f1 	bl	800145c <LCD_voidWriteString>
			}
			LCD_voidSetCursor(1, 0);
 800207a:	2100      	movs	r1, #0
 800207c:	2001      	movs	r0, #1
 800207e:	f7ff f9e7 	bl	8001450 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"OBD:");
 8002082:	4835      	ldr	r0, [pc, #212]	; (8002158 <Display_Task+0x158>)
 8002084:	f7ff f9ea 	bl	800145c <LCD_voidWriteString>
			if(OBD_State == 1)
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <Display_Task+0x15c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
			{
				LCD_voidWriteString((uint8_t*)" ON");
 800208e:	bf0c      	ite	eq
 8002090:	482e      	ldreq	r0, [pc, #184]	; (800214c <Display_Task+0x14c>)
			}
			else
			{
				LCD_voidWriteString((uint8_t*)"OFF");
 8002092:	482f      	ldrne	r0, [pc, #188]	; (8002150 <Display_Task+0x150>)
 8002094:	f7ff f9e2 	bl	800145c <LCD_voidWriteString>
			}

		}
		vTaskDelay(200);
 8002098:	20c8      	movs	r0, #200	; 0xc8
 800209a:	f004 fb4b 	bl	8006734 <vTaskDelay>
		if(Engine_State == 1)
 800209e:	782b      	ldrb	r3, [r5, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	d1f8      	bne.n	8002098 <Display_Task+0x98>
			if(u8LCDFlagInit == 0)
 80020a6:	783b      	ldrb	r3, [r7, #0]
 80020a8:	b34b      	cbz	r3, 80020fe <Display_Task+0xfe>
			LCD_voidSetCursor(0, 0);
 80020aa:	2100      	movs	r1, #0
 80020ac:	4608      	mov	r0, r1
 80020ae:	f7ff f9cf 	bl	8001450 <LCD_voidSetCursor>
			LCD_voidWriteString((uint8_t*)"Speed:");
 80020b2:	4650      	mov	r0, sl
 80020b4:	f7ff f9d2 	bl	800145c <LCD_voidWriteString>
			if(Duty == 0)
 80020b8:	7823      	ldrb	r3, [r4, #0]
 80020ba:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ae      	beq.n	8002020 <Display_Task+0x20>
			else if(Duty < 100 && Duty > 0)
 80020c2:	7823      	ldrb	r3, [r4, #0]
 80020c4:	2b63      	cmp	r3, #99	; 0x63
 80020c6:	d811      	bhi.n	80020ec <Display_Task+0xec>
 80020c8:	7823      	ldrb	r3, [r4, #0]
 80020ca:	b17b      	cbz	r3, 80020ec <Display_Task+0xec>
				if(u8DutyFlag == 2)
 80020cc:	7833      	ldrb	r3, [r6, #0]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d022      	beq.n	8002118 <Display_Task+0x118>
				LCD_voidSetCursor(0, 6);
 80020d2:	2106      	movs	r1, #6
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff f9bb 	bl	8001450 <LCD_voidSetCursor>
				LCD_voidWriteNum(Duty);
 80020da:	7820      	ldrb	r0, [r4, #0]
 80020dc:	f7ff f9ca 	bl	8001474 <LCD_voidWriteNum>
				LCD_voidWriteString((uint8_t*)"%");
 80020e0:	4819      	ldr	r0, [pc, #100]	; (8002148 <Display_Task+0x148>)
 80020e2:	f7ff f9bb 	bl	800145c <LCD_voidWriteString>
				u8DutyFlag = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	7033      	strb	r3, [r6, #0]
 80020ea:	e7a8      	b.n	800203e <Display_Task+0x3e>
				LCD_voidWriteNum(Duty);
 80020ec:	7820      	ldrb	r0, [r4, #0]
 80020ee:	f7ff f9c1 	bl	8001474 <LCD_voidWriteNum>
				LCD_voidWriteString((uint8_t*)"%");
 80020f2:	4815      	ldr	r0, [pc, #84]	; (8002148 <Display_Task+0x148>)
 80020f4:	f7ff f9b2 	bl	800145c <LCD_voidWriteString>
				u8DutyFlag = 2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	7033      	strb	r3, [r6, #0]
 80020fc:	e79f      	b.n	800203e <Display_Task+0x3e>
 80020fe:	9201      	str	r2, [sp, #4]
				LCD_voidInit();
 8002100:	f7ff f908 	bl	8001314 <LCD_voidInit>
				u8LCDFlagInit = 1;
 8002104:	9a01      	ldr	r2, [sp, #4]
 8002106:	703a      	strb	r2, [r7, #0]
 8002108:	e7cf      	b.n	80020aa <Display_Task+0xaa>
					LCD_voidSetCursor(0, 8);
 800210a:	2108      	movs	r1, #8
 800210c:	f7ff f9a0 	bl	8001450 <LCD_voidSetCursor>
					LCD_voidWriteString((uint8_t*)"  ");
 8002110:	4813      	ldr	r0, [pc, #76]	; (8002160 <Display_Task+0x160>)
 8002112:	f7ff f9a3 	bl	800145c <LCD_voidWriteString>
 8002116:	e786      	b.n	8002026 <Display_Task+0x26>
					LCD_voidSetCursor(0, 9);
 8002118:	2000      	movs	r0, #0
 800211a:	2109      	movs	r1, #9
 800211c:	f7ff f998 	bl	8001450 <LCD_voidSetCursor>
					LCD_voidWriteString((uint8_t*)" ");
 8002120:	4810      	ldr	r0, [pc, #64]	; (8002164 <Display_Task+0x164>)
 8002122:	f7ff f99b 	bl	800145c <LCD_voidWriteString>
 8002126:	e7d4      	b.n	80020d2 <Display_Task+0xd2>
 8002128:	200004cc 	.word	0x200004cc
 800212c:	200004d1 	.word	0x200004d1
 8002130:	200004b8 	.word	0x200004b8
 8002134:	200004d0 	.word	0x200004d0
 8002138:	20000438 	.word	0x20000438
 800213c:	080074d8 	.word	0x080074d8
 8002140:	080074ec 	.word	0x080074ec
 8002144:	080074fc 	.word	0x080074fc
 8002148:	080074e4 	.word	0x080074e4
 800214c:	080074f4 	.word	0x080074f4
 8002150:	080074f8 	.word	0x080074f8
 8002154:	20000439 	.word	0x20000439
 8002158:	08007500 	.word	0x08007500
 800215c:	200004ce 	.word	0x200004ce
 8002160:	080074e0 	.word	0x080074e0
 8002164:	080074e8 	.word	0x080074e8

08002168 <BLE_Read_Task>:
}

void BLE_Read_Task    (void  * argument)
{
	HAL_StatusTypeDef RetValue = HAL_ERROR;
	uint8_t BLE_Rer=0;
 8002168:	2300      	movs	r3, #0
{
 800216a:	b530      	push	{r4, r5, lr}
 800216c:	4c42      	ldr	r4, [pc, #264]	; (8002278 <BLE_Read_Task+0x110>)
 800216e:	b083      	sub	sp, #12
 8002170:	4d42      	ldr	r5, [pc, #264]	; (800227c <BLE_Read_Task+0x114>)
	uint8_t BLE_Rer=0;
 8002172:	f88d 3007 	strb.w	r3, [sp, #7]
	while(1)
	{
		RetValue =  BLU_voidReceivePolling  (&BLE_Rer, sizeof(BLE_Rer), 100);
 8002176:	2264      	movs	r2, #100	; 0x64
 8002178:	2101      	movs	r1, #1
 800217a:	f10d 0007 	add.w	r0, sp, #7
 800217e:	f7fe ff77 	bl	8001070 <BLU_voidReceivePolling>
		if(RetValue == HAL_OK)
 8002182:	b9a8      	cbnz	r0, 80021b0 <BLE_Read_Task+0x48>
		{
			switch(BLE_Rer)
 8002184:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002188:	3b41      	subs	r3, #65	; 0x41
 800218a:	2b14      	cmp	r3, #20
 800218c:	d810      	bhi.n	80021b0 <BLE_Read_Task+0x48>
 800218e:	e8df f003 	tbb	[pc, r3]
 8002192:	636b      	.short	0x636b
 8002194:	4b535b0f 	.word	0x4b535b0f
 8002198:	0f430f0f 	.word	0x0f430f0f
 800219c:	0f333b0f 	.word	0x0f333b0f
 80021a0:	1b0f232b 	.word	0x1b0f232b
 80021a4:	0f13      	.short	0x0f13
 80021a6:	0b          	.byte	0x0b
 80021a7:	00          	.byte	0x00
			{
			case 'U' :
				xEventGroupSetBits(EG_Action,EG_SPEED_UP);
 80021a8:	2104      	movs	r1, #4
 80021aa:	6820      	ldr	r0, [r4, #0]
 80021ac:	f003 fee4 	bl	8005f78 <xEventGroupSetBits>
		}
		else
		{

		}
		vTaskDelay(200);
 80021b0:	20c8      	movs	r0, #200	; 0xc8
 80021b2:	f004 fabf 	bl	8006734 <vTaskDelay>
		RetValue =  BLU_voidReceivePolling  (&BLE_Rer, sizeof(BLE_Rer), 100);
 80021b6:	e7de      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action,EG_ENGINE_START);
 80021b8:	2101      	movs	r1, #1
 80021ba:	6820      	ldr	r0, [r4, #0]
 80021bc:	f003 fedc 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 80021c0:	20c8      	movs	r0, #200	; 0xc8
 80021c2:	f004 fab7 	bl	8006734 <vTaskDelay>
	while(1)
 80021c6:	e7d6      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action,EG_CAR_RIGHT);
 80021c8:	2140      	movs	r1, #64	; 0x40
 80021ca:	6820      	ldr	r0, [r4, #0]
 80021cc:	f003 fed4 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 80021d0:	20c8      	movs	r0, #200	; 0xc8
 80021d2:	f004 faaf 	bl	8006734 <vTaskDelay>
	while(1)
 80021d6:	e7ce      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Autonomous,EG_STATE_AP);
 80021d8:	2104      	movs	r1, #4
 80021da:	6828      	ldr	r0, [r5, #0]
 80021dc:	f003 fecc 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 80021e0:	20c8      	movs	r0, #200	; 0xc8
 80021e2:	f004 faa7 	bl	8006734 <vTaskDelay>
	while(1)
 80021e6:	e7c6      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Autonomous,EG_STATE_OBD);
 80021e8:	2108      	movs	r1, #8
 80021ea:	6828      	ldr	r0, [r5, #0]
 80021ec:	f003 fec4 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 80021f0:	20c8      	movs	r0, #200	; 0xc8
 80021f2:	f004 fa9f 	bl	8006734 <vTaskDelay>
	while(1)
 80021f6:	e7be      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Autonomous,EG_STATE_Manual);
 80021f8:	2101      	movs	r1, #1
 80021fa:	6828      	ldr	r0, [r5, #0]
 80021fc:	f003 febc 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002200:	20c8      	movs	r0, #200	; 0xc8
 8002202:	f004 fa97 	bl	8006734 <vTaskDelay>
	while(1)
 8002206:	e7b6      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action,EG_CAR_LEFT);
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	f003 feb4 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002210:	20c8      	movs	r0, #200	; 0xc8
 8002212:	f004 fa8f 	bl	8006734 <vTaskDelay>
	while(1)
 8002216:	e7ae      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Autonomous,EG_STATE_LKA);
 8002218:	2110      	movs	r1, #16
 800221a:	6828      	ldr	r0, [r5, #0]
 800221c:	f003 feac 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002220:	20c8      	movs	r0, #200	; 0xc8
 8002222:	f004 fa87 	bl	8006734 <vTaskDelay>
	while(1)
 8002226:	e7a6      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action, EG_CAR_FWD);
 8002228:	2110      	movs	r1, #16
 800222a:	6820      	ldr	r0, [r4, #0]
 800222c:	f003 fea4 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002230:	20c8      	movs	r0, #200	; 0xc8
 8002232:	f004 fa7f 	bl	8006734 <vTaskDelay>
	while(1)
 8002236:	e79e      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action,EG_ENGINE_STOP);
 8002238:	2102      	movs	r1, #2
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	f003 fe9c 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002240:	20c8      	movs	r0, #200	; 0xc8
 8002242:	f004 fa77 	bl	8006734 <vTaskDelay>
	while(1)
 8002246:	e796      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action,EG_SPEED_DOWN);
 8002248:	2108      	movs	r1, #8
 800224a:	6820      	ldr	r0, [r4, #0]
 800224c:	f003 fe94 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002250:	20c8      	movs	r0, #200	; 0xc8
 8002252:	f004 fa6f 	bl	8006734 <vTaskDelay>
	while(1)
 8002256:	e78e      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Action,EG_CAR_BACK);
 8002258:	2120      	movs	r1, #32
 800225a:	6820      	ldr	r0, [r4, #0]
 800225c:	f003 fe8c 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002260:	20c8      	movs	r0, #200	; 0xc8
 8002262:	f004 fa67 	bl	8006734 <vTaskDelay>
	while(1)
 8002266:	e786      	b.n	8002176 <BLE_Read_Task+0xe>
				xEventGroupSetBits(EG_Autonomous,EG_STATE_ACC);
 8002268:	2102      	movs	r1, #2
 800226a:	6828      	ldr	r0, [r5, #0]
 800226c:	f003 fe84 	bl	8005f78 <xEventGroupSetBits>
		vTaskDelay(200);
 8002270:	20c8      	movs	r0, #200	; 0xc8
 8002272:	f004 fa5f 	bl	8006734 <vTaskDelay>
	while(1)
 8002276:	e77e      	b.n	8002176 <BLE_Read_Task+0xe>
 8002278:	200004bc 	.word	0x200004bc
 800227c:	200004c0 	.word	0x200004c0

08002280 <Autonomous_Task>:

void Autonomous_Task			(void  * argument)
{
	while(1)
	{
		EG_State = xEventGroupWaitBits(EG_Autonomous,
 8002280:	2400      	movs	r4, #0
 8002282:	2501      	movs	r5, #1
{
 8002284:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002288:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002324 <Autonomous_Task+0xa4>
 800228c:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002328 <Autonomous_Task+0xa8>
 8002290:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800232c <Autonomous_Task+0xac>
 8002294:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002330 <Autonomous_Task+0xb0>
 8002298:	4f26      	ldr	r7, [pc, #152]	; (8002334 <Autonomous_Task+0xb4>)
 800229a:	4e27      	ldr	r6, [pc, #156]	; (8002338 <Autonomous_Task+0xb8>)
 800229c:	b083      	sub	sp, #12
		EG_State = xEventGroupWaitBits(EG_Autonomous,
 800229e:	f04f 30ff 	mov.w	r0, #4294967295
 80022a2:	2300      	movs	r3, #0
 80022a4:	2201      	movs	r2, #1
 80022a6:	9000      	str	r0, [sp, #0]
 80022a8:	211f      	movs	r1, #31
 80022aa:	f8db 0000 	ldr.w	r0, [fp]
 80022ae:	f003 fdd9 	bl	8005e64 <xEventGroupWaitBits>
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <Autonomous_Task+0xbc>)
				(EG_STATE_Manual | EG_STATE_ACC | EG_STATE_AP | EG_STATE_OBD | EG_STATE_LKA) ,
				1, // Auto Clear
				0, // Or Between bits not wait for all of the events
				portMAX_DELAY);
		if(EG_State & EG_STATE_Manual)
 80022b4:	07c2      	lsls	r2, r0, #31
		EG_State = xEventGroupWaitBits(EG_Autonomous,
 80022b6:	6018      	str	r0, [r3, #0]
		if(EG_State & EG_STATE_Manual)
 80022b8:	d507      	bpl.n	80022ca <Autonomous_Task+0x4a>
		{
			User_Control = MANUAL_CONTROL;
 80022ba:	f88a 4000 	strb.w	r4, [sl]
			ACC_State = 0;
 80022be:	f889 4000 	strb.w	r4, [r9]
			AP_State = 0;
 80022c2:	f888 4000 	strb.w	r4, [r8]
			OBD_State = 0;
 80022c6:	703c      	strb	r4, [r7, #0]
			LKA_State = 0;
 80022c8:	7034      	strb	r4, [r6, #0]
		}
		if(EG_State & EG_STATE_ACC)
 80022ca:	0783      	lsls	r3, r0, #30
 80022cc:	d507      	bpl.n	80022de <Autonomous_Task+0x5e>
		{
			User_Control = AUTO_CONTROL;
 80022ce:	f88a 5000 	strb.w	r5, [sl]
			ACC_State = 1;
 80022d2:	f889 5000 	strb.w	r5, [r9]
			AP_State = 0;
 80022d6:	f888 4000 	strb.w	r4, [r8]
			OBD_State = 0;
 80022da:	703c      	strb	r4, [r7, #0]
			LKA_State = 0;
 80022dc:	7034      	strb	r4, [r6, #0]
			//ACC
		}
		if(EG_State & EG_STATE_AP)
 80022de:	0741      	lsls	r1, r0, #29
 80022e0:	d507      	bpl.n	80022f2 <Autonomous_Task+0x72>
		{
			User_Control = AUTO_CONTROL;
 80022e2:	f88a 5000 	strb.w	r5, [sl]
			AP_State = 1;
 80022e6:	f888 5000 	strb.w	r5, [r8]
			ACC_State = 0;
 80022ea:	f889 4000 	strb.w	r4, [r9]
			LKA_State = 0;
 80022ee:	7034      	strb	r4, [r6, #0]
			OBD_State = 0;
 80022f0:	703c      	strb	r4, [r7, #0]
			//Autoparking
		}
		if(EG_State & EG_STATE_OBD)
 80022f2:	0702      	lsls	r2, r0, #28
 80022f4:	d507      	bpl.n	8002306 <Autonomous_Task+0x86>
		{
			User_Control = AUTO_CONTROL;
 80022f6:	f88a 5000 	strb.w	r5, [sl]
			OBD_State = 1;
 80022fa:	703d      	strb	r5, [r7, #0]
			ACC_State = 0;
 80022fc:	f889 4000 	strb.w	r4, [r9]
			AP_State = 0 ;
 8002300:	f888 4000 	strb.w	r4, [r8]
			LKA_State = 0;
 8002304:	7034      	strb	r4, [r6, #0]
			//Obsticale avoidance

		}
		if(EG_State & EG_STATE_LKA)
 8002306:	06c3      	lsls	r3, r0, #27
 8002308:	d507      	bpl.n	800231a <Autonomous_Task+0x9a>
		{
			User_Control = AUTO_CONTROL;
 800230a:	f88a 5000 	strb.w	r5, [sl]
			LKA_State = 1;
 800230e:	7035      	strb	r5, [r6, #0]
			ACC_State = 0;
 8002310:	f889 4000 	strb.w	r4, [r9]
			AP_State = 0 ;
 8002314:	f888 4000 	strb.w	r4, [r8]
			OBD_State = 0;
 8002318:	703c      	strb	r4, [r7, #0]
			//Lane Keep Assistance
		}

		vTaskDelay(200);
 800231a:	20c8      	movs	r0, #200	; 0xc8
 800231c:	f004 fa0a 	bl	8006734 <vTaskDelay>
		EG_State = xEventGroupWaitBits(EG_Autonomous,
 8002320:	e7bd      	b.n	800229e <Autonomous_Task+0x1e>
 8002322:	bf00      	nop
 8002324:	200004cf 	.word	0x200004cf
 8002328:	200004c0 	.word	0x200004c0
 800232c:	20000438 	.word	0x20000438
 8002330:	20000439 	.word	0x20000439
 8002334:	200004ce 	.word	0x200004ce
 8002338:	200004cd 	.word	0x200004cd
 800233c:	200004c4 	.word	0x200004c4

08002340 <Action_Task>:
{
 8002340:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
		EG_Value = xEventGroupWaitBits(EG_Action,
 8002344:	f04f 38ff 	mov.w	r8, #4294967295
 8002348:	f04f 0b00 	mov.w	fp, #0
 800234c:	f04f 0a01 	mov.w	sl, #1
 8002350:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8002498 <Action_Task+0x158>
 8002354:	4c51      	ldr	r4, [pc, #324]	; (800249c <Action_Task+0x15c>)
 8002356:	4d52      	ldr	r5, [pc, #328]	; (80024a0 <Action_Task+0x160>)
 8002358:	4e52      	ldr	r6, [pc, #328]	; (80024a4 <Action_Task+0x164>)
 800235a:	4f53      	ldr	r7, [pc, #332]	; (80024a8 <Action_Task+0x168>)
{
 800235c:	b083      	sub	sp, #12
 800235e:	e01c      	b.n	800239a <Action_Task+0x5a>
		if(EG_Value & EG_ENGINE_STOP)
 8002360:	0783      	lsls	r3, r0, #30
 8002362:	d432      	bmi.n	80023ca <Action_Task+0x8a>
		if(EG_Value & EG_CAR_FWD)
 8002364:	06c1      	lsls	r1, r0, #27
 8002366:	d439      	bmi.n	80023dc <Action_Task+0x9c>
		if(EG_Value & EG_CAR_BACK)
 8002368:	0682      	lsls	r2, r0, #26
 800236a:	d43f      	bmi.n	80023ec <Action_Task+0xac>
		if(EG_Value & EG_CAR_RIGHT)
 800236c:	0643      	lsls	r3, r0, #25
 800236e:	d447      	bmi.n	8002400 <Action_Task+0xc0>
		if(EG_Value & EG_CAR_LEFT)
 8002370:	0601      	lsls	r1, r0, #24
 8002372:	d450      	bmi.n	8002416 <Action_Task+0xd6>
		if(EG_Value & EG_SPEED_UP)
 8002374:	0742      	lsls	r2, r0, #29
 8002376:	d505      	bpl.n	8002384 <Action_Task+0x44>
			if(ENGINE_ON == Engine_State  && Car_State == MOTOR_FWD)
 8002378:	7833      	ldrb	r3, [r6, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d06a      	beq.n	8002454 <Action_Task+0x114>
			else if(ENGINE_ON == Engine_State && Car_State == MOTOR_BACK)
 800237e:	7833      	ldrb	r3, [r6, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d078      	beq.n	8002476 <Action_Task+0x136>
		if(EG_Value & EG_SPEED_DOWN)
 8002384:	0703      	lsls	r3, r0, #28
 8002386:	d505      	bpl.n	8002394 <Action_Task+0x54>
			if(ENGINE_ON == Engine_State  && Car_State == MOTOR_FWD)
 8002388:	7833      	ldrb	r3, [r6, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d04a      	beq.n	8002424 <Action_Task+0xe4>
			else if(ENGINE_ON == Engine_State && Car_State == MOTOR_BACK)
 800238e:	7833      	ldrb	r3, [r6, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d053      	beq.n	800243c <Action_Task+0xfc>
		vTaskDelay(200);
 8002394:	20c8      	movs	r0, #200	; 0xc8
 8002396:	f004 f9cd 	bl	8006734 <vTaskDelay>
		EG_Value = xEventGroupWaitBits(EG_Action,
 800239a:	2201      	movs	r2, #1
 800239c:	2300      	movs	r3, #0
 800239e:	21ff      	movs	r1, #255	; 0xff
 80023a0:	f8d9 0000 	ldr.w	r0, [r9]
 80023a4:	f8cd 8000 	str.w	r8, [sp]
 80023a8:	f003 fd5c 	bl	8005e64 <xEventGroupWaitBits>
		if(EG_Value & EG_ENGINE_START)
 80023ac:	07c2      	lsls	r2, r0, #31
		EG_Value = xEventGroupWaitBits(EG_Action,
 80023ae:	6020      	str	r0, [r4, #0]
		if(EG_Value & EG_ENGINE_START)
 80023b0:	d5d6      	bpl.n	8002360 <Action_Task+0x20>
			Duty = 20;
 80023b2:	2314      	movs	r3, #20
 80023b4:	702b      	strb	r3, [r5, #0]
			DC_voidInit();
 80023b6:	f7fe fe81 	bl	80010bc <DC_voidInit>
			DC_voidMoveForward(Duty);
 80023ba:	7828      	ldrb	r0, [r5, #0]
 80023bc:	f7fe fe84 	bl	80010c8 <DC_voidMoveForward>
		if(EG_Value & EG_ENGINE_STOP)
 80023c0:	6820      	ldr	r0, [r4, #0]
			Engine_State = ENGINE_ON;
 80023c2:	f886 a000 	strb.w	sl, [r6]
		if(EG_Value & EG_ENGINE_STOP)
 80023c6:	0783      	lsls	r3, r0, #30
 80023c8:	d5cc      	bpl.n	8002364 <Action_Task+0x24>
			Duty =0;
 80023ca:	f885 b000 	strb.w	fp, [r5]
			DC_voidStop();
 80023ce:	f7fe ff13 	bl	80011f8 <DC_voidStop>
		if(EG_Value & EG_CAR_FWD)
 80023d2:	6820      	ldr	r0, [r4, #0]
			Engine_State = ENGINE_OFF;
 80023d4:	f886 b000 	strb.w	fp, [r6]
		if(EG_Value & EG_CAR_FWD)
 80023d8:	06c1      	lsls	r1, r0, #27
 80023da:	d5c5      	bpl.n	8002368 <Action_Task+0x28>
			DC_voidMoveForward(Duty);
 80023dc:	7828      	ldrb	r0, [r5, #0]
 80023de:	f7fe fe73 	bl	80010c8 <DC_voidMoveForward>
		if(EG_Value & EG_CAR_BACK)
 80023e2:	6820      	ldr	r0, [r4, #0]
			Car_State = MOTOR_FWD;
 80023e4:	f887 b000 	strb.w	fp, [r7]
		if(EG_Value & EG_CAR_BACK)
 80023e8:	0682      	lsls	r2, r0, #26
 80023ea:	d5bf      	bpl.n	800236c <Action_Task+0x2c>
			DC_voidMoveBackward(Duty);
 80023ec:	7828      	ldrb	r0, [r5, #0]
 80023ee:	f7fe fec9 	bl	8001184 <DC_voidMoveBackward>
			Car_State = MOTOR_BACK;
 80023f2:	f887 a000 	strb.w	sl, [r7]
			DC_voidTurnLeft();
 80023f6:	f7fe feed 	bl	80011d4 <DC_voidTurnLeft>
		if(EG_Value & EG_CAR_RIGHT)
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	0643      	lsls	r3, r0, #25
 80023fe:	d5b7      	bpl.n	8002370 <Action_Task+0x30>
			DC_voidTurnRight();
 8002400:	f7fe fed6 	bl	80011b0 <DC_voidTurnRight>
			vTaskDelay(100);
 8002404:	2064      	movs	r0, #100	; 0x64
 8002406:	f004 f995 	bl	8006734 <vTaskDelay>
		if(EG_Value & EG_CAR_LEFT)
 800240a:	6820      	ldr	r0, [r4, #0]
			Car_Direction = 1;
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <Action_Task+0x16c>)
		if(EG_Value & EG_CAR_LEFT)
 800240e:	0601      	lsls	r1, r0, #24
			Car_Direction = 1;
 8002410:	f883 a000 	strb.w	sl, [r3]
		if(EG_Value & EG_CAR_LEFT)
 8002414:	d5ae      	bpl.n	8002374 <Action_Task+0x34>
			DC_voidTurnLeft();
 8002416:	f7fe fedd 	bl	80011d4 <DC_voidTurnLeft>
			Car_Direction = 2;
 800241a:	2302      	movs	r3, #2
 800241c:	4a23      	ldr	r2, [pc, #140]	; (80024ac <Action_Task+0x16c>)
		if(EG_Value & EG_SPEED_UP)
 800241e:	6820      	ldr	r0, [r4, #0]
			Car_Direction = 2;
 8002420:	7013      	strb	r3, [r2, #0]
 8002422:	e7a7      	b.n	8002374 <Action_Task+0x34>
			if(ENGINE_ON == Engine_State  && Car_State == MOTOR_FWD)
 8002424:	783b      	ldrb	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1b1      	bne.n	800238e <Action_Task+0x4e>
				Duty-=10;
 800242a:	782b      	ldrb	r3, [r5, #0]
 800242c:	3b0a      	subs	r3, #10
 800242e:	b2db      	uxtb	r3, r3
 8002430:	702b      	strb	r3, [r5, #0]
				if(MOTOR_MIN_SPEED > Duty)
 8002432:	782b      	ldrb	r3, [r5, #0]
					DC_voidMoveForward(Duty);
 8002434:	7828      	ldrb	r0, [r5, #0]
 8002436:	f7fe fe47 	bl	80010c8 <DC_voidMoveForward>
 800243a:	e7ab      	b.n	8002394 <Action_Task+0x54>
			else if(ENGINE_ON == Engine_State && Car_State == MOTOR_BACK)
 800243c:	783b      	ldrb	r3, [r7, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d1a8      	bne.n	8002394 <Action_Task+0x54>
				Duty-=10;
 8002442:	782b      	ldrb	r3, [r5, #0]
 8002444:	3b0a      	subs	r3, #10
 8002446:	b2db      	uxtb	r3, r3
 8002448:	702b      	strb	r3, [r5, #0]
				if(MOTOR_MIN_SPEED > Duty)
 800244a:	782b      	ldrb	r3, [r5, #0]
					DC_voidMoveBackward(Duty);
 800244c:	7828      	ldrb	r0, [r5, #0]
 800244e:	f7fe fe99 	bl	8001184 <DC_voidMoveBackward>
 8002452:	e79f      	b.n	8002394 <Action_Task+0x54>
			if(ENGINE_ON == Engine_State  && Car_State == MOTOR_FWD)
 8002454:	783b      	ldrb	r3, [r7, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d191      	bne.n	800237e <Action_Task+0x3e>
				Duty+=10;
 800245a:	782b      	ldrb	r3, [r5, #0]
 800245c:	330a      	adds	r3, #10
 800245e:	b2db      	uxtb	r3, r3
 8002460:	702b      	strb	r3, [r5, #0]
				if(MOTOR_MAX_SPEED < Duty)
 8002462:	782b      	ldrb	r3, [r5, #0]
 8002464:	2b64      	cmp	r3, #100	; 0x64
					Duty=MOTOR_MAX_SPEED;
 8002466:	bf84      	itt	hi
 8002468:	2364      	movhi	r3, #100	; 0x64
 800246a:	702b      	strbhi	r3, [r5, #0]
					DC_voidMoveForward(Duty);
 800246c:	7828      	ldrb	r0, [r5, #0]
 800246e:	f7fe fe2b 	bl	80010c8 <DC_voidMoveForward>
		if(EG_Value & EG_SPEED_DOWN)
 8002472:	6820      	ldr	r0, [r4, #0]
 8002474:	e786      	b.n	8002384 <Action_Task+0x44>
			else if(ENGINE_ON == Engine_State && Car_State == MOTOR_BACK)
 8002476:	783b      	ldrb	r3, [r7, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d183      	bne.n	8002384 <Action_Task+0x44>
				Duty+=10;
 800247c:	782b      	ldrb	r3, [r5, #0]
 800247e:	330a      	adds	r3, #10
 8002480:	b2db      	uxtb	r3, r3
 8002482:	702b      	strb	r3, [r5, #0]
				if(MOTOR_MAX_SPEED < Duty)
 8002484:	782b      	ldrb	r3, [r5, #0]
 8002486:	2b64      	cmp	r3, #100	; 0x64
					Duty=MOTOR_MAX_SPEED;
 8002488:	bf84      	itt	hi
 800248a:	2364      	movhi	r3, #100	; 0x64
 800248c:	702b      	strbhi	r3, [r5, #0]
					DC_voidMoveBackward(Duty);
 800248e:	7828      	ldrb	r0, [r5, #0]
 8002490:	f7fe fe78 	bl	8001184 <DC_voidMoveBackward>
		if(EG_Value & EG_SPEED_DOWN)
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	e775      	b.n	8002384 <Action_Task+0x44>
 8002498:	200004bc 	.word	0x200004bc
 800249c:	200004c8 	.word	0x200004c8
 80024a0:	200004b8 	.word	0x200004b8
 80024a4:	200004cc 	.word	0x200004cc
 80024a8:	2000043b 	.word	0x2000043b
 80024ac:	2000043a 	.word	0x2000043a

080024b0 <SystemClock_Config>:
{
 80024b0:	b510      	push	{r4, lr}
 80024b2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b4:	2220      	movs	r2, #32
 80024b6:	2100      	movs	r1, #0
 80024b8:	a80b      	add	r0, sp, #44	; 0x2c
 80024ba:	f004 fc5d 	bl	8006d78 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024be:	2001      	movs	r0, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c0:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c4:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024c6:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ca:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024cc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ce:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80024d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024da:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024dc:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024de:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024e0:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80024e4:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e8:	f002 f86c 	bl	80045c4 <HAL_RCC_OscConfig>
 80024ec:	b108      	cbz	r0, 80024f2 <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024f0:	e7fe      	b.n	80024f0 <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f2:	4603      	mov	r3, r0
 80024f4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024fa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002500:	4621      	mov	r1, r4
 8002502:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002504:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002506:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002508:	f002 fa74 	bl	80049f4 <HAL_RCC_ClockConfig>
 800250c:	b108      	cbz	r0, 8002512 <SystemClock_Config+0x62>
 800250e:	b672      	cpsid	i
	while (1)
 8002510:	e7fe      	b.n	8002510 <SystemClock_Config+0x60>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002516:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002518:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800251a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800251c:	f002 fb2a 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8002520:	b108      	cbz	r0, 8002526 <SystemClock_Config+0x76>
 8002522:	b672      	cpsid	i
	while (1)
 8002524:	e7fe      	b.n	8002524 <SystemClock_Config+0x74>
}
 8002526:	b014      	add	sp, #80	; 0x50
 8002528:	bd10      	pop	{r4, pc}
 800252a:	bf00      	nop

0800252c <main>:
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
  HAL_Init();
 8002530:	f000 fe10 	bl	8003154 <HAL_Init>
  SystemClock_Config();
 8002534:	f7ff ffbc 	bl	80024b0 <SystemClock_Config>
  MX_GPIO_Init();
 8002538:	f7ff fb98 	bl	8001c6c <MX_GPIO_Init>
  MX_ADC1_Init();
 800253c:	f7ff fabe 	bl	8001abc <MX_ADC1_Init>
  MX_I2C1_Init();
 8002540:	f7ff fc14 	bl	8001d6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002544:	f000 fb42 	bl	8002bcc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002548:	f000 fcb2 	bl	8002eb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800254c:	f000 fbae 	bl	8002cac <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002550:	f000 fd22 	bl	8002f98 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8002554:	f7ff fade 	bl	8001b14 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8002558:	f000 fd02 	bl	8002f60 <MX_USART1_UART_Init>
  EG_Action = xEventGroupCreate();
 800255c:	f003 fc74 	bl	8005e48 <xEventGroupCreate>
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <main+0xd8>)
  xTaskCreate(BLE_Read_Task, NULL, 100 , NULL , 1 , NULL);
 8002562:	2400      	movs	r4, #0
  EG_Action = xEventGroupCreate();
 8002564:	6018      	str	r0, [r3, #0]
  EG_Autonomous = xEventGroupCreate();
 8002566:	f003 fc6f 	bl	8005e48 <xEventGroupCreate>
 800256a:	4606      	mov	r6, r0
 800256c:	f8df e098 	ldr.w	lr, [pc, #152]	; 8002608 <main+0xdc>
  xTaskCreate(BLE_Read_Task, NULL, 100 , NULL , 1 , NULL);
 8002570:	2701      	movs	r7, #1
 8002572:	9401      	str	r4, [sp, #4]
  EG_Autonomous = xEventGroupCreate();
 8002574:	f8ce 6000 	str.w	r6, [lr]
  xTaskCreate(Autonomous_Task, NULL, 50 , NULL , 4 , NULL);
 8002578:	2604      	movs	r6, #4
  xTaskCreate(BLE_Read_Task, NULL, 100 , NULL , 1 , NULL);
 800257a:	4623      	mov	r3, r4
 800257c:	2264      	movs	r2, #100	; 0x64
 800257e:	4621      	mov	r1, r4
 8002580:	4822      	ldr	r0, [pc, #136]	; (800260c <main+0xe0>)
 8002582:	9700      	str	r7, [sp, #0]
 8002584:	f003 ff1c 	bl	80063c0 <xTaskCreate>
  xTaskCreate(Autonomous_Task, NULL, 50 , NULL , 4 , NULL);
 8002588:	9600      	str	r6, [sp, #0]
  xTaskCreate(Auto_Motion_Task, NULL, 50, NULL, 5, NULL);
 800258a:	2605      	movs	r6, #5
  xTaskCreate(Autonomous_Task, NULL, 50 , NULL , 4 , NULL);
 800258c:	4623      	mov	r3, r4
 800258e:	2232      	movs	r2, #50	; 0x32
 8002590:	4621      	mov	r1, r4
 8002592:	481f      	ldr	r0, [pc, #124]	; (8002610 <main+0xe4>)
 8002594:	9401      	str	r4, [sp, #4]
 8002596:	f003 ff13 	bl	80063c0 <xTaskCreate>
  xTaskCreate(Auto_Motion_Task, NULL, 50, NULL, 5, NULL);
 800259a:	9600      	str	r6, [sp, #0]
  xTaskCreate(Action_Task, NULL, 100 , NULL , 3 , NULL);
 800259c:	2603      	movs	r6, #3
  xTaskCreate(Auto_Motion_Task, NULL, 50, NULL, 5, NULL);
 800259e:	4623      	mov	r3, r4
 80025a0:	2232      	movs	r2, #50	; 0x32
 80025a2:	4621      	mov	r1, r4
 80025a4:	481b      	ldr	r0, [pc, #108]	; (8002614 <main+0xe8>)
 80025a6:	9401      	str	r4, [sp, #4]
 80025a8:	f003 ff0a 	bl	80063c0 <xTaskCreate>
  xTaskCreate(Action_Task, NULL, 100 , NULL , 3 , NULL);
 80025ac:	9600      	str	r6, [sp, #0]
  xTaskCreate(Display_Task, NULL, 50 , NULL , 2 , NULL);
 80025ae:	2602      	movs	r6, #2
  xTaskCreate(Action_Task, NULL, 100 , NULL , 3 , NULL);
 80025b0:	4623      	mov	r3, r4
 80025b2:	2264      	movs	r2, #100	; 0x64
 80025b4:	4621      	mov	r1, r4
 80025b6:	4818      	ldr	r0, [pc, #96]	; (8002618 <main+0xec>)
 80025b8:	9401      	str	r4, [sp, #4]
 80025ba:	f003 ff01 	bl	80063c0 <xTaskCreate>
  xTaskCreate(Display_Task, NULL, 50 , NULL , 2 , NULL);
 80025be:	9600      	str	r6, [sp, #0]
  xTaskCreate(Data_Acq_Task, NULL, 100 , NULL , 6 , NULL);
 80025c0:	2606      	movs	r6, #6
  xTaskCreate(Display_Task, NULL, 50 , NULL , 2 , NULL);
 80025c2:	4623      	mov	r3, r4
 80025c4:	2232      	movs	r2, #50	; 0x32
 80025c6:	4621      	mov	r1, r4
 80025c8:	4814      	ldr	r0, [pc, #80]	; (800261c <main+0xf0>)
 80025ca:	9401      	str	r4, [sp, #4]
 80025cc:	f003 fef8 	bl	80063c0 <xTaskCreate>
  xTaskCreate(Data_Acq_Task, NULL, 100 , NULL , 6 , NULL);
 80025d0:	4623      	mov	r3, r4
 80025d2:	2264      	movs	r2, #100	; 0x64
 80025d4:	4621      	mov	r1, r4
 80025d6:	4812      	ldr	r0, [pc, #72]	; (8002620 <main+0xf4>)
 80025d8:	9401      	str	r4, [sp, #4]
 80025da:	9600      	str	r6, [sp, #0]
  while (MPU6050_Init(&hi2c1) == 1);
 80025dc:	4d11      	ldr	r5, [pc, #68]	; (8002624 <main+0xf8>)
  xTaskCreate(Data_Acq_Task, NULL, 100 , NULL , 6 , NULL);
 80025de:	f003 feef 	bl	80063c0 <xTaskCreate>
  while (MPU6050_Init(&hi2c1) == 1);
 80025e2:	4628      	mov	r0, r5
 80025e4:	f000 f822 	bl	800262c <MPU6050_Init>
 80025e8:	2801      	cmp	r0, #1
 80025ea:	d0fa      	beq.n	80025e2 <main+0xb6>
  DC_voidInit();
 80025ec:	f7fe fd66 	bl	80010bc <DC_voidInit>
  UltraSonic_INIT_TIMER1_ALL_CHANNEL();
 80025f0:	f7ff f928 	bl	8001844 <UltraSonic_INIT_TIMER1_ALL_CHANNEL>
  UltraSonic_INIT_TIMER3_Ch1_ch2();
 80025f4:	f7ff f93c 	bl	8001870 <UltraSonic_INIT_TIMER3_Ch1_ch2>
  MX_FREERTOS_Init();
 80025f8:	f7ff fb20 	bl	8001c3c <MX_FREERTOS_Init>
  osKernelStart();
 80025fc:	f003 fbe4 	bl	8005dc8 <osKernelStart>
	while (1)
 8002600:	e7fe      	b.n	8002600 <main+0xd4>
 8002602:	bf00      	nop
 8002604:	200004bc 	.word	0x200004bc
 8002608:	200004c0 	.word	0x200004c0
 800260c:	08002169 	.word	0x08002169
 8002610:	08002281 	.word	0x08002281
 8002614:	08001e81 	.word	0x08001e81
 8002618:	08002341 	.word	0x08002341
 800261c:	08002001 	.word	0x08002001
 8002620:	08001e21 	.word	0x08001e21
 8002624:	200003e4 	.word	0x200003e4

08002628 <Error_Handler>:
 8002628:	b672      	cpsid	i
	while (1)
 800262a:	e7fe      	b.n	800262a <Error_Handler+0x2>

0800262c <MPU6050_Init>:
		.Q_bias = 0.003f,
		.R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002630:	2401      	movs	r4, #1
 8002632:	2664      	movs	r6, #100	; 0x64
{
 8002634:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002636:	f10d 0316 	add.w	r3, sp, #22
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2275      	movs	r2, #117	; 0x75
 800263e:	4623      	mov	r3, r4
 8002640:	21d0      	movs	r1, #208	; 0xd0
 8002642:	e9cd 4601 	strd	r4, r6, [sp, #4]
{
 8002646:	4605      	mov	r5, r0
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002648:	f001 fe62 	bl	8004310 <HAL_I2C_Mem_Read>

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800264c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002650:	2b68      	cmp	r3, #104	; 0x68
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
		return 0;
	}
	return 1;
 8002652:	bf18      	it	ne
 8002654:	4620      	movne	r0, r4
	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002656:	d002      	beq.n	800265e <MPU6050_Init+0x32>
}
 8002658:	b006      	add	sp, #24
 800265a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Data = 0;
 800265e:	2700      	movs	r7, #0
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002660:	f10d 0817 	add.w	r8, sp, #23
 8002664:	4623      	mov	r3, r4
 8002666:	226b      	movs	r2, #107	; 0x6b
 8002668:	21d0      	movs	r1, #208	; 0xd0
 800266a:	4628      	mov	r0, r5
 800266c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8002670:	f8cd 8000 	str.w	r8, [sp]
		Data = 0;
 8002674:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002678:	f001 fda6 	bl	80041c8 <HAL_I2C_Mem_Write>
		Data = 0x07;
 800267c:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800267e:	2219      	movs	r2, #25
		Data = 0x07;
 8002680:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002684:	21d0      	movs	r1, #208	; 0xd0
 8002686:	4623      	mov	r3, r4
 8002688:	4628      	mov	r0, r5
 800268a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800268e:	f8cd 8000 	str.w	r8, [sp]
 8002692:	f001 fd99 	bl	80041c8 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002696:	4623      	mov	r3, r4
 8002698:	221c      	movs	r2, #28
 800269a:	21d0      	movs	r1, #208	; 0xd0
 800269c:	4628      	mov	r0, r5
 800269e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80026a2:	f8cd 8000 	str.w	r8, [sp]
		Data = 0x00;
 80026a6:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80026aa:	f001 fd8d 	bl	80041c8 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80026ae:	4628      	mov	r0, r5
 80026b0:	4623      	mov	r3, r4
 80026b2:	221b      	movs	r2, #27
 80026b4:	21d0      	movs	r1, #208	; 0xd0
 80026b6:	e9cd 8400 	strd	r8, r4, [sp]
 80026ba:	9602      	str	r6, [sp, #8]
		Data = 0x00;
 80026bc:	f88d 7017 	strb.w	r7, [sp, #23]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80026c0:	f001 fd82 	bl	80041c8 <HAL_I2C_Mem_Write>
		return 0;
 80026c4:	4638      	mov	r0, r7
}
 80026c6:	b006      	add	sp, #24
 80026c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026cc <Kalman_getAngle>:
		DataStruct->Gx = -DataStruct->Gx;
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80026cc:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	4604      	mov	r4, r0
 80026d2:	b08e      	sub	sp, #56	; 0x38
	double rate = newRate - Kalman->bias;
 80026d4:	e9d4 8908 	ldrd	r8, r9, [r4, #32]
{
 80026d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	double rate = newRate - Kalman->bias;
 80026dc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
{
 80026e0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
	double rate = newRate - Kalman->bias;
 80026e4:	4642      	mov	r2, r8
 80026e6:	464b      	mov	r3, r9
 80026e8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80026ec:	f7fd fd34 	bl	8000158 <__aeabi_dsub>
	Kalman->angle += dt * rate;
 80026f0:	4632      	mov	r2, r6
 80026f2:	463b      	mov	r3, r7
 80026f4:	f7fd fee8 	bl	80004c8 <__aeabi_dmul>
 80026f8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80026fc:	f7fd fd2e 	bl	800015c <__adddf3>
 8002700:	e9cd 0104 	strd	r0, r1, [sp, #16]

	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002704:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8002708:	4689      	mov	r9, r1
 800270a:	4692      	mov	sl, r2
 800270c:	463b      	mov	r3, r7
 800270e:	4632      	mov	r2, r6
 8002710:	4648      	mov	r0, r9
 8002712:	4651      	mov	r1, sl
 8002714:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 8002718:	f7fd fed6 	bl	80004c8 <__aeabi_dmul>
 800271c:	e9d4 890c 	ldrd	r8, r9, [r4, #48]	; 0x30
 8002720:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8002724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002728:	4642      	mov	r2, r8
 800272a:	464b      	mov	r3, r9
 800272c:	4682      	mov	sl, r0
 800272e:	468b      	mov	fp, r1
 8002730:	f7fd fd12 	bl	8000158 <__aeabi_dsub>
 8002734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002738:	f7fd fd0e 	bl	8000158 <__aeabi_dsub>
 800273c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002740:	f7fd fd0c 	bl	800015c <__adddf3>
 8002744:	4632      	mov	r2, r6
 8002746:	463b      	mov	r3, r7
 8002748:	f7fd febe 	bl	80004c8 <__aeabi_dmul>
 800274c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8002750:	f7fd fd04 	bl	800015c <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002758:	4640      	mov	r0, r8
	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800275a:	e9cd 2300 	strd	r2, r3, [sp]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800275e:	4649      	mov	r1, r9
 8002760:	4652      	mov	r2, sl
 8002762:	465b      	mov	r3, fp
 8002764:	f7fd fcf8 	bl	8000158 <__aeabi_dsub>
 8002768:	4680      	mov	r8, r0
 800276a:	4689      	mov	r9, r1
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 800276c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002770:	4652      	mov	r2, sl
 8002772:	465b      	mov	r3, fp
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002774:	e9cd 8902 	strd	r8, r9, [sp, #8]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002778:	f7fd fcee 	bl	8000158 <__aeabi_dsub>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4692      	mov	sl, r2
 8002782:	469b      	mov	fp, r3
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002784:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002788:	4630      	mov	r0, r6
 800278a:	4639      	mov	r1, r7
 800278c:	f7fd fe9c 	bl	80004c8 <__aeabi_dmul>
 8002790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002794:	f7fd fce2 	bl	800015c <__adddf3>

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8002798:	e9dd 6700 	ldrd	r6, r7, [sp]
 800279c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 80027a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
	double S = Kalman->P[0][0] + Kalman->R_measure;
 80027a4:	4630      	mov	r0, r6
 80027a6:	4639      	mov	r1, r7
 80027a8:	f7fd fcd8 	bl	800015c <__adddf3>
 80027ac:	4680      	mov	r8, r0
 80027ae:	4689      	mov	r9, r1
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	4630      	mov	r0, r6
 80027b6:	4639      	mov	r1, r7
 80027b8:	f7fd ffb0 	bl	800071c <__aeabi_ddiv>
	K[1] = Kalman->P[1][0] / S;
 80027bc:	4642      	mov	r2, r8
	K[0] = Kalman->P[0][0] / S;
 80027be:	4606      	mov	r6, r0
 80027c0:	460f      	mov	r7, r1
	K[1] = Kalman->P[1][0] / S;
 80027c2:	464b      	mov	r3, r9
 80027c4:	4650      	mov	r0, sl
 80027c6:	4659      	mov	r1, fp
 80027c8:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80027cc:	f7fd ffa6 	bl	800071c <__aeabi_ddiv>
 80027d0:	4682      	mov	sl, r0
 80027d2:	468b      	mov	fp, r1

	double y = newAngle - Kalman->angle;
 80027d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80027d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027dc:	f7fd fcbc 	bl	8000158 <__aeabi_dsub>
 80027e0:	4680      	mov	r8, r0
 80027e2:	4689      	mov	r9, r1
	Kalman->angle += K[0] * y;
 80027e4:	4642      	mov	r2, r8
 80027e6:	464b      	mov	r3, r9
 80027e8:	4630      	mov	r0, r6
 80027ea:	4639      	mov	r1, r7
 80027ec:	f7fd fe6c 	bl	80004c8 <__aeabi_dmul>
 80027f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80027f4:	f7fd fcb2 	bl	800015c <__adddf3>
	Kalman->bias += K[1] * y;
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
	Kalman->angle += K[0] * y;
 80027fc:	4680      	mov	r8, r0
 80027fe:	4689      	mov	r9, r1
	Kalman->bias += K[1] * y;
 8002800:	4650      	mov	r0, sl
 8002802:	4659      	mov	r1, fp
	Kalman->angle += K[0] * y;
 8002804:	e9c4 8906 	strd	r8, r9, [r4, #24]
	Kalman->bias += K[1] * y;
 8002808:	f7fd fe5e 	bl	80004c8 <__aeabi_dmul>
 800280c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002810:	f7fd fca4 	bl	800015c <__adddf3>

	double P00_temp = Kalman->P[0][0];
	double P01_temp = Kalman->P[0][1];

	Kalman->P[0][0] -= K[0] * P00_temp;
 8002814:	4632      	mov	r2, r6
 8002816:	463b      	mov	r3, r7
	Kalman->bias += K[1] * y;
 8002818:	e9c4 0108 	strd	r0, r1, [r4, #32]
	Kalman->P[0][0] -= K[0] * P00_temp;
 800281c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002820:	f7fd fe52 	bl	80004c8 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800282c:	f7fd fc94 	bl	8000158 <__aeabi_dsub>
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002830:	4632      	mov	r2, r6
	Kalman->P[0][0] -= K[0] * P00_temp;
 8002832:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002836:	463b      	mov	r3, r7
 8002838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800283c:	4630      	mov	r0, r6
 800283e:	4639      	mov	r1, r7
 8002840:	f7fd fe42 	bl	80004c8 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4630      	mov	r0, r6
 800284a:	4639      	mov	r1, r7
 800284c:	f7fd fc84 	bl	8000158 <__aeabi_dsub>
	Kalman->P[1][0] -= K[1] * P00_temp;
 8002850:	4652      	mov	r2, sl
 8002852:	465b      	mov	r3, fp
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002854:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8002858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800285c:	f7fd fe34 	bl	80004c8 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002868:	f7fd fc76 	bl	8000158 <__aeabi_dsub>
	Kalman->P[1][1] -= K[1] * P01_temp;
 800286c:	4652      	mov	r2, sl
	Kalman->P[1][0] -= K[1] * P00_temp;
 800286e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002872:	465b      	mov	r3, fp
 8002874:	4630      	mov	r0, r6
 8002876:	4639      	mov	r1, r7
 8002878:	f7fd fe26 	bl	80004c8 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002884:	f7fd fc68 	bl	8000158 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1

	return Kalman->angle;
};
 800288c:	4640      	mov	r0, r8
 800288e:	4649      	mov	r1, r9
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002890:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
};
 8002894:	b00e      	add	sp, #56	; 0x38
 8002896:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800289a:	bf00      	nop
 800289c:	0000      	movs	r0, r0
	...

080028a0 <MPU6050_Read_All>:
{
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80028a4:	2664      	movs	r6, #100	; 0x64
 80028a6:	250e      	movs	r5, #14
{
 80028a8:	460c      	mov	r4, r1
 80028aa:	b089      	sub	sp, #36	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80028ac:	ab04      	add	r3, sp, #16
 80028ae:	223b      	movs	r2, #59	; 0x3b
 80028b0:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80028b4:	21d0      	movs	r1, #208	; 0xd0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	f001 fd29 	bl	8004310 <HAL_I2C_Mem_Read>
	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80028be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80028c2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80028c6:	ba5b      	rev16	r3, r3
 80028c8:	fa0f fa83 	sxth.w	sl, r3
 80028cc:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 80028d0:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80028d4:	f8bd 601a 	ldrh.w	r6, [sp, #26]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80028d8:	8063      	strh	r3, [r4, #2]
 80028da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80028de:	ba40      	rev16	r0, r0
 80028e0:	ba5b      	rev16	r3, r3
 80028e2:	fa99 f999 	rev16.w	r9, r9
 80028e6:	ba7f      	rev16	r7, r7
 80028e8:	ba76      	rev16	r6, r6
	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80028ea:	8020      	strh	r0, [r4, #0]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80028ec:	f8a4 9004 	strh.w	r9, [r4, #4]
	DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80028f0:	8427      	strh	r7, [r4, #32]
	DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80028f2:	8466      	strh	r6, [r4, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80028f4:	84a3      	strh	r3, [r4, #36]	; 0x24
	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80028f6:	b200      	sxth	r0, r0
 80028f8:	b21d      	sxth	r5, r3
 80028fa:	f7fd fd7b 	bl	80003f4 <__aeabi_i2d>
 80028fe:	2200      	movs	r2, #0
 8002900:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <MPU6050_Read_All+0x260>)
 8002902:	f7fd fde1 	bl	80004c8 <__aeabi_dmul>
 8002906:	e9c4 0102 	strd	r0, r1, [r4, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800290a:	4650      	mov	r0, sl
 800290c:	f7fd fd72 	bl	80003f4 <__aeabi_i2d>
 8002910:	2200      	movs	r2, #0
 8002912:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <MPU6050_Read_All+0x260>)
 8002914:	f7fd fdd8 	bl	80004c8 <__aeabi_dmul>
 8002918:	fa0f f989 	sxth.w	r9, r9
 800291c:	e9c4 0104 	strd	r0, r1, [r4, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002920:	4648      	mov	r0, r9
 8002922:	f7fd fd67 	bl	80003f4 <__aeabi_i2d>
 8002926:	a370      	add	r3, pc, #448	; (adr r3, 8002ae8 <MPU6050_Read_All+0x248>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fef6 	bl	800071c <__aeabi_ddiv>
 8002930:	f8bd b016 	ldrh.w	fp, [sp, #22]
 8002934:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8002938:	fa9b fbbb 	revsh.w	fp, fp
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800293c:	4658      	mov	r0, fp
 800293e:	f7fe f97d 	bl	8000c3c <__aeabi_i2f>
 8002942:	4970      	ldr	r1, [pc, #448]	; (8002b04 <MPU6050_Read_All+0x264>)
 8002944:	f7fe fa82 	bl	8000e4c <__aeabi_fdiv>
 8002948:	496f      	ldr	r1, [pc, #444]	; (8002b08 <MPU6050_Read_All+0x268>)
 800294a:	f7fe f8c3 	bl	8000ad4 <__addsf3>
 800294e:	4603      	mov	r3, r0
 8002950:	b23f      	sxth	r7, r7
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002952:	4638      	mov	r0, r7
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002954:	6423      	str	r3, [r4, #64]	; 0x40
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002956:	f7fd fd4d 	bl	80003f4 <__aeabi_i2d>
 800295a:	a365      	add	r3, pc, #404	; (adr r3, 8002af0 <MPU6050_Read_All+0x250>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fd fedc 	bl	800071c <__aeabi_ddiv>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	b236      	sxth	r6, r6
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800296a:	4630      	mov	r0, r6
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800296c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002970:	f7fd fd40 	bl	80003f4 <__aeabi_i2d>
 8002974:	a35e      	add	r3, pc, #376	; (adr r3, 8002af0 <MPU6050_Read_All+0x250>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fecf 	bl	800071c <__aeabi_ddiv>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002982:	4628      	mov	r0, r5
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002984:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002988:	f7fd fd34 	bl	80003f4 <__aeabi_i2d>
 800298c:	a358      	add	r3, pc, #352	; (adr r3, 8002af0 <MPU6050_Read_All+0x250>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fd fec3 	bl	800071c <__aeabi_ddiv>
 8002996:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
	double dt = (double)(HAL_GetTick() - timer) / 1000;
 800299a:	f000 fbf9 	bl	8003190 <HAL_GetTick>
 800299e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002b0c <MPU6050_Read_All+0x26c>
 80029a2:	f8d8 3000 	ldr.w	r3, [r8]
 80029a6:	1ac0      	subs	r0, r0, r3
 80029a8:	f7fd fd14 	bl	80003d4 <__aeabi_ui2d>
 80029ac:	2200      	movs	r2, #0
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <MPU6050_Read_All+0x270>)
 80029b0:	f7fd feb4 	bl	800071c <__aeabi_ddiv>
 80029b4:	460f      	mov	r7, r1
 80029b6:	4606      	mov	r6, r0
	timer = HAL_GetTick();
 80029b8:	f000 fbea 	bl	8003190 <HAL_GetTick>
 80029bc:	4603      	mov	r3, r0
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80029be:	f9b4 a004 	ldrsh.w	sl, [r4, #4]
 80029c2:	f9b4 5000 	ldrsh.w	r5, [r4]
 80029c6:	fb0a f00a 	mul.w	r0, sl, sl
	timer = HAL_GetTick();
 80029ca:	f8c8 3000 	str.w	r3, [r8]
	double roll_sqrt = sqrt(
 80029ce:	fb05 0005 	mla	r0, r5, r5, r0
 80029d2:	f7fd fd0f 	bl	80003f4 <__aeabi_i2d>
 80029d6:	f004 fa03 	bl	8006de0 <sqrt>
	if (roll_sqrt != 0.0)
 80029da:	2200      	movs	r2, #0
 80029dc:	2300      	movs	r3, #0
	double roll_sqrt = sqrt(
 80029de:	4680      	mov	r8, r0
 80029e0:	4689      	mov	r9, r1
	if (roll_sqrt != 0.0)
 80029e2:	f7fd ffd9 	bl	8000998 <__aeabi_dcmpeq>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d170      	bne.n	8002acc <MPU6050_Read_All+0x22c>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80029ea:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80029ee:	f7fd fd01 	bl	80003f4 <__aeabi_i2d>
 80029f2:	4642      	mov	r2, r8
 80029f4:	464b      	mov	r3, r9
 80029f6:	f7fd fe91 	bl	800071c <__aeabi_ddiv>
 80029fa:	f004 fa15 	bl	8006e28 <atan>
 80029fe:	a33e      	add	r3, pc, #248	; (adr r3, 8002af8 <MPU6050_Read_All+0x258>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fd fd60 	bl	80004c8 <__aeabi_dmul>
 8002a08:	4680      	mov	r8, r0
 8002a0a:	4689      	mov	r9, r1
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002a0c:	4650      	mov	r0, sl
 8002a0e:	f7fd fcf1 	bl	80003f4 <__aeabi_i2d>
 8002a12:	4682      	mov	sl, r0
 8002a14:	468b      	mov	fp, r1
 8002a16:	4268      	negs	r0, r5
 8002a18:	f7fd fcec 	bl	80003f4 <__aeabi_i2d>
 8002a1c:	4652      	mov	r2, sl
 8002a1e:	465b      	mov	r3, fp
 8002a20:	f004 f9dc 	bl	8006ddc <atan2>
 8002a24:	a334      	add	r3, pc, #208	; (adr r3, 8002af8 <MPU6050_Read_All+0x258>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fd4d 	bl	80004c8 <__aeabi_dmul>
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <MPU6050_Read_All+0x274>)
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002a32:	4682      	mov	sl, r0
 8002a34:	460d      	mov	r5, r1
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002a36:	f7fd ffb9 	bl	80009ac <__aeabi_dcmplt>
 8002a3a:	b350      	cbz	r0, 8002a92 <MPU6050_Read_All+0x1f2>
 8002a3c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8002a40:	2200      	movs	r2, #0
 8002a42:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <MPU6050_Read_All+0x278>)
 8002a44:	f7fd ffd0 	bl	80009e8 <__aeabi_dcmpgt>
 8002a48:	b318      	cbz	r0, 8002a92 <MPU6050_Read_All+0x1f2>
		KalmanY.angle = pitch;
 8002a4a:	4652      	mov	r2, sl
 8002a4c:	462b      	mov	r3, r5
 8002a4e:	4933      	ldr	r1, [pc, #204]	; (8002b1c <MPU6050_Read_All+0x27c>)
 8002a50:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8002a54:	4652      	mov	r2, sl
 8002a56:	462b      	mov	r3, r5
	if (fabs(DataStruct->KalmanAngleY) > 90)
 8002a58:	4650      	mov	r0, sl
		DataStruct->KalmanAngleY = pitch;
 8002a5a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (fabs(DataStruct->KalmanAngleY) > 90)
 8002a5e:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8002a62:	2200      	movs	r2, #0
 8002a64:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <MPU6050_Read_All+0x278>)
 8002a66:	f7fd ffbf 	bl	80009e8 <__aeabi_dcmpgt>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d133      	bne.n	8002ad6 <MPU6050_Read_All+0x236>
		DataStruct->Gx = -DataStruct->Gx;
 8002a6e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002a72:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002a76:	4606      	mov	r6, r0
 8002a78:	460f      	mov	r7, r1
 8002a7a:	4642      	mov	r2, r8
 8002a7c:	464b      	mov	r3, r9
 8002a7e:	e9cd 6700 	strd	r6, r7, [sp]
 8002a82:	4827      	ldr	r0, [pc, #156]	; (8002b20 <MPU6050_Read_All+0x280>)
 8002a84:	f7ff fe22 	bl	80026cc <Kalman_getAngle>
 8002a88:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
}
 8002a8c:	b009      	add	sp, #36	; 0x24
 8002a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002a92:	4650      	mov	r0, sl
 8002a94:	4629      	mov	r1, r5
 8002a96:	2200      	movs	r2, #0
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <MPU6050_Read_All+0x278>)
 8002a9a:	f7fd ffa5 	bl	80009e8 <__aeabi_dcmpgt>
 8002a9e:	b138      	cbz	r0, 8002ab0 <MPU6050_Read_All+0x210>
 8002aa0:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <MPU6050_Read_All+0x274>)
 8002aa8:	f7fd ff80 	bl	80009ac <__aeabi_dcmplt>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d1cc      	bne.n	8002a4a <MPU6050_Read_All+0x1aa>
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002ab0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	e9d4 ab0c 	ldrd	sl, fp, [r4, #48]	; 0x30
 8002aba:	462b      	mov	r3, r5
 8002abc:	e9cd ab00 	strd	sl, fp, [sp]
 8002ac0:	4816      	ldr	r0, [pc, #88]	; (8002b1c <MPU6050_Read_All+0x27c>)
 8002ac2:	f7ff fe03 	bl	80026cc <Kalman_getAngle>
 8002ac6:	4682      	mov	sl, r0
 8002ac8:	460d      	mov	r5, r1
 8002aca:	e7c3      	b.n	8002a54 <MPU6050_Read_All+0x1b4>
		roll = 0.0;
 8002acc:	f04f 0800 	mov.w	r8, #0
 8002ad0:	f04f 0900 	mov.w	r9, #0
 8002ad4:	e79a      	b.n	8002a0c <MPU6050_Read_All+0x16c>
		DataStruct->Gx = -DataStruct->Gx;
 8002ad6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ad8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ada:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 8002ae6:	e7c4      	b.n	8002a72 <MPU6050_Read_All+0x1d2>
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	40cc2900 	.word	0x40cc2900
 8002af0:	00000000 	.word	0x00000000
 8002af4:	40606000 	.word	0x40606000
 8002af8:	1a63c1f8 	.word	0x1a63c1f8
 8002afc:	404ca5dc 	.word	0x404ca5dc
 8002b00:	3f100000 	.word	0x3f100000
 8002b04:	43aa0000 	.word	0x43aa0000
 8002b08:	42121eb8 	.word	0x42121eb8
 8002b0c:	200004d4 	.word	0x200004d4
 8002b10:	408f4000 	.word	0x408f4000
 8002b14:	c0568000 	.word	0xc0568000
 8002b18:	40568000 	.word	0x40568000
 8002b1c:	20000048 	.word	0x20000048
 8002b20:	20000000 	.word	0x20000000

08002b24 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <HAL_MspInit+0x48>)
{
 8002b26:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b28:	6998      	ldr	r0, [r3, #24]
{
 8002b2a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b2c:	f040 0001 	orr.w	r0, r0, #1
 8002b30:	6198      	str	r0, [r3, #24]
 8002b32:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b34:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b36:	f004 0401 	and.w	r4, r4, #1
 8002b3a:	9400      	str	r4, [sp, #0]
 8002b3c:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b40:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002b46:	61dc      	str	r4, [r3, #28]
 8002b48:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b4a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b56:	f000 fe13 	bl	8003780 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_MspInit+0x4c>)
 8002b5c:	6853      	ldr	r3, [r2, #4]
 8002b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b66:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd10      	pop	{r4, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000

08002b74 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b74:	e7fe      	b.n	8002b74 <NMI_Handler>
 8002b76:	bf00      	nop

08002b78 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <HardFault_Handler>
 8002b7a:	bf00      	nop

08002b7c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <MemManage_Handler>
 8002b7e:	bf00      	nop

08002b80 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <BusFault_Handler>
 8002b82:	bf00      	nop

08002b84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <UsageFault_Handler>
 8002b86:	bf00      	nop

08002b88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop

08002b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8e:	f000 faf3 	bl	8003178 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b92:	f003 fe9d 	bl	80068d0 <xTaskGetSchedulerState>
 8002b96:	2801      	cmp	r0, #1
 8002b98:	d100      	bne.n	8002b9c <SysTick_Handler+0x10>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9a:	bd08      	pop	{r3, pc}
 8002b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8002ba0:	f003 bf60 	b.w	8006a64 <xPortSysTickHandler>

08002ba4 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ba4:	4801      	ldr	r0, [pc, #4]	; (8002bac <TIM1_CC_IRQHandler+0x8>)
 8002ba6:	f002 baf5 	b.w	8005194 <HAL_TIM_IRQHandler>
 8002baa:	bf00      	nop
 8002bac:	200004d8 	.word	0x200004d8

08002bb0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bb0:	4801      	ldr	r0, [pc, #4]	; (8002bb8 <TIM3_IRQHandler+0x8>)
 8002bb2:	f002 baef 	b.w	8005194 <HAL_TIM_IRQHandler>
 8002bb6:	bf00      	nop
 8002bb8:	20000568 	.word	0x20000568

08002bbc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bbc:	4801      	ldr	r0, [pc, #4]	; (8002bc4 <USART2_IRQHandler+0x8>)
 8002bbe:	f002 bf99 	b.w	8005af4 <HAL_UART_IRQHandler>
 8002bc2:	bf00      	nop
 8002bc4:	200005f8 	.word	0x200005f8

08002bc8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <MX_TIM1_Init>:

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bcc:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 63;
 8002bce:	213f      	movs	r1, #63	; 0x3f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8002bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8002bd4:	b510      	push	{r4, lr}
  htim1.Instance = TIM1;
 8002bd6:	4833      	ldr	r0, [pc, #204]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002bd8:	4c33      	ldr	r4, [pc, #204]	; (8002ca8 <MX_TIM1_Init+0xdc>)
{
 8002bda:	b08a      	sub	sp, #40	; 0x28
  htim1.Init.Prescaler = 63;
 8002bdc:	e9c0 4100 	strd	r4, r1, [r0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 8002be0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002be4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002be8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim1.Init.Period = 65535;
 8002bec:	60c2      	str	r2, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bee:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf0:	9300      	str	r3, [sp, #0]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bf2:	9306      	str	r3, [sp, #24]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf6:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfa:	9301      	str	r3, [sp, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bfc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bfe:	f002 fbaf 	bl	8005360 <HAL_TIM_Base_Init>
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d134      	bne.n	8002c70 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c0a:	4826      	ldr	r0, [pc, #152]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002c0c:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c0e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c10:	f002 fa08 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d141      	bne.n	8002c9c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002c18:	4822      	ldr	r0, [pc, #136]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002c1a:	f002 fbfd 	bl	8005418 <HAL_TIM_IC_Init>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d139      	bne.n	8002c96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c22:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c24:	4669      	mov	r1, sp
 8002c26:	481f      	ldr	r0, [pc, #124]	; (8002ca4 <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c28:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c2c:	f002 fd76 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 8002c30:	bb70      	cbnz	r0, 8002c90 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c32:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c34:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c36:	481b      	ldr	r0, [pc, #108]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002c38:	a906      	add	r1, sp, #24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfigIC.ICFilter = 0;
 8002c3e:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c42:	f002 fcd1 	bl	80055e8 <HAL_TIM_IC_ConfigChannel>
 8002c46:	bb00      	cbnz	r0, 8002c8a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002c48:	2204      	movs	r2, #4
 8002c4a:	4816      	ldr	r0, [pc, #88]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002c4c:	a906      	add	r1, sp, #24
 8002c4e:	f002 fccb 	bl	80055e8 <HAL_TIM_IC_ConfigChannel>
 8002c52:	b9b8      	cbnz	r0, 8002c84 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002c54:	2208      	movs	r2, #8
 8002c56:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002c58:	a906      	add	r1, sp, #24
 8002c5a:	f002 fcc5 	bl	80055e8 <HAL_TIM_IC_ConfigChannel>
 8002c5e:	b970      	cbnz	r0, 8002c7e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002c60:	220c      	movs	r2, #12
 8002c62:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <MX_TIM1_Init+0xd8>)
 8002c64:	a906      	add	r1, sp, #24
 8002c66:	f002 fcbf 	bl	80055e8 <HAL_TIM_IC_ConfigChannel>
 8002c6a:	b920      	cbnz	r0, 8002c76 <MX_TIM1_Init+0xaa>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c6c:	b00a      	add	sp, #40	; 0x28
 8002c6e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c70:	f7ff fcda 	bl	8002628 <Error_Handler>
 8002c74:	e7c7      	b.n	8002c06 <MX_TIM1_Init+0x3a>
    Error_Handler();
 8002c76:	f7ff fcd7 	bl	8002628 <Error_Handler>
}
 8002c7a:	b00a      	add	sp, #40	; 0x28
 8002c7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c7e:	f7ff fcd3 	bl	8002628 <Error_Handler>
 8002c82:	e7ed      	b.n	8002c60 <MX_TIM1_Init+0x94>
    Error_Handler();
 8002c84:	f7ff fcd0 	bl	8002628 <Error_Handler>
 8002c88:	e7e4      	b.n	8002c54 <MX_TIM1_Init+0x88>
    Error_Handler();
 8002c8a:	f7ff fccd 	bl	8002628 <Error_Handler>
 8002c8e:	e7db      	b.n	8002c48 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002c90:	f7ff fcca 	bl	8002628 <Error_Handler>
 8002c94:	e7cd      	b.n	8002c32 <MX_TIM1_Init+0x66>
    Error_Handler();
 8002c96:	f7ff fcc7 	bl	8002628 <Error_Handler>
 8002c9a:	e7c2      	b.n	8002c22 <MX_TIM1_Init+0x56>
    Error_Handler();
 8002c9c:	f7ff fcc4 	bl	8002628 <Error_Handler>
 8002ca0:	e7ba      	b.n	8002c18 <MX_TIM1_Init+0x4c>
 8002ca2:	bf00      	nop
 8002ca4:	200004d8 	.word	0x200004d8
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <MX_TIM3_Init>:

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cac:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 63;
 8002cae:	213f      	movs	r1, #63	; 0x3f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8002cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8002cb4:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8002cb6:	4828      	ldr	r0, [pc, #160]	; (8002d58 <MX_TIM3_Init+0xac>)
 8002cb8:	4c28      	ldr	r4, [pc, #160]	; (8002d5c <MX_TIM3_Init+0xb0>)
{
 8002cba:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.Prescaler = 63;
 8002cbc:	e9c0 4100 	strd	r4, r1, [r0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim3.Init.Period = 65535;
 8002cc8:	60c2      	str	r2, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cca:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ccc:	9300      	str	r3, [sp, #0]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cce:	9306      	str	r3, [sp, #24]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd0:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd4:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd6:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd8:	9301      	str	r3, [sp, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cda:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cdc:	f002 fb40 	bl	8005360 <HAL_TIM_Base_Init>
 8002ce0:	bb30      	cbnz	r0, 8002d30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ce6:	481c      	ldr	r0, [pc, #112]	; (8002d58 <MX_TIM3_Init+0xac>)
 8002ce8:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cea:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cec:	f002 f99a 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8002cf0:	bb70      	cbnz	r0, 8002d50 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002cf2:	4819      	ldr	r0, [pc, #100]	; (8002d58 <MX_TIM3_Init+0xac>)
 8002cf4:	f002 fb90 	bl	8005418 <HAL_TIM_IC_Init>
 8002cf8:	bb38      	cbnz	r0, 8002d4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cfa:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cfc:	4669      	mov	r1, sp
 8002cfe:	4816      	ldr	r0, [pc, #88]	; (8002d58 <MX_TIM3_Init+0xac>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d00:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d04:	f002 fd0a 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 8002d08:	b9e0      	cbnz	r0, 8002d44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d0a:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d0c:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d0e:	4812      	ldr	r0, [pc, #72]	; (8002d58 <MX_TIM3_Init+0xac>)
 8002d10:	a906      	add	r1, sp, #24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d12:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfigIC.ICFilter = 0;
 8002d16:	e9cd 2208 	strd	r2, r2, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d1a:	f002 fc65 	bl	80055e8 <HAL_TIM_IC_ConfigChannel>
 8002d1e:	b970      	cbnz	r0, 8002d3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d20:	2204      	movs	r2, #4
 8002d22:	480d      	ldr	r0, [pc, #52]	; (8002d58 <MX_TIM3_Init+0xac>)
 8002d24:	a906      	add	r1, sp, #24
 8002d26:	f002 fc5f 	bl	80055e8 <HAL_TIM_IC_ConfigChannel>
 8002d2a:	b920      	cbnz	r0, 8002d36 <MX_TIM3_Init+0x8a>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d2c:	b00a      	add	sp, #40	; 0x28
 8002d2e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d30:	f7ff fc7a 	bl	8002628 <Error_Handler>
 8002d34:	e7d5      	b.n	8002ce2 <MX_TIM3_Init+0x36>
    Error_Handler();
 8002d36:	f7ff fc77 	bl	8002628 <Error_Handler>
}
 8002d3a:	b00a      	add	sp, #40	; 0x28
 8002d3c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d3e:	f7ff fc73 	bl	8002628 <Error_Handler>
 8002d42:	e7ed      	b.n	8002d20 <MX_TIM3_Init+0x74>
    Error_Handler();
 8002d44:	f7ff fc70 	bl	8002628 <Error_Handler>
 8002d48:	e7df      	b.n	8002d0a <MX_TIM3_Init+0x5e>
    Error_Handler();
 8002d4a:	f7ff fc6d 	bl	8002628 <Error_Handler>
 8002d4e:	e7d4      	b.n	8002cfa <MX_TIM3_Init+0x4e>
    Error_Handler();
 8002d50:	f7ff fc6a 	bl	8002628 <Error_Handler>
 8002d54:	e7cd      	b.n	8002cf2 <MX_TIM3_Init+0x46>
 8002d56:	bf00      	nop
 8002d58:	20000568 	.word	0x20000568
 8002d5c:	40000400 	.word	0x40000400

08002d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d60:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d62:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM1)
 8002d64:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <HAL_TIM_Base_MspInit+0xd8>)
 8002d66:	6803      	ldr	r3, [r0, #0]
{
 8002d68:	b08b      	sub	sp, #44	; 0x2c
  if(tim_baseHandle->Instance==TIM1)
 8002d6a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002d70:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if(tim_baseHandle->Instance==TIM1)
 8002d74:	d037      	beq.n	8002de6 <HAL_TIM_Base_MspInit+0x86>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d004      	beq.n	8002d86 <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_TIM_Base_MspInit+0xdc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIM_Base_MspInit+0x40>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d82:	b00b      	add	sp, #44	; 0x2c
 8002d84:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	9303      	str	r3, [sp, #12]
 8002d9a:	9b03      	ldr	r3, [sp, #12]
}
 8002d9c:	b00b      	add	sp, #44	; 0x2c
 8002d9e:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002da0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da2:	20c0      	movs	r0, #192	; 0xc0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002da4:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_TIM_Base_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	432a      	orrs	r2, r5
 8002dac:	61da      	str	r2, [r3, #28]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	402a      	ands	r2, r5
 8002db2:	9204      	str	r2, [sp, #16]
 8002db4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	f042 0204 	orr.w	r2, r2, #4
 8002dbc:	619a      	str	r2, [r3, #24]
 8002dbe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc0:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc8:	481e      	ldr	r0, [pc, #120]	; (8002e44 <HAL_TIM_Base_MspInit+0xe4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dcc:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f000 fdab 	bl	8003928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	2105      	movs	r1, #5
 8002dd6:	201d      	movs	r0, #29
 8002dd8:	f000 fcd2 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ddc:	201d      	movs	r0, #29
 8002dde:	f000 fd0d 	bl	80037fc <HAL_NVIC_EnableIRQ>
}
 8002de2:	b00b      	add	sp, #44	; 0x2c
 8002de4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002de6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dea:	2502      	movs	r5, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_TIM_Base_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002df6:	619a      	str	r2, [r3, #24]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	f042 0204 	orr.w	r2, r2, #4
 8002e08:	619a      	str	r2, [r3, #24]
 8002e0a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002e0c:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0e:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e18:	f500 4079 	add.w	r0, r0, #63744	; 0xf900
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e1e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	f000 fd82 	bl	8003928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002e24:	4622      	mov	r2, r4
 8002e26:	2105      	movs	r1, #5
 8002e28:	201b      	movs	r0, #27
 8002e2a:	f000 fca9 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002e2e:	201b      	movs	r0, #27
 8002e30:	f000 fce4 	bl	80037fc <HAL_NVIC_EnableIRQ>
}
 8002e34:	b00b      	add	sp, #44	; 0x2c
 8002e36:	bd30      	pop	{r4, r5, pc}
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010800 	.word	0x40010800

08002e48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	2300      	movs	r3, #0
{
 8002e4a:	b530      	push	{r4, r5, lr}
  if(timHandle->Instance==TIM2)
 8002e4c:	6802      	ldr	r2, [r0, #0]
{
 8002e4e:	b087      	sub	sp, #28
  if(timHandle->Instance==TIM2)
 8002e50:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002e58:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(timHandle->Instance==TIM2)
 8002e5c:	d001      	beq.n	8002e62 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e5e:	b007      	add	sp, #28
 8002e60:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8002e64:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e6c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e70:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e72:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <HAL_TIM_MspPostInit+0x60>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e74:	f042 0204 	orr.w	r2, r2, #4
 8002e78:	619a      	str	r2, [r3, #24]
 8002e7a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8002e86:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	f000 fd4c 	bl	8003928 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002e90:	4a06      	ldr	r2, [pc, #24]	; (8002eac <HAL_TIM_MspPostInit+0x64>)
 8002e92:	6853      	ldr	r3, [r2, #4]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea0:	6053      	str	r3, [r2, #4]
}
 8002ea2:	b007      	add	sp, #28
 8002ea4:	bd30      	pop	{r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40010800 	.word	0x40010800
 8002eac:	40010000 	.word	0x40010000

08002eb0 <MX_TIM2_Init>:
{
 8002eb0:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8002eb4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 64;
 8002eb8:	2140      	movs	r1, #64	; 0x40
  htim2.Init.Period = 100;
 8002eba:	2264      	movs	r2, #100	; 0x64
  htim2.Instance = TIM2;
 8002ebc:	4827      	ldr	r0, [pc, #156]	; (8002f5c <MX_TIM2_Init+0xac>)
{
 8002ebe:	b08e      	sub	sp, #56	; 0x38
  htim2.Init.Prescaler = 64;
 8002ec0:	e9c0 4100 	strd	r4, r1, [r0]
  htim2.Init.Period = 100;
 8002ec4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ecc:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002ed0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002ed4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed8:	9303      	str	r3, [sp, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eda:	9301      	str	r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002edc:	9307      	str	r3, [sp, #28]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ede:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee0:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ee6:	f002 fa3b 	bl	8005360 <HAL_TIM_Base_Init>
 8002eea:	bb18      	cbnz	r0, 8002f34 <MX_TIM2_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ef0:	481a      	ldr	r0, [pc, #104]	; (8002f5c <MX_TIM2_Init+0xac>)
 8002ef2:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef4:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ef6:	f002 f895 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8002efa:	bb58      	cbnz	r0, 8002f54 <MX_TIM2_Init+0xa4>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002efc:	4817      	ldr	r0, [pc, #92]	; (8002f5c <MX_TIM2_Init+0xac>)
 8002efe:	f002 fa5d 	bl	80053bc <HAL_TIM_PWM_Init>
 8002f02:	bb20      	cbnz	r0, 8002f4e <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f04:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f06:	4815      	ldr	r0, [pc, #84]	; (8002f5c <MX_TIM2_Init+0xac>)
 8002f08:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f0e:	f002 fc05 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	b9c8      	cbnz	r0, 8002f48 <MX_TIM2_Init+0x98>
  sConfigOC.Pulse = 0;
 8002f14:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f16:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f18:	4810      	ldr	r0, [pc, #64]	; (8002f5c <MX_TIM2_Init+0xac>)
 8002f1a:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8002f1c:	e9cd 3207 	strd	r3, r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f20:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f22:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f24:	f002 fad4 	bl	80054d0 <HAL_TIM_PWM_ConfigChannel>
 8002f28:	b938      	cbnz	r0, 8002f3a <MX_TIM2_Init+0x8a>
  HAL_TIM_MspPostInit(&htim2);
 8002f2a:	480c      	ldr	r0, [pc, #48]	; (8002f5c <MX_TIM2_Init+0xac>)
 8002f2c:	f7ff ff8c 	bl	8002e48 <HAL_TIM_MspPostInit>
}
 8002f30:	b00e      	add	sp, #56	; 0x38
 8002f32:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002f34:	f7ff fb78 	bl	8002628 <Error_Handler>
 8002f38:	e7d8      	b.n	8002eec <MX_TIM2_Init+0x3c>
    Error_Handler();
 8002f3a:	f7ff fb75 	bl	8002628 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002f3e:	4807      	ldr	r0, [pc, #28]	; (8002f5c <MX_TIM2_Init+0xac>)
 8002f40:	f7ff ff82 	bl	8002e48 <HAL_TIM_MspPostInit>
}
 8002f44:	b00e      	add	sp, #56	; 0x38
 8002f46:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002f48:	f7ff fb6e 	bl	8002628 <Error_Handler>
 8002f4c:	e7e2      	b.n	8002f14 <MX_TIM2_Init+0x64>
    Error_Handler();
 8002f4e:	f7ff fb6b 	bl	8002628 <Error_Handler>
 8002f52:	e7d7      	b.n	8002f04 <MX_TIM2_Init+0x54>
    Error_Handler();
 8002f54:	f7ff fb68 	bl	8002628 <Error_Handler>
 8002f58:	e7d0      	b.n	8002efc <MX_TIM2_Init+0x4c>
 8002f5a:	bf00      	nop
 8002f5c:	20000520 	.word	0x20000520

08002f60 <MX_USART1_UART_Init>:
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f60:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8002f62:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f66:	220c      	movs	r2, #12
{
 8002f68:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002f6a:	4809      	ldr	r0, [pc, #36]	; (8002f90 <MX_USART1_UART_Init+0x30>)
 8002f6c:	4c09      	ldr	r4, [pc, #36]	; (8002f94 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8002f6e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f72:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f76:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Instance = USART1;
 8002f7a:	6004      	str	r4, [r0, #0]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f7c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f7e:	f002 fcad 	bl	80058dc <HAL_UART_Init>
 8002f82:	b900      	cbnz	r0, 8002f86 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002f8a:	f7ff bb4d 	b.w	8002628 <Error_Handler>
 8002f8e:	bf00      	nop
 8002f90:	200005b0 	.word	0x200005b0
 8002f94:	40013800 	.word	0x40013800

08002f98 <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f98:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 9600;
 8002f9a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f9e:	220c      	movs	r2, #12
{
 8002fa0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8002fa2:	4809      	ldr	r0, [pc, #36]	; (8002fc8 <MX_USART2_UART_Init+0x30>)
 8002fa4:	4c09      	ldr	r4, [pc, #36]	; (8002fcc <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 9600;
 8002fa6:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002faa:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fae:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Instance = USART2;
 8002fb2:	6004      	str	r4, [r0, #0]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb6:	f002 fc91 	bl	80058dc <HAL_UART_Init>
 8002fba:	b900      	cbnz	r0, 8002fbe <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fbc:	bd10      	pop	{r4, pc}
 8002fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002fc2:	f7ff bb31 	b.w	8002628 <Error_Handler>
 8002fc6:	bf00      	nop
 8002fc8:	200005f8 	.word	0x200005f8
 8002fcc:	40004400 	.word	0x40004400

08002fd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fd0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd2:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002fd4:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_UART_MspInit+0xd8>)
 8002fd6:	6803      	ldr	r3, [r0, #0]
{
 8002fd8:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART1)
 8002fda:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002fe0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8002fe4:	d004      	beq.n	8002ff0 <HAL_UART_MspInit+0x20>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002fe6:	4a31      	ldr	r2, [pc, #196]	; (80030ac <HAL_UART_MspInit+0xdc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d02f      	beq.n	800304c <HAL_UART_MspInit+0x7c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fec:	b008      	add	sp, #32
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff0:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ff2:	2640      	movs	r6, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_UART_MspInit+0xe0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff8:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003000:	619a      	str	r2, [r3, #24]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003008:	9200      	str	r2, [sp, #0]
 800300a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	619a      	str	r2, [r3, #24]
 8003014:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003016:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301e:	4825      	ldr	r0, [pc, #148]	; (80030b4 <HAL_UART_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003020:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f000 fc7f 	bl	8003928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800302a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302c:	4821      	ldr	r0, [pc, #132]	; (80030b4 <HAL_UART_MspInit+0xe4>)
 800302e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003030:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	f000 fc77 	bl	8003928 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_UART_MspInit+0xe8>)
 800303c:	6853      	ldr	r3, [r2, #4]
 800303e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6053      	str	r3, [r2, #4]
}
 8003048:	b008      	add	sp, #32
 800304a:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = BLU_TX_Pin;
 800304c:	2604      	movs	r6, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304e:	2003      	movs	r0, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2502      	movs	r5, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <HAL_UART_MspInit+0xe0>)
    HAL_GPIO_Init(BLU_TX_GPIO_Port, &GPIO_InitStruct);
 8003054:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003064:	9202      	str	r2, [sp, #8]
 8003066:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	4332      	orrs	r2, r6
 800306c:	619a      	str	r2, [r3, #24]
 800306e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003070:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	4033      	ands	r3, r6
 8003074:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(BLU_TX_GPIO_Port, &GPIO_InitStruct);
 8003076:	4811      	ldr	r0, [pc, #68]	; (80030bc <HAL_UART_MspInit+0xec>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(BLU_TX_GPIO_Port, &GPIO_InitStruct);
 800307e:	f000 fc53 	bl	8003928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLU_RX_Pin;
 8003082:	2308      	movs	r3, #8
    HAL_GPIO_Init(BLU_RX_GPIO_Port, &GPIO_InitStruct);
 8003084:	a904      	add	r1, sp, #16
 8003086:	480d      	ldr	r0, [pc, #52]	; (80030bc <HAL_UART_MspInit+0xec>)
    GPIO_InitStruct.Pin = BLU_RX_Pin;
 8003088:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(BLU_RX_GPIO_Port, &GPIO_InitStruct);
 800308e:	f000 fc4b 	bl	8003928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003092:	4622      	mov	r2, r4
 8003094:	2105      	movs	r1, #5
 8003096:	2026      	movs	r0, #38	; 0x26
 8003098:	f000 fb72 	bl	8003780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800309c:	2026      	movs	r0, #38	; 0x26
 800309e:	f000 fbad 	bl	80037fc <HAL_NVIC_EnableIRQ>
}
 80030a2:	b008      	add	sp, #32
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
 80030a6:	bf00      	nop
 80030a8:	40013800 	.word	0x40013800
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40010c00 	.word	0x40010c00
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40010800 	.word	0x40010800

080030c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c0:	f7ff fd82 	bl	8002bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030c6:	490c      	ldr	r1, [pc, #48]	; (80030f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030c8:	4a0c      	ldr	r2, [pc, #48]	; (80030fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030cc:	e002      	b.n	80030d4 <LoopCopyDataInit>

080030ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030d2:	3304      	adds	r3, #4

080030d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d8:	d3f9      	bcc.n	80030ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030dc:	4c09      	ldr	r4, [pc, #36]	; (8003104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e0:	e001      	b.n	80030e6 <LoopFillZerobss>

080030e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030e4:	3204      	adds	r2, #4

080030e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e8:	d3fb      	bcc.n	80030e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030ea:	f003 fe53 	bl	8006d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ee:	f7ff fa1d 	bl	800252c <main>
  bx lr
 80030f2:	4770      	bx	lr
  ldr r0, =_sdata
 80030f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80030fc:	080075c8 	.word	0x080075c8
  ldr r2, =_sbss
 8003100:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003104:	200014c4 	.word	0x200014c4

08003108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003108:	e7fe      	b.n	8003108 <ADC1_2_IRQHandler>
	...

0800310c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800310c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800310e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003112:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_InitTick+0x3c>)
{
 8003114:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003116:	7811      	ldrb	r1, [r2, #0]
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_InitTick+0x40>)
 800311a:	fbb3 f3f1 	udiv	r3, r3, r1
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fbb2 f0f3 	udiv	r0, r2, r3
 8003124:	f000 fb78 	bl	8003818 <HAL_SYSTICK_Config>
 8003128:	b908      	cbnz	r0, 800312e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	2d0f      	cmp	r5, #15
 800312c:	d901      	bls.n	8003132 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800312e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003130:	bd38      	pop	{r3, r4, r5, pc}
 8003132:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	4602      	mov	r2, r0
 8003136:	4629      	mov	r1, r5
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f000 fb20 	bl	8003780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_InitTick+0x44>)
 8003142:	4620      	mov	r0, r4
 8003144:	601d      	str	r5, [r3, #0]
}
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	20000094 	.word	0x20000094
 800314c:	20000090 	.word	0x20000090
 8003150:	20000098 	.word	0x20000098

08003154 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003154:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_Init+0x20>)
{
 8003156:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003158:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315c:	f043 0310 	orr.w	r3, r3, #16
 8003160:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003162:	f000 fafb 	bl	800375c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003166:	200f      	movs	r0, #15
 8003168:	f7ff ffd0 	bl	800310c <HAL_InitTick>
  HAL_MspInit();
 800316c:	f7ff fcda 	bl	8002b24 <HAL_MspInit>
}
 8003170:	2000      	movs	r0, #0
 8003172:	bd08      	pop	{r3, pc}
 8003174:	40022000 	.word	0x40022000

08003178 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003178:	4a03      	ldr	r2, [pc, #12]	; (8003188 <HAL_IncTick+0x10>)
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_IncTick+0x14>)
 800317c:	6811      	ldr	r1, [r2, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	440b      	add	r3, r1
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000640 	.word	0x20000640
 800318c:	20000094 	.word	0x20000094

08003190 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <HAL_GetTick+0x8>)
 8003192:	6818      	ldr	r0, [r3, #0]
}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000640 	.word	0x20000640

0800319c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	4606      	mov	r6, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80031a0:	2500      	movs	r5, #0
{
 80031a2:	b083      	sub	sp, #12
 80031a4:	460c      	mov	r4, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80031a6:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80031a8:	f7ff fff2 	bl	8003190 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	05d7      	lsls	r7, r2, #23
 80031b2:	d472      	bmi.n	800329a <HAL_ADC_PollForConversion+0xfe>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4607      	mov	r7, r0
 80031b8:	05d5      	lsls	r5, r2, #23
 80031ba:	d403      	bmi.n	80031c4 <HAL_ADC_PollForConversion+0x28>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80031bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031be:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80031c2:	d01e      	beq.n	8003202 <HAL_ADC_PollForConversion+0x66>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031c4:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_ADC_PollForConversion+0x154>)
 80031c6:	2002      	movs	r0, #2
 80031c8:	681d      	ldr	r5, [r3, #0]
 80031ca:	f001 fd55 	bl	8004c78 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80031ce:	6833      	ldr	r3, [r6, #0]
 80031d0:	4a48      	ldr	r2, [pc, #288]	; (80032f4 <HAL_ADC_PollForConversion+0x158>)
 80031d2:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031d4:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80031d8:	4211      	tst	r1, r2
 80031da:	d125      	bne.n	8003228 <HAL_ADC_PollForConversion+0x8c>
 80031dc:	68d9      	ldr	r1, [r3, #12]
 80031de:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80031e2:	4211      	tst	r1, r2
 80031e4:	d120      	bne.n	8003228 <HAL_ADC_PollForConversion+0x8c>
 80031e6:	6919      	ldr	r1, [r3, #16]
 80031e8:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <HAL_ADC_PollForConversion+0x15c>)
 80031ea:	4211      	tst	r1, r2
 80031ec:	d17e      	bne.n	80032ec <HAL_ADC_PollForConversion+0x150>
 80031ee:	68d9      	ldr	r1, [r3, #12]
 80031f0:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80031f4:	4211      	tst	r1, r2
 80031f6:	bf14      	ite	ne
 80031f8:	2229      	movne	r2, #41	; 0x29
 80031fa:	2214      	moveq	r2, #20
 80031fc:	e01e      	b.n	800323c <HAL_ADC_PollForConversion+0xa0>
      if(Timeout != HAL_MAX_DELAY)
 80031fe:	1c60      	adds	r0, r4, #1
 8003200:	d154      	bne.n	80032ac <HAL_ADC_PollForConversion+0x110>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	0791      	lsls	r1, r2, #30
 8003206:	d5fa      	bpl.n	80031fe <HAL_ADC_PollForConversion+0x62>
      Conversion_Timeout_CPU_cycles ++;
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003208:	f06f 0212 	mvn.w	r2, #18
 800320c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	62b2      	str	r2, [r6, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800321c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003220:	d055      	beq.n	80032ce <HAL_ADC_PollForConversion+0x132>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003222:	2000      	movs	r0, #0
}
 8003224:	b003      	add	sp, #12
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003228:	6919      	ldr	r1, [r3, #16]
 800322a:	4a33      	ldr	r2, [pc, #204]	; (80032f8 <HAL_ADC_PollForConversion+0x15c>)
 800322c:	4211      	tst	r1, r2
 800322e:	d12a      	bne.n	8003286 <HAL_ADC_PollForConversion+0xea>
 8003230:	68d9      	ldr	r1, [r3, #12]
 8003232:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8003236:	4211      	tst	r1, r2
 8003238:	d125      	bne.n	8003286 <HAL_ADC_PollForConversion+0xea>
 800323a:	2254      	movs	r2, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800323c:	fb02 f505 	mul.w	r5, r2, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003240:	9a01      	ldr	r2, [sp, #4]
 8003242:	4295      	cmp	r5, r2
 8003244:	d809      	bhi.n	800325a <HAL_ADC_PollForConversion+0xbe>
 8003246:	e7df      	b.n	8003208 <HAL_ADC_PollForConversion+0x6c>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003248:	9b01      	ldr	r3, [sp, #4]
 800324a:	42ab      	cmp	r3, r5
 800324c:	d311      	bcc.n	8003272 <HAL_ADC_PollForConversion+0xd6>
      Conversion_Timeout_CPU_cycles ++;
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	3301      	adds	r3, #1
 8003252:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	42ab      	cmp	r3, r5
 8003258:	d237      	bcs.n	80032ca <HAL_ADC_PollForConversion+0x12e>
      if(Timeout != HAL_MAX_DELAY)
 800325a:	1c62      	adds	r2, r4, #1
 800325c:	d0f7      	beq.n	800324e <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800325e:	2c00      	cmp	r4, #0
 8003260:	d0f2      	beq.n	8003248 <HAL_ADC_PollForConversion+0xac>
 8003262:	f7ff ff95 	bl	8003190 <HAL_GetTick>
 8003266:	1bc0      	subs	r0, r0, r7
 8003268:	42a0      	cmp	r0, r4
 800326a:	d9f0      	bls.n	800324e <HAL_ADC_PollForConversion+0xb2>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800326c:	9b01      	ldr	r3, [sp, #4]
 800326e:	42ab      	cmp	r3, r5
 8003270:	d2ed      	bcs.n	800324e <HAL_ADC_PollForConversion+0xb2>
            __HAL_UNLOCK(hadc);
 8003272:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003276:	6ab3      	ldr	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8003278:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8003282:	b003      	add	sp, #12
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003286:	6919      	ldr	r1, [r3, #16]
 8003288:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_ADC_PollForConversion+0x160>)
 800328a:	4211      	tst	r1, r2
 800328c:	d114      	bne.n	80032b8 <HAL_ADC_PollForConversion+0x11c>
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	4211      	tst	r1, r2
 8003292:	bf14      	ite	ne
 8003294:	22fc      	movne	r2, #252	; 0xfc
 8003296:	2254      	moveq	r2, #84	; 0x54
 8003298:	e7d0      	b.n	800323c <HAL_ADC_PollForConversion+0xa0>
    return HAL_ERROR;
 800329a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800329e:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a2:	f043 0320 	orr.w	r3, r3, #32
 80032a6:	62b3      	str	r3, [r6, #40]	; 0x28
}
 80032a8:	b003      	add	sp, #12
 80032aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032ac:	b934      	cbnz	r4, 80032bc <HAL_ADC_PollForConversion+0x120>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f012 0202 	ands.w	r2, r2, #2
 80032b4:	d1a5      	bne.n	8003202 <HAL_ADC_PollForConversion+0x66>
 80032b6:	e7dd      	b.n	8003274 <HAL_ADC_PollForConversion+0xd8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032b8:	22fc      	movs	r2, #252	; 0xfc
 80032ba:	e7bf      	b.n	800323c <HAL_ADC_PollForConversion+0xa0>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032bc:	f7ff ff68 	bl	8003190 <HAL_GetTick>
 80032c0:	1bc3      	subs	r3, r0, r7
 80032c2:	42a3      	cmp	r3, r4
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032c4:	6833      	ldr	r3, [r6, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032c6:	d99c      	bls.n	8003202 <HAL_ADC_PollForConversion+0x66>
 80032c8:	e7f1      	b.n	80032ae <HAL_ADC_PollForConversion+0x112>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032ca:	6833      	ldr	r3, [r6, #0]
 80032cc:	e79c      	b.n	8003208 <HAL_ADC_PollForConversion+0x6c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032ce:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d1a6      	bne.n	8003222 <HAL_ADC_PollForConversion+0x86>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032da:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032de:	04db      	lsls	r3, r3, #19
 80032e0:	d49f      	bmi.n	8003222 <HAL_ADC_PollForConversion+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	62b3      	str	r3, [r6, #40]	; 0x28
 80032ea:	e79b      	b.n	8003224 <HAL_ADC_PollForConversion+0x88>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032ec:	2229      	movs	r2, #41	; 0x29
 80032ee:	e7a5      	b.n	800323c <HAL_ADC_PollForConversion+0xa0>
 80032f0:	20000090 	.word	0x20000090
 80032f4:	24924924 	.word	0x24924924
 80032f8:	12492492 	.word	0x12492492
 80032fc:	00249249 	.word	0x00249249

08003300 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003308:	2300      	movs	r3, #0
{ 
 800330a:	b530      	push	{r4, r5, lr}
 800330c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800330e:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003310:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003314:	2b01      	cmp	r3, #1
 8003316:	d074      	beq.n	8003402 <HAL_ADC_ConfigChannel+0xfa>
 8003318:	2301      	movs	r3, #1
 800331a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800331e:	684b      	ldr	r3, [r1, #4]
 8003320:	4602      	mov	r2, r0
 8003322:	2b06      	cmp	r3, #6
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003324:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8003326:	d932      	bls.n	800338e <HAL_ADC_ConfigChannel+0x86>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003328:	2b0c      	cmp	r3, #12
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800332a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 800332e:	d84e      	bhi.n	80033ce <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003330:	f04f 0c1f 	mov.w	ip, #31
 8003334:	6808      	ldr	r0, [r1, #0]
 8003336:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003338:	3b23      	subs	r3, #35	; 0x23
 800333a:	fa00 fe03 	lsl.w	lr, r0, r3
 800333e:	fa0c f303 	lsl.w	r3, ip, r3
 8003342:	ea25 0303 	bic.w	r3, r5, r3
 8003346:	ea43 030e 	orr.w	r3, r3, lr
 800334a:	6323      	str	r3, [r4, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800334c:	2809      	cmp	r0, #9
 800334e:	d930      	bls.n	80033b2 <HAL_ADC_ConfigChannel+0xaa>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003350:	f04f 0c07 	mov.w	ip, #7
 8003354:	688d      	ldr	r5, [r1, #8]
 8003356:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800335a:	68e3      	ldr	r3, [r4, #12]
 800335c:	391e      	subs	r1, #30
 800335e:	408d      	lsls	r5, r1
 8003360:	fa0c f101 	lsl.w	r1, ip, r1
 8003364:	ea23 0301 	bic.w	r3, r3, r1
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003368:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800336c:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800336e:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003370:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003372:	d844      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0xf6>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003374:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_ADC_ConfigChannel+0x128>)
 8003376:	429c      	cmp	r4, r3
 8003378:	d038      	beq.n	80033ec <HAL_ADC_ConfigChannel+0xe4>
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      
      tmp_hal_status = HAL_ERROR;
 800337a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800337e:	f043 0320 	orr.w	r3, r3, #32
 8003382:	6293      	str	r3, [r2, #40]	; 0x28
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003384:	2300      	movs	r3, #0
 8003386:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800338a:	b003      	add	sp, #12
 800338c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800338e:	f04f 0c1f 	mov.w	ip, #31
 8003392:	6808      	ldr	r0, [r1, #0]
 8003394:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003398:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800339a:	3b05      	subs	r3, #5
 800339c:	fa00 fe03 	lsl.w	lr, r0, r3
 80033a0:	fa0c f303 	lsl.w	r3, ip, r3
 80033a4:	ea25 0303 	bic.w	r3, r5, r3
 80033a8:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033ac:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033ae:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033b0:	d8ce      	bhi.n	8003350 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033b2:	2507      	movs	r5, #7
 80033b4:	6889      	ldr	r1, [r1, #8]
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033bc:	4081      	lsls	r1, r0
 80033be:	fa05 f000 	lsl.w	r0, r5, r0
 80033c2:	ea23 0300 	bic.w	r3, r3, r0
 80033c6:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c8:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033ca:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033cc:	e7da      	b.n	8003384 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033ce:	f04f 0c1f 	mov.w	ip, #31
 80033d2:	6808      	ldr	r0, [r1, #0]
 80033d4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80033d6:	3b41      	subs	r3, #65	; 0x41
 80033d8:	fa00 fe03 	lsl.w	lr, r0, r3
 80033dc:	fa0c f303 	lsl.w	r3, ip, r3
 80033e0:	ea25 0303 	bic.w	r3, r5, r3
 80033e4:	ea43 030e 	orr.w	r3, r3, lr
 80033e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033ea:	e7af      	b.n	800334c <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033ec:	68a3      	ldr	r3, [r4, #8]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	d405      	bmi.n	80033fe <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033f2:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fa:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033fc:	d004      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033fe:	2000      	movs	r0, #0
 8003400:	e7c0      	b.n	8003384 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8003402:	2002      	movs	r0, #2
}
 8003404:	b003      	add	sp, #12
 8003406:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_ADC_ConfigChannel+0x12c>)
 800340a:	490b      	ldr	r1, [pc, #44]	; (8003438 <HAL_ADC_ConfigChannel+0x130>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fba1 1303 	umull	r1, r3, r1, r3
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ed      	beq.n	80033fe <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8003422:	9b01      	ldr	r3, [sp, #4]
 8003424:	3b01      	subs	r3, #1
 8003426:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003428:	9b01      	ldr	r3, [sp, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f9      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x11a>
 800342e:	e7e6      	b.n	80033fe <HAL_ADC_ConfigChannel+0xf6>
 8003430:	40012400 	.word	0x40012400
 8003434:	20000090 	.word	0x20000090
 8003438:	431bde83 	.word	0x431bde83

0800343c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800343c:	2300      	movs	r3, #0
{
 800343e:	b530      	push	{r4, r5, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003440:	6802      	ldr	r2, [r0, #0]
{
 8003442:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003444:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003446:	6893      	ldr	r3, [r2, #8]
 8003448:	07d9      	lsls	r1, r3, #31
 800344a:	d427      	bmi.n	800349c <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <ADC_Enable+0x80>)
 800344e:	4604      	mov	r4, r0
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	481b      	ldr	r0, [pc, #108]	; (80034c0 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8003454:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003456:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 800345a:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800345e:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8003460:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003462:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003464:	9b01      	ldr	r3, [sp, #4]
 8003466:	b12b      	cbz	r3, 8003474 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8003468:	9b01      	ldr	r3, [sp, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800346e:	9b01      	ldr	r3, [sp, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003474:	f7ff fe8c 	bl	8003190 <HAL_GetTick>

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003478:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800347a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	07da      	lsls	r2, r3, #31
 8003480:	d40c      	bmi.n	800349c <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003482:	f7ff fe85 	bl	8003190 <HAL_GetTick>
 8003486:	1b43      	subs	r3, r0, r5
 8003488:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800348a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800348c:	d903      	bls.n	8003496 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	f012 0201 	ands.w	r2, r2, #1
 8003494:	d005      	beq.n	80034a2 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	07db      	lsls	r3, r3, #31
 800349a:	d5f2      	bpl.n	8003482 <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800349c:	2000      	movs	r0, #0
}
 800349e:	b003      	add	sp, #12
 80034a0:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 80034a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80034a6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034aa:	f043 0310 	orr.w	r3, r3, #16
 80034ae:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034b2:	4303      	orrs	r3, r0
 80034b4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80034b6:	b003      	add	sp, #12
 80034b8:	bd30      	pop	{r4, r5, pc}
 80034ba:	bf00      	nop
 80034bc:	20000090 	.word	0x20000090
 80034c0:	431bde83 	.word	0x431bde83

080034c4 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80034c4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d038      	beq.n	800353e <HAL_ADC_Start+0x7a>
 80034cc:	2301      	movs	r3, #1
{
 80034ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80034d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80034d4:	4604      	mov	r4, r0
 80034d6:	f7ff ffb1 	bl	800343c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80034da:	bb60      	cbnz	r0, 8003536 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 80034dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	4929      	ldr	r1, [pc, #164]	; (8003588 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034ee:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 80034f0:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034f2:	d026      	beq.n	8003542 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034fa:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034fc:	6853      	ldr	r3, [r2, #4]
 80034fe:	0559      	lsls	r1, r3, #21
 8003500:	d42b      	bmi.n	800355a <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8003504:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003506:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800350a:	bf18      	it	ne
 800350c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800350e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003512:	bf18      	it	ne
 8003514:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003518:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800351a:	f06f 0302 	mvn.w	r3, #2
 800351e:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003520:	6893      	ldr	r3, [r2, #8]
 8003522:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003526:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800352a:	d01d      	beq.n	8003568 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800352c:	6893      	ldr	r3, [r2, #8]
 800352e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003532:	6093      	str	r3, [r2, #8]
}
 8003534:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8003536:	2300      	movs	r3, #0
 8003538:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800353c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800353e:	2002      	movs	r0, #2
}
 8003540:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_ADC_Start+0xc8>)
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800354a:	d0d3      	beq.n	80034f4 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800354c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800354e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003552:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	055b      	lsls	r3, r3, #21
 8003558:	d5d3      	bpl.n	8003502 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800355a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800355c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003560:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003564:	62a3      	str	r3, [r4, #40]	; 0x28
 8003566:	e7cc      	b.n	8003502 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_ADC_Start+0xc4>)
 800356a:	429a      	cmp	r2, r3
 800356c:	d004      	beq.n	8003578 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800356e:	6893      	ldr	r3, [r2, #8]
 8003570:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8003574:	6093      	str	r3, [r2, #8]
}
 8003576:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003578:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800357c:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800357e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8003582:	d1d3      	bne.n	800352c <HAL_ADC_Start+0x68>
 8003584:	e7f3      	b.n	800356e <HAL_ADC_Start+0xaa>
 8003586:	bf00      	nop
 8003588:	40012800 	.word	0x40012800
 800358c:	40012400 	.word	0x40012400

08003590 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003590:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003592:	6803      	ldr	r3, [r0, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	07d4      	lsls	r4, r2, #31
 8003598:	d401      	bmi.n	800359e <ADC_ConversionStop_Disable+0xe>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800359a:	2000      	movs	r0, #0
}
 800359c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800359e:	4604      	mov	r4, r0
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80035a8:	f7ff fdf2 	bl	8003190 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035ac:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80035ae:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	07d9      	lsls	r1, r3, #31
 80035b4:	d5f1      	bpl.n	800359a <ADC_ConversionStop_Disable+0xa>
 80035b6:	e002      	b.n	80035be <ADC_ConversionStop_Disable+0x2e>
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	07db      	lsls	r3, r3, #31
 80035bc:	d5ed      	bpl.n	800359a <ADC_ConversionStop_Disable+0xa>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035be:	f7ff fde7 	bl	8003190 <HAL_GetTick>
 80035c2:	1b43      	subs	r3, r0, r5
 80035c4:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035c6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035c8:	d9f6      	bls.n	80035b8 <ADC_ConversionStop_Disable+0x28>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	07d2      	lsls	r2, r2, #31
 80035ce:	d5f3      	bpl.n	80035b8 <ADC_ConversionStop_Disable+0x28>
          return HAL_ERROR;
 80035d0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035dc:	4303      	orrs	r3, r0
 80035de:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
 80035e2:	bf00      	nop

080035e4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d06d      	beq.n	80036c4 <HAL_ADC_Init+0xe0>
{
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035ec:	4604      	mov	r4, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04f      	beq.n	8003692 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035f2:	4620      	mov	r0, r4
 80035f4:	f7ff ffcc 	bl	8003590 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80035f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035fa:	f013 0310 	ands.w	r3, r3, #16
 80035fe:	d142      	bne.n	8003686 <HAL_ADC_Init+0xa2>
 8003600:	2800      	cmp	r0, #0
 8003602:	d140      	bne.n	8003686 <HAL_ADC_Init+0xa2>
    ADC_STATE_CLR_SET(hadc->State,
 8003604:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003606:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8003608:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800360c:	f022 0202 	bic.w	r2, r2, #2
 8003610:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003614:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003616:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003618:	69e2      	ldr	r2, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800361a:	7b26      	ldrb	r6, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800361c:	4311      	orrs	r1, r2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800361e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003622:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003626:	d03a      	beq.n	800369e <HAL_ADC_Init+0xba>
 8003628:	f1a5 0c01 	sub.w	ip, r5, #1
 800362c:	fabc fc8c 	clz	ip, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003630:	7d22      	ldrb	r2, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003632:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003636:	2a01      	cmp	r2, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003638:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800363c:	d04e      	beq.n	80036dc <HAL_ADC_Init+0xf8>
      MODIFY_REG(hadc->Instance->CR1,
 800363e:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 8003640:	4e37      	ldr	r6, [pc, #220]	; (8003720 <HAL_ADC_Init+0x13c>)
      MODIFY_REG(hadc->Instance->CR1,
 8003642:	6857      	ldr	r7, [r2, #4]
 8003644:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8003648:	ea47 070c 	orr.w	r7, r7, ip
 800364c:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800364e:	6897      	ldr	r7, [r2, #8]
 8003650:	403e      	ands	r6, r7
 8003652:	430e      	orrs	r6, r1
 8003654:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003656:	2d01      	cmp	r5, #1
 8003658:	d030      	beq.n	80036bc <HAL_ADC_Init+0xd8>
    MODIFY_REG(hadc->Instance->SQR1,
 800365a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800365c:	f425 0c70 	bic.w	ip, r5, #15728640	; 0xf00000
 8003660:	ea4c 0303 	orr.w	r3, ip, r3
 8003664:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <HAL_ADC_Init+0x140>)
 800366a:	4013      	ands	r3, r2
 800366c:	4299      	cmp	r1, r3
 800366e:	d02b      	beq.n	80036c8 <HAL_ADC_Init+0xe4>
      tmp_hal_status = HAL_ERROR;
 8003670:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8003672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003674:	f023 0312 	bic.w	r3, r3, #18
 8003678:	f043 0310 	orr.w	r3, r3, #16
 800367c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003680:	4303      	orrs	r3, r0
 8003682:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8003684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003688:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	f043 0310 	orr.w	r3, r3, #16
 800368e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8003692:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003694:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003698:	f7fe fa68 	bl	8001b6c <HAL_ADC_MspInit>
 800369c:	e7a9      	b.n	80035f2 <HAL_ADC_Init+0xe>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800369e:	7d22      	ldrb	r2, [r4, #20]
 80036a0:	2a01      	cmp	r2, #1
 80036a2:	d01a      	beq.n	80036da <HAL_ADC_Init+0xf6>
      MODIFY_REG(hadc->Instance->CR1,
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	6853      	ldr	r3, [r2, #4]
 80036a8:	f423 4369 	bic.w	r3, r3, #59648	; 0xe900
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80036b2:	6895      	ldr	r5, [r2, #8]
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_ADC_Init+0x13c>)
 80036b6:	402b      	ands	r3, r5
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6093      	str	r3, [r2, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	3b01      	subs	r3, #1
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	e7ca      	b.n	800365a <HAL_ADC_Init+0x76>
    return HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
}
 80036c6:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80036c8:	2300      	movs	r3, #0
 80036ca:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80036cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80036d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80036da:	46ac      	mov	ip, r5
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80036dc:	b1ce      	cbz	r6, 8003712 <HAL_ADC_Init+0x12e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	62e2      	str	r2, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 80036ee:	6822      	ldr	r2, [r4, #0]
      MODIFY_REG(hadc->Instance->CR2,
 80036f0:	4e0b      	ldr	r6, [pc, #44]	; (8003720 <HAL_ADC_Init+0x13c>)
      MODIFY_REG(hadc->Instance->CR1,
 80036f2:	6857      	ldr	r7, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036f4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80036f8:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 80036fc:	ea47 070c 	orr.w	r7, r7, ip
 8003700:	6057      	str	r7, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003702:	6897      	ldr	r7, [r2, #8]
 8003704:	ea06 0607 	and.w	r6, r6, r7
 8003708:	ea46 0601 	orr.w	r6, r6, r1
 800370c:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800370e:	d1a2      	bne.n	8003656 <HAL_ADC_Init+0x72>
 8003710:	e7d4      	b.n	80036bc <HAL_ADC_Init+0xd8>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003712:	69a2      	ldr	r2, [r4, #24]
 8003714:	3a01      	subs	r2, #1
 8003716:	ea4c 3242 	orr.w	r2, ip, r2, lsl #13
 800371a:	f442 6c00 	orr.w	ip, r2, #2048	; 0x800
 800371e:	e7e6      	b.n	80036ee <HAL_ADC_Init+0x10a>
 8003720:	ffe1f7fd 	.word	0xffe1f7fd
 8003724:	ff1f0efe 	.word	0xff1f0efe

08003728 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003728:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800372c:	2b01      	cmp	r3, #1
 800372e:	d013      	beq.n	8003758 <HAL_ADC_Stop+0x30>
 8003730:	2301      	movs	r3, #1
{
 8003732:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8003734:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003738:	4604      	mov	r4, r0
 800373a:	f7ff ff29 	bl	8003590 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800373e:	b938      	cbnz	r0, 8003750 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8003740:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003742:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8003750:	2300      	movs	r3, #0
 8003752:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003756:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003758:	2002      	movs	r0, #2
}
 800375a:	4770      	bx	lr

0800375c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4906      	ldr	r1, [pc, #24]	; (800377c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003762:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003778:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b500      	push	{lr}
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378a:	f1c3 0e07 	rsb	lr, r3, #7
 800378e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003792:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003796:	bf28      	it	cs
 8003798:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379c:	f1bc 0f06 	cmp.w	ip, #6
 80037a0:	d91b      	bls.n	80037da <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a2:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	fa0c fc03 	lsl.w	ip, ip, r3
 80037ac:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 3cff 	mov.w	ip, #4294967295
 80037b4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80037b8:	ea21 010c 	bic.w	r1, r1, ip
 80037bc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80037be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80037c4:	db0c      	blt.n	80037e0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c6:	0109      	lsls	r1, r1, #4
 80037c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80037cc:	b2c9      	uxtb	r1, r1
 80037ce:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80037d2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80037d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037da:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037dc:	4613      	mov	r3, r2
 80037de:	e7e7      	b.n	80037b0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_NVIC_SetPriority+0x78>)
 80037e2:	f000 000f 	and.w	r0, r0, #15
 80037e6:	0109      	lsls	r1, r1, #4
 80037e8:	b2c9      	uxtb	r1, r1
 80037ea:	4403      	add	r3, r0
 80037ec:	7619      	strb	r1, [r3, #24]
 80037ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80037f2:	bf00      	nop
 80037f4:	e000ed00 	.word	0xe000ed00
 80037f8:	e000ecfc 	.word	0xe000ecfc

080037fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037fc:	2800      	cmp	r0, #0
 80037fe:	db07      	blt.n	8003810 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003800:	2301      	movs	r3, #1
 8003802:	f000 011f 	and.w	r1, r0, #31
 8003806:	4a03      	ldr	r2, [pc, #12]	; (8003814 <HAL_NVIC_EnableIRQ+0x18>)
 8003808:	0940      	lsrs	r0, r0, #5
 800380a:	408b      	lsls	r3, r1
 800380c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100

08003818 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	3801      	subs	r0, #1
 800381a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800381e:	d20f      	bcs.n	8003840 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003820:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003828:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382a:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382c:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382e:	4c05      	ldr	r4, [pc, #20]	; (8003844 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003830:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003836:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800383a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383c:	6119      	str	r1, [r3, #16]
 800383e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003840:	2001      	movs	r0, #1
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800384c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800384e:	2a02      	cmp	r2, #2
 8003850:	d006      	beq.n	8003860 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003852:	2204      	movs	r2, #4
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003856:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 8003858:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800385a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 800385e:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003860:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003864:	681a      	ldr	r2, [r3, #0]
  return status; 
 8003866:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003868:	6811      	ldr	r1, [r2, #0]
 800386a:	f021 010e 	bic.w	r1, r1, #14
 800386e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003870:	6811      	ldr	r1, [r2, #0]
 8003872:	f021 0101 	bic.w	r1, r1, #1
 8003876:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003878:	e9d3 120f 	ldrd	r1, r2, [r3, #60]	; 0x3c
 800387c:	fa0c f202 	lsl.w	r2, ip, r2
 8003880:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003882:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003884:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8003888:	f883 2020 	strb.w	r2, [r3, #32]
}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003890:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8003894:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003896:	2a02      	cmp	r2, #2
 8003898:	d003      	beq.n	80038a2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389a:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 800389c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80038a0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a2:	6802      	ldr	r2, [r0, #0]
{  
 80038a4:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a6:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038a8:	481c      	ldr	r0, [pc, #112]	; (800391c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038aa:	f021 010e 	bic.w	r1, r1, #14
 80038ae:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80038b0:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038b2:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 80038b4:	f021 0101 	bic.w	r1, r1, #1
 80038b8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038ba:	d024      	beq.n	8003906 <HAL_DMA_Abort_IT+0x76>
 80038bc:	4918      	ldr	r1, [pc, #96]	; (8003920 <HAL_DMA_Abort_IT+0x90>)
 80038be:	428a      	cmp	r2, r1
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_Abort_IT+0x6e>
 80038c2:	3114      	adds	r1, #20
 80038c4:	428a      	cmp	r2, r1
 80038c6:	d020      	beq.n	800390a <HAL_DMA_Abort_IT+0x7a>
 80038c8:	3114      	adds	r1, #20
 80038ca:	428a      	cmp	r2, r1
 80038cc:	d020      	beq.n	8003910 <HAL_DMA_Abort_IT+0x80>
 80038ce:	3114      	adds	r1, #20
 80038d0:	428a      	cmp	r2, r1
 80038d2:	d020      	beq.n	8003916 <HAL_DMA_Abort_IT+0x86>
 80038d4:	3114      	adds	r1, #20
 80038d6:	428a      	cmp	r2, r1
 80038d8:	bf0c      	ite	eq
 80038da:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80038de:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 80038e2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80038e4:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038e6:	480f      	ldr	r0, [pc, #60]	; (8003924 <HAL_DMA_Abort_IT+0x94>)
 80038e8:	6042      	str	r2, [r0, #4]
    if(hdma->XferAbortCallback != NULL)
 80038ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80038ec:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80038f0:	f883 4020 	strb.w	r4, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80038f4:	b12a      	cbz	r2, 8003902 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 80038f6:	4618      	mov	r0, r3
 80038f8:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	4620      	mov	r0, r4
}
 80038fc:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038fe:	2210      	movs	r2, #16
 8003900:	e7ef      	b.n	80038e2 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	4610      	mov	r0, r2
}
 8003904:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003906:	2201      	movs	r2, #1
 8003908:	e7eb      	b.n	80038e2 <HAL_DMA_Abort_IT+0x52>
 800390a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800390e:	e7e8      	b.n	80038e2 <HAL_DMA_Abort_IT+0x52>
 8003910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003914:	e7e5      	b.n	80038e2 <HAL_DMA_Abort_IT+0x52>
 8003916:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800391a:	e7e2      	b.n	80038e2 <HAL_DMA_Abort_IT+0x52>
 800391c:	40020008 	.word	0x40020008
 8003920:	4002001c 	.word	0x4002001c
 8003924:	40020000 	.word	0x40020000

08003928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800392c:	680e      	ldr	r6, [r1, #0]
{
 800392e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003930:	2e00      	cmp	r6, #0
 8003932:	f000 80b1 	beq.w	8003a98 <HAL_GPIO_Init+0x170>
 8003936:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003938:	4f74      	ldr	r7, [pc, #464]	; (8003b0c <HAL_GPIO_Init+0x1e4>)
  uint32_t config = 0x00u;
 800393a:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 800393c:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800393e:	4d74      	ldr	r5, [pc, #464]	; (8003b10 <HAL_GPIO_Init+0x1e8>)
      switch (GPIO_Init->Mode)
 8003940:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8003b14 <HAL_GPIO_Init+0x1ec>
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8003946:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003948:	fa36 f403 	lsrs.w	r4, r6, r3
 800394c:	f102 0204 	add.w	r2, r2, #4
 8003950:	f000 80a2 	beq.w	8003a98 <HAL_GPIO_Init+0x170>
    ioposition = (0x01uL << position);
 8003954:	2401      	movs	r4, #1
 8003956:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8003958:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800395c:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8003960:	d1f1      	bne.n	8003946 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003962:	684e      	ldr	r6, [r1, #4]
 8003964:	2e12      	cmp	r6, #18
 8003966:	f200 809a 	bhi.w	8003a9e <HAL_GPIO_Init+0x176>
 800396a:	2e12      	cmp	r6, #18
 800396c:	d81a      	bhi.n	80039a4 <HAL_GPIO_Init+0x7c>
 800396e:	e8df f006 	tbb	[pc, r6]
 8003972:	b9a3      	.short	0xb9a3
 8003974:	1919c3b5 	.word	0x1919c3b5
 8003978:	19191919 	.word	0x19191919
 800397c:	19191919 	.word	0x19191919
 8003980:	b1191919 	.word	0xb1191919
 8003984:	ad          	.byte	0xad
 8003985:	00          	.byte	0x00
 8003986:	f8df e190 	ldr.w	lr, [pc, #400]	; 8003b18 <HAL_GPIO_Init+0x1f0>
 800398a:	4576      	cmp	r6, lr
 800398c:	f000 8094 	beq.w	8003ab8 <HAL_GPIO_Init+0x190>
 8003990:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8003994:	4576      	cmp	r6, lr
 8003996:	f000 808f 	beq.w	8003ab8 <HAL_GPIO_Init+0x190>
 800399a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800399e:	4576      	cmp	r6, lr
 80039a0:	f000 808a 	beq.w	8003ab8 <HAL_GPIO_Init+0x190>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80039a8:	bf9c      	itt	ls
 80039aa:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039ac:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039ae:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039b2:	bf84      	itt	hi
 80039b4:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039b8:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039bc:	f8de 4000 	ldr.w	r4, [lr]
 80039c0:	fa0a f90b 	lsl.w	r9, sl, fp
 80039c4:	fa06 fb0b 	lsl.w	fp, r6, fp
 80039c8:	ea24 040b 	bic.w	r4, r4, fp
 80039cc:	ea44 0409 	orr.w	r4, r4, r9
 80039d0:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039d4:	684c      	ldr	r4, [r1, #4]
 80039d6:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80039da:	d075      	beq.n	8003ac8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039dc:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039e0:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039e4:	f04e 0e01 	orr.w	lr, lr, #1
 80039e8:	f8c7 e018 	str.w	lr, [r7, #24]
 80039ec:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039f4:	f00e 0e01 	and.w	lr, lr, #1
 80039f8:	f8cd e004 	str.w	lr, [sp, #4]
 80039fc:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003a00:	f023 0e03 	bic.w	lr, r3, #3
 8003a04:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8003a08:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003a0c:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a10:	fa06 f609 	lsl.w	r6, r6, r9
 8003a14:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a18:	f8df b100 	ldr.w	fp, [pc, #256]	; 8003b1c <HAL_GPIO_Init+0x1f4>
 8003a1c:	4558      	cmp	r0, fp
 8003a1e:	d00f      	beq.n	8003a40 <HAL_GPIO_Init+0x118>
 8003a20:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8003a24:	4558      	cmp	r0, fp
 8003a26:	d060      	beq.n	8003aea <HAL_GPIO_Init+0x1c2>
 8003a28:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8003b20 <HAL_GPIO_Init+0x1f8>
 8003a2c:	4558      	cmp	r0, fp
 8003a2e:	bf0c      	ite	eq
 8003a30:	f04f 0b02 	moveq.w	fp, #2
 8003a34:	f04f 0b03 	movne.w	fp, #3
 8003a38:	fa0b f909 	lsl.w	r9, fp, r9
 8003a3c:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003a40:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a44:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a46:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a4a:	bf14      	ite	ne
 8003a4c:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a50:	ea26 060c 	biceq.w	r6, r6, ip
 8003a54:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a56:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a58:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a5c:	bf14      	ite	ne
 8003a5e:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a62:	ea26 060c 	biceq.w	r6, r6, ip
 8003a66:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8003a68:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a6a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003a6e:	bf14      	ite	ne
 8003a70:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a74:	ea26 060c 	biceq.w	r6, r6, ip
 8003a78:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a7a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003a7e:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a80:	d01f      	beq.n	8003ac2 <HAL_GPIO_Init+0x19a>
          SET_BIT(EXTI->IMR, iocurrent);
 8003a82:	ea44 040c 	orr.w	r4, r4, ip
 8003a86:	602c      	str	r4, [r5, #0]
 8003a88:	680e      	ldr	r6, [r1, #0]
	position++;
 8003a8a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a8c:	fa36 f403 	lsrs.w	r4, r6, r3
 8003a90:	f102 0204 	add.w	r2, r2, #4
 8003a94:	f47f af5e 	bne.w	8003954 <HAL_GPIO_Init+0x2c>
  }
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8003a9e:	4546      	cmp	r6, r8
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_GPIO_Init+0x190>
 8003aa2:	f67f af70 	bls.w	8003986 <HAL_GPIO_Init+0x5e>
 8003aa6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003b24 <HAL_GPIO_Init+0x1fc>
 8003aaa:	4576      	cmp	r6, lr
 8003aac:	d004      	beq.n	8003ab8 <HAL_GPIO_Init+0x190>
 8003aae:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8003ab2:	4576      	cmp	r6, lr
 8003ab4:	f47f af76 	bne.w	80039a4 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ab8:	688e      	ldr	r6, [r1, #8]
 8003aba:	bb06      	cbnz	r6, 8003afe <HAL_GPIO_Init+0x1d6>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003abc:	f04f 0a04 	mov.w	sl, #4
 8003ac0:	e770      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ac2:	ea24 040c 	bic.w	r4, r4, ip
 8003ac6:	602c      	str	r4, [r5, #0]
 8003ac8:	680e      	ldr	r6, [r1, #0]
 8003aca:	e73c      	b.n	8003946 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003acc:	68cc      	ldr	r4, [r1, #12]
 8003ace:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8003ad2:	e767      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ad4:	68cc      	ldr	r4, [r1, #12]
 8003ad6:	f104 0a04 	add.w	sl, r4, #4
          break;
 8003ada:	e763      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003adc:	68cc      	ldr	r4, [r1, #12]
 8003ade:	f104 0a08 	add.w	sl, r4, #8
          break;
 8003ae2:	e75f      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ae4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8003ae8:	e75c      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003aea:	f04f 0b01 	mov.w	fp, #1
 8003aee:	fa0b f909 	lsl.w	r9, fp, r9
 8003af2:	ea46 0609 	orr.w	r6, r6, r9
 8003af6:	e7a3      	b.n	8003a40 <HAL_GPIO_Init+0x118>
      switch (GPIO_Init->Mode)
 8003af8:	f04f 0a00 	mov.w	sl, #0
 8003afc:	e752      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003afe:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b00:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8003b04:	bf0c      	ite	eq
 8003b06:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8003b08:	6144      	strne	r4, [r0, #20]
 8003b0a:	e74b      	b.n	80039a4 <HAL_GPIO_Init+0x7c>
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40010400 	.word	0x40010400
 8003b14:	10220000 	.word	0x10220000
 8003b18:	10120000 	.word	0x10120000
 8003b1c:	40010800 	.word	0x40010800
 8003b20:	40011000 	.word	0x40011000
 8003b24:	10310000 	.word	0x10310000

08003b28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b28:	6883      	ldr	r3, [r0, #8]
 8003b2a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003b2c:	bf14      	ite	ne
 8003b2e:	2001      	movne	r0, #1
 8003b30:	2000      	moveq	r0, #0
 8003b32:	4770      	bx	lr

08003b34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b34:	b902      	cbnz	r2, 8003b38 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b36:	0409      	lsls	r1, r1, #16
 8003b38:	6101      	str	r1, [r0, #16]
  }
}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b3c:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b3e:	ea01 0203 	and.w	r2, r1, r3
 8003b42:	ea21 0103 	bic.w	r1, r1, r3
 8003b46:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b4a:	6101      	str	r1, [r0, #16]
}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop

08003b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b54:	4616      	mov	r6, r2
 8003b56:	4681      	mov	r9, r0
 8003b58:	460d      	mov	r5, r1
 8003b5a:	461f      	mov	r7, r3
 8003b5c:	6802      	ldr	r2, [r0, #0]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8003b62:	e001      	b.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	1c7b      	adds	r3, r7, #1
 8003b66:	d113      	bne.n	8003b90 <I2C_WaitOnFlagUntilTimeout+0x40>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	f1b8 0f01 	cmp.w	r8, #1
 8003b6c:	bf0b      	itete	eq
 8003b6e:	6953      	ldreq	r3, [r2, #20]
 8003b70:	6994      	ldrne	r4, [r2, #24]
 8003b72:	ea25 0c03 	biceq.w	ip, r5, r3
 8003b76:	ea25 0c04 	bicne.w	ip, r5, r4
 8003b7a:	fa1f fc8c 	uxth.w	ip, ip
 8003b7e:	fabc fc8c 	clz	ip, ip
 8003b82:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003b86:	45b4      	cmp	ip, r6
 8003b88:	d0ec      	beq.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0x14>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003b8a:	2000      	movs	r0, #0
}
 8003b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7ff fafe 	bl	8003190 <HAL_GetTick>
 8003b94:	9b08      	ldr	r3, [sp, #32]
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b96:	f8d9 2000 	ldr.w	r2, [r9]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	1ac0      	subs	r0, r0, r3
 8003b9c:	42b8      	cmp	r0, r7
 8003b9e:	d91e      	bls.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x8e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ba0:	f1b8 0f01 	cmp.w	r8, #1
 8003ba4:	bf0c      	ite	eq
 8003ba6:	6953      	ldreq	r3, [r2, #20]
 8003ba8:	6993      	ldrne	r3, [r2, #24]
 8003baa:	ea25 0303 	bic.w	r3, r5, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	fab3 f383 	clz	r3, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	42b3      	cmp	r3, r6
 8003bb8:	d1d6      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0x18>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bba:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bbc:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bbe:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bc2:	f889 303d 	strb.w	r3, [r9, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bc6:	f889 203e 	strb.w	r2, [r9, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bca:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
          return HAL_ERROR;
 8003bce:	2001      	movs	r0, #1
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	f043 0320 	orr.w	r3, r3, #32
          __HAL_UNLOCK(hi2c);
 8003bd4:	f889 203c 	strb.w	r2, [r9, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
          return HAL_ERROR;
 8003bdc:	e7d6      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	2f00      	cmp	r7, #0
 8003be0:	d0de      	beq.n	8003ba0 <I2C_WaitOnFlagUntilTimeout+0x50>
 8003be2:	e7c1      	b.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0x18>

08003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003be8:	4680      	mov	r8, r0
 8003bea:	460e      	mov	r6, r1
 8003bec:	4617      	mov	r7, r2
 8003bee:	4699      	mov	r9, r3
 8003bf0:	6804      	ldr	r4, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	e004      	b.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	6965      	ldr	r5, [r4, #20]
 8003bf6:	056a      	lsls	r2, r5, #21
 8003bf8:	d409      	bmi.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2a>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	1c7b      	adds	r3, r7, #1
 8003bfc:	d121      	bne.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bfe:	6960      	ldr	r0, [r4, #20]
 8003c00:	ea26 0000 	bic.w	r0, r6, r0
 8003c04:	b280      	uxth	r0, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d1f4      	bne.n	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
}
 8003c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c10:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 8003c18:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c26:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2a:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2e:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c32:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 8003c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7ff faa5 	bl	8003190 <HAL_GetTick>
 8003c46:	eba0 0009 	sub.w	r0, r0, r9
 8003c4a:	42b8      	cmp	r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c4c:	f8d8 4000 	ldr.w	r4, [r8]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	d801      	bhi.n	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
 8003c52:	2f00      	cmp	r7, #0
 8003c54:	d1d3      	bne.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c56:	6963      	ldr	r3, [r4, #20]
 8003c58:	ea26 0303 	bic.w	r3, r6, r3
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0cd      	beq.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1a>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c64:	2320      	movs	r3, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c66:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c6a:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c72:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
          return HAL_ERROR;
 8003c76:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	f043 0320 	orr.w	r3, r3, #32
          __HAL_UNLOCK(hi2c);
 8003c7c:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
          return HAL_ERROR;
 8003c84:	e7c1      	b.n	8003c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x26>
 8003c86:	bf00      	nop

08003c88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c8a:	6803      	ldr	r3, [r0, #0]
{
 8003c8c:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	0654      	lsls	r4, r2, #25
 8003c92:	d423      	bmi.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003c94:	4606      	mov	r6, r0
 8003c96:	460d      	mov	r5, r1
 8003c98:	e00d      	b.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9a:	f7ff fa79 	bl	8003190 <HAL_GetTick>
 8003c9e:	1bc0      	subs	r0, r0, r7
 8003ca0:	42a8      	cmp	r0, r5
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ca2:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	d800      	bhi.n	8003ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x20>
 8003ca6:	b91d      	cbnz	r5, 8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ca8:	695c      	ldr	r4, [r3, #20]
 8003caa:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8003cae:	d017      	beq.n	8003ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	0652      	lsls	r2, r2, #25
 8003cb4:	d412      	bmi.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	06d1      	lsls	r1, r2, #27
 8003cba:	d5ee      	bpl.n	8003c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbc:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cbe:	f06f 0410 	mvn.w	r4, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc4:	615c      	str	r4, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc6:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc8:	f886 103d 	strb.w	r1, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cd0:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003cd2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      return HAL_ERROR;
 8003cd6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cd8:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8003cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003cdc:	2000      	movs	r0, #0
}
 8003cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce2:	6334      	str	r4, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce4:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce8:	f886 403e 	strb.w	r4, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003cee:	f886 403c 	strb.w	r4, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8003cf6:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cfc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	4605      	mov	r5, r0
 8003d00:	460e      	mov	r6, r1
 8003d02:	4617      	mov	r7, r2
 8003d04:	6804      	ldr	r4, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d06:	e001      	b.n	8003d0c <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003d08:	1c73      	adds	r3, r6, #1
 8003d0a:	d119      	bne.n	8003d40 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d0c:	6963      	ldr	r3, [r4, #20]
 8003d0e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003d12:	d113      	bne.n	8003d3c <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d14:	6960      	ldr	r0, [r4, #20]
 8003d16:	0542      	lsls	r2, r0, #21
 8003d18:	d5f6      	bpl.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d22:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d28:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d2c:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d32:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003d36:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d38:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
}
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d40:	f7ff fa26 	bl	8003190 <HAL_GetTick>
 8003d44:	1bc0      	subs	r0, r0, r7
 8003d46:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d48:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	d801      	bhi.n	8003d50 <I2C_WaitOnTXEFlagUntilTimeout+0x54>
 8003d4c:	2e00      	cmp	r6, #0
 8003d4e:	d1dd      	bne.n	8003d0c <I2C_WaitOnTXEFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d50:	6963      	ldr	r3, [r4, #20]
 8003d52:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003d56:	d1d9      	bne.n	8003d0c <I2C_WaitOnTXEFlagUntilTimeout+0x10>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5a:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d5c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          __HAL_UNLOCK(hi2c);
 8003d64:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	6c2b      	ldr	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003d6a:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d72:	bf00      	nop

08003d74 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	4605      	mov	r5, r0
 8003d78:	460e      	mov	r6, r1
 8003d7a:	4617      	mov	r7, r2
 8003d7c:	6804      	ldr	r4, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d7e:	e001      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	1c73      	adds	r3, r6, #1
 8003d82:	d119      	bne.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d84:	6963      	ldr	r3, [r4, #20]
 8003d86:	f013 0304 	ands.w	r3, r3, #4
 8003d8a:	d113      	bne.n	8003db4 <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8c:	6960      	ldr	r0, [r4, #20]
 8003d8e:	0542      	lsls	r2, r0, #21
 8003d90:	d5f6      	bpl.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d92:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d96:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d98:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003da6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003daa:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 8003dae:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003db0:	642a      	str	r2, [r5, #64]	; 0x40
}
 8003db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003db4:	2000      	movs	r0, #0
}
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db8:	f7ff f9ea 	bl	8003190 <HAL_GetTick>
 8003dbc:	1bc0      	subs	r0, r0, r7
 8003dbe:	42b0      	cmp	r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dc0:	682c      	ldr	r4, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc2:	d801      	bhi.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x54>
 8003dc4:	2e00      	cmp	r6, #0
 8003dc6:	d1dd      	bne.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dc8:	6963      	ldr	r3, [r4, #20]
 8003dca:	f013 0304 	ands.w	r3, r3, #4
 8003dce:	d1d9      	bne.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          __HAL_UNLOCK(hi2c);
 8003ddc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8003de2:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de4:	4313      	orrs	r3, r2
 8003de6:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dea:	bf00      	nop

08003dec <I2C_RequestMemoryWrite>:
{
 8003dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	6805      	ldr	r5, [r0, #0]
{
 8003df2:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df4:	682b      	ldr	r3, [r5, #0]
{
 8003df6:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 8003e02:	4688      	mov	r8, r1
 8003e04:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e06:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003e08:	e001      	b.n	8003e0e <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	1c70      	adds	r0, r6, #1
 8003e0c:	d110      	bne.n	8003e30 <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0e:	696c      	ldr	r4, [r5, #20]
 8003e10:	07e3      	lsls	r3, r4, #31
 8003e12:	d5fa      	bpl.n	8003e0a <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e14:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8003e18:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	4653      	mov	r3, sl
 8003e1e:	4638      	mov	r0, r7
 8003e20:	4930      	ldr	r1, [pc, #192]	; (8003ee4 <I2C_RequestMemoryWrite+0xf8>)
 8003e22:	f7ff fedf 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e26:	b320      	cbz	r0, 8003e72 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8003e28:	2001      	movs	r0, #1
}
 8003e2a:	b003      	add	sp, #12
 8003e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7ff f9ae 	bl	8003190 <HAL_GetTick>
 8003e34:	eba0 000a 	sub.w	r0, r0, sl
 8003e38:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e3a:	683d      	ldr	r5, [r7, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	d230      	bcs.n	8003ea0 <I2C_RequestMemoryWrite+0xb4>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e3e:	696b      	ldr	r3, [r5, #20]
 8003e40:	07d9      	lsls	r1, r3, #31
 8003e42:	d4e4      	bmi.n	8003e0e <I2C_RequestMemoryWrite+0x22>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e44:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e46:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e48:	633a      	str	r2, [r7, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e4e:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003e54:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	f043 0320 	orr.w	r3, r3, #32
 8003e5c:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5e:	682b      	ldr	r3, [r5, #0]
 8003e60:	05da      	lsls	r2, r3, #23
 8003e62:	d523      	bpl.n	8003eac <I2C_RequestMemoryWrite+0xc0>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e64:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003e68:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6a:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	9001      	str	r0, [sp, #4]
 8003e76:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	9101      	str	r1, [sp, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e80:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e82:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	f7ff ff39 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e8a:	bb08      	cbnz	r0, 8003ed0 <I2C_RequestMemoryWrite+0xe4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8c:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e90:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e92:	d10f      	bne.n	8003eb4 <I2C_RequestMemoryWrite+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e94:	fa5f f289 	uxtb.w	r2, r9
 8003e98:	611a      	str	r2, [r3, #16]
}
 8003e9a:	b003      	add	sp, #12
 8003e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea0:	2e00      	cmp	r6, #0
 8003ea2:	d1b4      	bne.n	8003e0e <I2C_RequestMemoryWrite+0x22>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea4:	696b      	ldr	r3, [r5, #20]
 8003ea6:	07d9      	lsls	r1, r3, #31
 8003ea8:	d4b1      	bmi.n	8003e0e <I2C_RequestMemoryWrite+0x22>
 8003eaa:	e7cb      	b.n	8003e44 <I2C_RequestMemoryWrite+0x58>
    return HAL_TIMEOUT;
 8003eac:	2003      	movs	r0, #3
}
 8003eae:	b003      	add	sp, #12
 8003eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eb4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8003eb8:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	4652      	mov	r2, sl
 8003ebc:	4631      	mov	r1, r6
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f7ff ff1c 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	b920      	cbnz	r0, 8003ed0 <I2C_RequestMemoryWrite+0xe4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	fa5f f389 	uxtb.w	r3, r9
 8003ecc:	6113      	str	r3, [r2, #16]
 8003ece:	e7ac      	b.n	8003e2a <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d1a8      	bne.n	8003e28 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed6:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 8003ed8:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e7a2      	b.n	8003e2a <I2C_RequestMemoryWrite+0x3e>
 8003ee4:	00010002 	.word	0x00010002

08003ee8 <I2C_RequestMemoryRead>:
{
 8003ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eec:	6805      	ldr	r5, [r0, #0]
{
 8003eee:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	682b      	ldr	r3, [r5, #0]
{
 8003ef2:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ef8:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efa:	682b      	ldr	r3, [r5, #0]
{
 8003efc:	4607      	mov	r7, r0
 8003efe:	e9dd 6a0e 	ldrd	r6, sl, [sp, #56]	; 0x38
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003f06:	4688      	mov	r8, r1
 8003f08:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0a:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003f0c:	e001      	b.n	8003f12 <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	1c74      	adds	r4, r6, #1
 8003f10:	d112      	bne.n	8003f38 <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f12:	696c      	ldr	r4, [r5, #20]
 8003f14:	07e2      	lsls	r2, r4, #31
 8003f16:	d5fa      	bpl.n	8003f0e <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f18:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8003f1c:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1e:	4632      	mov	r2, r6
 8003f20:	4653      	mov	r3, sl
 8003f22:	4638      	mov	r0, r7
 8003f24:	4944      	ldr	r1, [pc, #272]	; (8004038 <I2C_RequestMemoryRead+0x150>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f26:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2a:	f7ff fe5b 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2e:	b320      	cbz	r0, 8003f7a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8003f30:	2001      	movs	r0, #1
}
 8003f32:	b005      	add	sp, #20
 8003f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f38:	f7ff f92a 	bl	8003190 <HAL_GetTick>
 8003f3c:	eba0 000a 	sub.w	r0, r0, sl
 8003f40:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f42:	683d      	ldr	r5, [r7, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	d250      	bcs.n	8003fe8 <I2C_RequestMemoryRead+0x100>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f46:	696b      	ldr	r3, [r5, #20]
 8003f48:	07d8      	lsls	r0, r3, #31
 8003f4a:	d4e2      	bmi.n	8003f12 <I2C_RequestMemoryRead+0x2a>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f4c:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f4e:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f50:	633a      	str	r2, [r7, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f56:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003f5c:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	f043 0320 	orr.w	r3, r3, #32
 8003f64:	643b      	str	r3, [r7, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	05d9      	lsls	r1, r3, #23
 8003f6a:	d551      	bpl.n	8004010 <I2C_RequestMemoryRead+0x128>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003f70:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
}
 8003f74:	b005      	add	sp, #20
 8003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9003      	str	r0, [sp, #12]
 8003f7e:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f80:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f82:	9103      	str	r1, [sp, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f86:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f88:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8a:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	f7ff feb5 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f92:	bb78      	cbnz	r0, 8003ff4 <I2C_RequestMemoryRead+0x10c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f94:	f1bb 0f01 	cmp.w	fp, #1
 8003f98:	d13e      	bne.n	8004018 <I2C_RequestMemoryRead+0x130>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	fa5f f289 	uxtb.w	r2, r9
 8003fa0:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	4652      	mov	r2, sl
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	f7ff fea8 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	bb10      	cbnz	r0, 8003ff4 <I2C_RequestMemoryRead+0x10c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fae:	4602      	mov	r2, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb0:	6838      	ldr	r0, [r7, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb2:	4633      	mov	r3, r6
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb4:	6801      	ldr	r1, [r0, #0]
 8003fb6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003fba:	6001      	str	r1, [r0, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f8cd a000 	str.w	sl, [sp]
 8003fc6:	f7ff fdc3 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003fca:	b9e8      	cbnz	r0, 8004008 <I2C_RequestMemoryRead+0x120>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fcc:	683c      	ldr	r4, [r7, #0]
 8003fce:	f048 0101 	orr.w	r1, r8, #1
 8003fd2:	6121      	str	r1, [r4, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd4:	4653      	mov	r3, sl
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	4638      	mov	r0, r7
 8003fda:	4917      	ldr	r1, [pc, #92]	; (8004038 <I2C_RequestMemoryRead+0x150>)
 8003fdc:	f7ff fe02 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003fe0:	3800      	subs	r0, #0
 8003fe2:	bf18      	it	ne
 8003fe4:	2001      	movne	r0, #1
 8003fe6:	e7a4      	b.n	8003f32 <I2C_RequestMemoryRead+0x4a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	d192      	bne.n	8003f12 <I2C_RequestMemoryRead+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fec:	696b      	ldr	r3, [r5, #20]
 8003fee:	07d8      	lsls	r0, r3, #31
 8003ff0:	d48f      	bmi.n	8003f12 <I2C_RequestMemoryRead+0x2a>
 8003ff2:	e7ab      	b.n	8003f4c <I2C_RequestMemoryRead+0x64>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d19a      	bne.n	8003f30 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffa:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 8003ffc:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	6813      	ldr	r3, [r2, #0]
 8004000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e794      	b.n	8003f32 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	d4ad      	bmi.n	8003f6c <I2C_RequestMemoryRead+0x84>
    return HAL_TIMEOUT;
 8004010:	2003      	movs	r0, #3
}
 8004012:	b005      	add	sp, #20
 8004014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800401e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004020:	4631      	mov	r1, r6
 8004022:	4652      	mov	r2, sl
 8004024:	4638      	mov	r0, r7
 8004026:	f7ff fe69 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 800402a:	2800      	cmp	r0, #0
 800402c:	d1e2      	bne.n	8003ff4 <I2C_RequestMemoryRead+0x10c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	fa5f f389 	uxtb.w	r3, r9
 8004034:	6113      	str	r3, [r2, #16]
 8004036:	e7b4      	b.n	8003fa2 <I2C_RequestMemoryRead+0xba>
 8004038:	00010002 	.word	0x00010002

0800403c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800403c:	2800      	cmp	r0, #0
 800403e:	f000 80b7 	beq.w	80041b0 <HAL_I2C_Init+0x174>
{
 8004042:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004044:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004048:	4604      	mov	r4, r0
 800404a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 8096 	beq.w	8004180 <HAL_I2C_Init+0x144>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004054:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8004056:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004058:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004072:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004074:	f000 fd5e 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004078:	6865      	ldr	r5, [r4, #4]
 800407a:	4b4e      	ldr	r3, [pc, #312]	; (80041b4 <HAL_I2C_Init+0x178>)
 800407c:	429d      	cmp	r5, r3
 800407e:	d84d      	bhi.n	800411c <HAL_I2C_Init+0xe0>
 8004080:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <HAL_I2C_Init+0x17c>)
 8004082:	4298      	cmp	r0, r3
 8004084:	d97a      	bls.n	800417c <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004086:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8004088:	4d4c      	ldr	r5, [pc, #304]	; (80041bc <HAL_I2C_Init+0x180>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800408a:	f640 7cfc 	movw	ip, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 800408e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004092:	1e43      	subs	r3, r0, #1
 8004094:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004098:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800409a:	0ca8      	lsrs	r0, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409c:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409e:	3001      	adds	r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80040a4:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80040a8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040aa:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040ac:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ae:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80040b2:	4301      	orrs	r1, r0
 80040b4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040b6:	69d1      	ldr	r1, [r2, #28]
 80040b8:	ea13 0f0c 	tst.w	r3, ip
 80040bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80040c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80040c4:	d161      	bne.n	800418a <HAL_I2C_Init+0x14e>
 80040c6:	2304      	movs	r3, #4
 80040c8:	430b      	orrs	r3, r1
 80040ca:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040cc:	6811      	ldr	r1, [r2, #0]
 80040ce:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80040d2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80040d6:	4303      	orrs	r3, r0
 80040d8:	430b      	orrs	r3, r1
 80040da:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040dc:	6891      	ldr	r1, [r2, #8]
 80040de:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80040e2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80040e6:	4303      	orrs	r3, r0
 80040e8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040f0:	68d0      	ldr	r0, [r2, #12]
 80040f2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80040f6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80040fa:	430b      	orrs	r3, r1
 80040fc:	4303      	orrs	r3, r0
 80040fe:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004100:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004102:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800410a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800410e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8004118:	4608      	mov	r0, r1
}
 800411a:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_I2C_Init+0x184>)
 800411e:	4298      	cmp	r0, r3
 8004120:	d92c      	bls.n	800417c <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004122:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_I2C_Init+0x180>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004128:	4926      	ldr	r1, [pc, #152]	; (80041c4 <HAL_I2C_Init+0x188>)
  freqrange = I2C_FREQRANGE(pclk1);
 800412a:	fba3 3c00 	umull	r3, ip, r3, r0
 800412e:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004132:	fb02 f303 	mul.w	r3, r2, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004136:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004138:	fba1 1303 	umull	r1, r3, r1, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800413c:	6851      	ldr	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800413e:	099b      	lsrs	r3, r3, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004140:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004144:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8004148:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800414a:	6a11      	ldr	r1, [r2, #32]
 800414c:	3301      	adds	r3, #1
 800414e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004152:	430b      	orrs	r3, r1
 8004154:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004156:	69d1      	ldr	r1, [r2, #28]
 8004158:	68a3      	ldr	r3, [r4, #8]
 800415a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800415e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004162:	b9ab      	cbnz	r3, 8004190 <HAL_I2C_Init+0x154>
 8004164:	1e43      	subs	r3, r0, #1
 8004166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800416a:	fbb3 f3f5 	udiv	r3, r3, r5
 800416e:	3301      	adds	r3, #1
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	b1d3      	cbz	r3, 80041ac <HAL_I2C_Init+0x170>
 8004176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800417a:	e7a5      	b.n	80040c8 <HAL_I2C_Init+0x8c>
    return HAL_ERROR;
 800417c:	2001      	movs	r0, #1
}
 800417e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004180:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004184:	f7fd fe10 	bl	8001da8 <HAL_I2C_MspInit>
 8004188:	e764      	b.n	8004054 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800418a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418e:	e79b      	b.n	80040c8 <HAL_I2C_Init+0x8c>
 8004190:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004194:	1e43      	subs	r3, r0, #1
 8004196:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800419a:	fbb3 f3f5 	udiv	r3, r3, r5
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	b113      	cbz	r3, 80041ac <HAL_I2C_Init+0x170>
 80041a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041aa:	e78d      	b.n	80040c8 <HAL_I2C_Init+0x8c>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e78b      	b.n	80040c8 <HAL_I2C_Init+0x8c>
    return HAL_ERROR;
 80041b0:	2001      	movs	r0, #1
}
 80041b2:	4770      	bx	lr
 80041b4:	000186a0 	.word	0x000186a0
 80041b8:	001e847f 	.word	0x001e847f
 80041bc:	431bde83 	.word	0x431bde83
 80041c0:	003d08ff 	.word	0x003d08ff
 80041c4:	10624dd3 	.word	0x10624dd3

080041c8 <HAL_I2C_Mem_Write>:
{
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	4604      	mov	r4, r0
 80041ce:	b082      	sub	sp, #8
 80041d0:	4699      	mov	r9, r3
 80041d2:	460d      	mov	r5, r1
 80041d4:	4690      	mov	r8, r2
 80041d6:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80041da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7fe ffd8 	bl	8003190 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d003      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 80041e8:	2002      	movs	r0, #2
}
 80041ea:	b002      	add	sp, #8
 80041ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f0:	4606      	mov	r6, r0
 80041f2:	9000      	str	r0, [sp, #0]
 80041f4:	2319      	movs	r3, #25
 80041f6:	2201      	movs	r2, #1
 80041f8:	4620      	mov	r0, r4
 80041fa:	4943      	ldr	r1, [pc, #268]	; (8004308 <HAL_I2C_Mem_Write+0x140>)
 80041fc:	f7ff fca8 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8004200:	2800      	cmp	r0, #0
 8004202:	d1f1      	bne.n	80041e8 <HAL_I2C_Mem_Write+0x20>
    __HAL_LOCK(hi2c);
 8004204:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d0ed      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x20>
 800420c:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800420e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004210:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004214:	6803      	ldr	r3, [r0, #0]
 8004216:	07da      	lsls	r2, r3, #31
 8004218:	d566      	bpl.n	80042e8 <HAL_I2C_Mem_Write+0x120>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800421a:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800421c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004220:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004224:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004228:	4629      	mov	r1, r5
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422a:	6805      	ldr	r5, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800422c:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422e:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8004232:	6005      	str	r5, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004234:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004236:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004238:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800423c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004240:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004248:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800424e:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004250:	482e      	ldr	r0, [pc, #184]	; (800430c <HAL_I2C_Mem_Write+0x144>)
 8004252:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004254:	4620      	mov	r0, r4
 8004256:	f7ff fdc9 	bl	8003dec <I2C_RequestMemoryWrite>
 800425a:	2800      	cmp	r0, #0
 800425c:	d140      	bne.n	80042e0 <HAL_I2C_Mem_Write+0x118>
    while (hi2c->XferSize > 0U)
 800425e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02a      	beq.n	80042ba <HAL_I2C_Mem_Write+0xf2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004264:	4632      	mov	r2, r6
 8004266:	4639      	mov	r1, r7
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff fd47 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 800426e:	2800      	cmp	r0, #0
 8004270:	d13f      	bne.n	80042f2 <HAL_I2C_Mem_Write+0x12a>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004272:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	4605      	mov	r5, r0
 8004278:	f815 3b01 	ldrb.w	r3, [r5], #1
      hi2c->XferSize--;
 800427c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004280:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8004282:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004284:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->XferCount--;
 8004288:	3b01      	subs	r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800428e:	6953      	ldr	r3, [r2, #20]
      hi2c->XferSize--;
 8004290:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004292:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8004294:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004296:	6265      	str	r5, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004298:	d50d      	bpl.n	80042b6 <HAL_I2C_Mem_Write+0xee>
 800429a:	b171      	cbz	r1, 80042ba <HAL_I2C_Mem_Write+0xf2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429c:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800429e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a2:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80042a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80042a6:	fa1f f18c 	uxth.w	r1, ip
        hi2c->XferCount--;
 80042aa:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80042ac:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80042ae:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80042b0:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80042b2:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80042b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042b6:	2900      	cmp	r1, #0
 80042b8:	d1d4      	bne.n	8004264 <HAL_I2C_Mem_Write+0x9c>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	4632      	mov	r2, r6
 80042bc:	4639      	mov	r1, r7
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fd58 	bl	8003d74 <I2C_WaitOnBTFFlagUntilTimeout>
 80042c4:	b9a8      	cbnz	r0, 80042f2 <HAL_I2C_Mem_Write+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042d0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80042d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80042de:	e784      	b.n	80041ea <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80042e0:	2001      	movs	r0, #1
}
 80042e2:	b002      	add	sp, #8
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 80042e8:	6803      	ldr	r3, [r0, #0]
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6003      	str	r3, [r0, #0]
 80042f0:	e793      	b.n	800421a <HAL_I2C_Mem_Write+0x52>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d1f3      	bne.n	80042e0 <HAL_I2C_Mem_Write+0x118>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80042fa:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	6813      	ldr	r3, [r2, #0]
 80042fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e771      	b.n	80041ea <HAL_I2C_Mem_Write+0x22>
 8004306:	bf00      	nop
 8004308:	00100002 	.word	0x00100002
 800430c:	ffff0000 	.word	0xffff0000

08004310 <HAL_I2C_Mem_Read>:
{
 8004310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count = 0U;
 8004314:	2400      	movs	r4, #0
{
 8004316:	b088      	sub	sp, #32
  __IO uint32_t count = 0U;
 8004318:	9403      	str	r4, [sp, #12]
{
 800431a:	4604      	mov	r4, r0
 800431c:	4699      	mov	r9, r3
 800431e:	460e      	mov	r6, r1
 8004320:	4690      	mov	r8, r2
 8004322:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8004326:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8004328:	f7fe ff32 	bl	8003190 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800432c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004330:	2b20      	cmp	r3, #32
 8004332:	d004      	beq.n	800433e <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8004334:	2602      	movs	r6, #2
}
 8004336:	4630      	mov	r0, r6
 8004338:	b008      	add	sp, #32
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800433e:	4605      	mov	r5, r0
 8004340:	9000      	str	r0, [sp, #0]
 8004342:	2319      	movs	r3, #25
 8004344:	2201      	movs	r2, #1
 8004346:	4620      	mov	r0, r4
 8004348:	4999      	ldr	r1, [pc, #612]	; (80045b0 <HAL_I2C_Mem_Read+0x2a0>)
 800434a:	f7ff fc01 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800434e:	2800      	cmp	r0, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 8004352:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d0ec      	beq.n	8004334 <HAL_I2C_Mem_Read+0x24>
 800435a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800435e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004362:	6803      	ldr	r3, [r0, #0]
 8004364:	07d9      	lsls	r1, r3, #31
 8004366:	d539      	bpl.n	80043dc <HAL_I2C_Mem_Read+0xcc>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004368:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800436a:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800436e:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004372:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004376:	4631      	mov	r1, r6
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004378:	6806      	ldr	r6, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800437a:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437c:	f426 6600 	bic.w	r6, r6, #2048	; 0x800
 8004380:	6006      	str	r6, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8004382:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004384:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004386:	e9cd 7500 	strd	r7, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800438a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800438e:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004392:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004396:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800439c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439e:	4885      	ldr	r0, [pc, #532]	; (80045b4 <HAL_I2C_Mem_Read+0x2a4>)
 80043a0:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a2:	4620      	mov	r0, r4
 80043a4:	f7ff fda0 	bl	8003ee8 <I2C_RequestMemoryRead>
 80043a8:	4606      	mov	r6, r0
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f040 808d 	bne.w	80044ca <HAL_I2C_Mem_Read+0x1ba>
    if (hi2c->XferSize == 0U)
 80043b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043b2:	b9c3      	cbnz	r3, 80043e6 <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	9004      	str	r0, [sp, #16]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	9204      	str	r2, [sp, #16]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	9204      	str	r2, [sp, #16]
 80043c0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80043ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80043da:	e7ac      	b.n	8004336 <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 80043dc:	6803      	ldr	r3, [r0, #0]
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6003      	str	r3, [r0, #0]
 80043e4:	e7c0      	b.n	8004368 <HAL_I2C_Mem_Read+0x58>
    else if (hi2c->XferSize == 1U)
 80043e6:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e8:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 80043ea:	f000 80cf 	beq.w	800458c <HAL_I2C_Mem_Read+0x27c>
    else if (hi2c->XferSize == 2U)
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d070      	beq.n	80044d4 <HAL_I2C_Mem_Read+0x1c4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f2:	6811      	ldr	r1, [r2, #0]
 80043f4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80043f8:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	9007      	str	r0, [sp, #28]
 80043fc:	6951      	ldr	r1, [r2, #20]
 80043fe:	9107      	str	r1, [sp, #28]
 8004400:	6992      	ldr	r2, [r2, #24]
 8004402:	9207      	str	r2, [sp, #28]
 8004404:	9a07      	ldr	r2, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8004406:	2b03      	cmp	r3, #3
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004408:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80045b8 <HAL_I2C_Mem_Read+0x2a8>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800440c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80045bc <HAL_I2C_Mem_Read+0x2ac>
 8004410:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80045c0 <HAL_I2C_Mem_Read+0x2b0>
      if (hi2c->XferSize <= 3U)
 8004414:	d834      	bhi.n	8004480 <HAL_I2C_Mem_Read+0x170>
        if (hi2c->XferSize == 1U)
 8004416:	2b01      	cmp	r3, #1
 8004418:	d050      	beq.n	80044bc <HAL_I2C_Mem_Read+0x1ac>
        else if (hi2c->XferSize == 2U)
 800441a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	463b      	mov	r3, r7
 8004422:	4641      	mov	r1, r8
 8004424:	4620      	mov	r0, r4
 8004426:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8004428:	d169      	bne.n	80044fe <HAL_I2C_Mem_Read+0x1ee>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800442a:	f7ff fb91 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800442e:	2800      	cmp	r0, #0
 8004430:	d14b      	bne.n	80044ca <HAL_I2C_Mem_Read+0x1ba>
 8004432:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004444:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004446:	3b01      	subs	r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800444c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800444e:	3301      	adds	r3, #1
 8004450:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004452:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	8523      	strh	r3, [r4, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004458:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004460:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004462:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004464:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004466:	3a01      	subs	r2, #1
 8004468:	b292      	uxth	r2, r2
 800446a:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800446c:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800446e:	3b01      	subs	r3, #1
 8004470:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004472:	3201      	adds	r2, #1
          hi2c->XferSize--;
 8004474:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004476:	6262      	str	r2, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0a6      	beq.n	80043ca <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 800447c:	2b03      	cmp	r3, #3
 800447e:	d9ca      	bls.n	8004416 <HAL_I2C_Mem_Read+0x106>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004480:	462a      	mov	r2, r5
 8004482:	4639      	mov	r1, r7
 8004484:	4620      	mov	r0, r4
 8004486:	f7ff fbff 	bl	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800448a:	b9f0      	cbnz	r0, 80044ca <HAL_I2C_Mem_Read+0x1ba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004492:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004496:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8004498:	3b01      	subs	r3, #1
 800449a:	b29b      	uxth	r3, r3
 800449c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800449e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80044a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044a2:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80044a8:	f102 0c01 	add.w	ip, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044ac:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80044ae:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80044b0:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044b4:	d5e0      	bpl.n	8004478 <HAL_I2C_Mem_Read+0x168>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b6:	690b      	ldr	r3, [r1, #16]
 80044b8:	7053      	strb	r3, [r2, #1]
 80044ba:	e7d2      	b.n	8004462 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044bc:	462a      	mov	r2, r5
 80044be:	4639      	mov	r1, r7
 80044c0:	4620      	mov	r0, r4
 80044c2:	f7ff fbe1 	bl	8003c88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d0c7      	beq.n	800445a <HAL_I2C_Mem_Read+0x14a>
      return HAL_ERROR;
 80044ca:	2601      	movs	r6, #1
}
 80044cc:	4630      	mov	r0, r6
 80044ce:	b008      	add	sp, #32
 80044d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044dc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	9006      	str	r0, [sp, #24]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	9206      	str	r2, [sp, #24]
 80044e6:	699a      	ldr	r2, [r3, #24]
 80044e8:	9206      	str	r2, [sp, #24]
 80044ea:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044f4:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80044f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d184      	bne.n	8004406 <HAL_I2C_Mem_Read+0xf6>
 80044fc:	e765      	b.n	80043ca <HAL_I2C_Mem_Read+0xba>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044fe:	f7ff fb27 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8004502:	2800      	cmp	r0, #0
 8004504:	d1e1      	bne.n	80044ca <HAL_I2C_Mem_Read+0x1ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	6813      	ldr	r3, [r2, #0]
 800450a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004510:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004518:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800451a:	f8da 3000 	ldr.w	r3, [sl]
          hi2c->pBuffPtr++;
 800451e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004520:	08db      	lsrs	r3, r3, #3
 8004522:	fba9 2303 	umull	r2, r3, r9, r3
          hi2c->XferCount--;
 8004526:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 800452e:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004530:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8004534:	b292      	uxth	r2, r2
 8004536:	8562      	strh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004538:	9303      	str	r3, [sp, #12]
          hi2c->XferSize--;
 800453a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800453c:	3b01      	subs	r3, #1
 800453e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004540:	1c4b      	adds	r3, r1, #1
 8004542:	6263      	str	r3, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004544:	e003      	b.n	800454e <HAL_I2C_Mem_Read+0x23e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	0752      	lsls	r2, r2, #29
 800454c:	d417      	bmi.n	800457e <HAL_I2C_Mem_Read+0x26e>
            count--;
 800454e:	9b03      	ldr	r3, [sp, #12]
 8004550:	3b01      	subs	r3, #1
 8004552:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f5      	bne.n	8004546 <HAL_I2C_Mem_Read+0x236>
              hi2c->State               = HAL_I2C_STATE_READY;
 800455a:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800455e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004566:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004568:	f042 0220 	orr.w	r2, r2, #32
 800456c:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800456e:	b662      	cpsie	i
              return HAL_ERROR;
 8004570:	2601      	movs	r6, #1
}
 8004572:	4630      	mov	r0, r6
              __HAL_UNLOCK(hi2c);
 8004574:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004578:	b008      	add	sp, #32
 800457a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	704b      	strb	r3, [r1, #1]
 800458a:	e75b      	b.n	8004444 <HAL_I2C_Mem_Read+0x134>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004592:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004594:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	9005      	str	r0, [sp, #20]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	9205      	str	r2, [sp, #20]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	9205      	str	r2, [sp, #20]
 80045a2:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045ac:	b662      	cpsie	i
}
 80045ae:	e7a2      	b.n	80044f6 <HAL_I2C_Mem_Read+0x1e6>
 80045b0:	00100002 	.word	0x00100002
 80045b4:	ffff0000 	.word	0xffff0000
 80045b8:	00010004 	.word	0x00010004
 80045bc:	20000090 	.word	0x20000090
 80045c0:	14f8b589 	.word	0x14f8b589

080045c4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f000 81b6 	beq.w	8004936 <HAL_RCC_OscConfig+0x372>
{
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ce:	6803      	ldr	r3, [r0, #0]
 80045d0:	4604      	mov	r4, r0
 80045d2:	07dd      	lsls	r5, r3, #31
{
 80045d4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	d535      	bpl.n	8004644 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d8:	499a      	ldr	r1, [pc, #616]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 80045da:	684a      	ldr	r2, [r1, #4]
 80045dc:	f002 020c 	and.w	r2, r2, #12
 80045e0:	2a04      	cmp	r2, #4
 80045e2:	f000 80ef 	beq.w	80047c4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045e6:	684a      	ldr	r2, [r1, #4]
 80045e8:	f002 020c 	and.w	r2, r2, #12
 80045ec:	2a08      	cmp	r2, #8
 80045ee:	f000 80e5 	beq.w	80047bc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f8:	d010      	beq.n	800461c <HAL_RCC_OscConfig+0x58>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 810c 	beq.w	8004818 <HAL_RCC_OscConfig+0x254>
 8004600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004604:	f000 8182 	beq.w	800490c <HAL_RCC_OscConfig+0x348>
 8004608:	4b8e      	ldr	r3, [pc, #568]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e004      	b.n	8004626 <HAL_RCC_OscConfig+0x62>
 800461c:	4a89      	ldr	r2, [pc, #548]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fe fdb3 	bl	8003190 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	4e86      	ldr	r6, [pc, #536]	; (8004844 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800462c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e005      	b.n	800463c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe fdae 	bl	8003190 <HAL_GetTick>
 8004634:	1b40      	subs	r0, r0, r5
 8004636:	2864      	cmp	r0, #100	; 0x64
 8004638:	f200 80ea 	bhi.w	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463c:	6833      	ldr	r3, [r6, #0]
 800463e:	039a      	lsls	r2, r3, #14
 8004640:	d5f6      	bpl.n	8004630 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	079f      	lsls	r7, r3, #30
 8004646:	d528      	bpl.n	800469a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004648:	4a7e      	ldr	r2, [pc, #504]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 800464a:	6851      	ldr	r1, [r2, #4]
 800464c:	f011 0f0c 	tst.w	r1, #12
 8004650:	f000 808d 	beq.w	800476e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004654:	6851      	ldr	r1, [r2, #4]
 8004656:	f001 010c 	and.w	r1, r1, #12
 800465a:	2908      	cmp	r1, #8
 800465c:	f000 8083 	beq.w	8004766 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8118 	beq.w	8004898 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004668:	2201      	movs	r2, #1
 800466a:	4b77      	ldr	r3, [pc, #476]	; (8004848 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	4e75      	ldr	r6, [pc, #468]	; (8004844 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800466e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004670:	f7fe fd8e 	bl	8003190 <HAL_GetTick>
 8004674:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	e005      	b.n	8004684 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fe fd8a 	bl	8003190 <HAL_GetTick>
 800467c:	1b40      	subs	r0, r0, r5
 800467e:	2802      	cmp	r0, #2
 8004680:	f200 80c6 	bhi.w	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	0798      	lsls	r0, r3, #30
 8004688:	d5f6      	bpl.n	8004678 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	6833      	ldr	r3, [r6, #0]
 800468c:	6962      	ldr	r2, [r4, #20]
 800468e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004692:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004696:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	071a      	lsls	r2, r3, #28
 800469c:	d41f      	bmi.n	80046de <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469e:	075d      	lsls	r5, r3, #29
 80046a0:	d542      	bpl.n	8004728 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a2:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 80046a4:	69da      	ldr	r2, [r3, #28]
 80046a6:	00d0      	lsls	r0, r2, #3
 80046a8:	d57d      	bpl.n	80047a6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4e67      	ldr	r6, [pc, #412]	; (800484c <HAL_RCC_OscConfig+0x288>)
 80046ae:	6833      	ldr	r3, [r6, #0]
 80046b0:	05d9      	lsls	r1, r3, #23
 80046b2:	f140 809d 	bpl.w	80047f0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b6:	68e3      	ldr	r3, [r4, #12]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	f000 80fe 	beq.w	80048ba <HAL_RCC_OscConfig+0x2f6>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80ca 	beq.w	8004858 <HAL_RCC_OscConfig+0x294>
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	f000 812c 	beq.w	8004926 <HAL_RCC_OscConfig+0x362>
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	621a      	str	r2, [r3, #32]
 80046d4:	6a1a      	ldr	r2, [r3, #32]
 80046d6:	f022 0204 	bic.w	r2, r2, #4
 80046da:	621a      	str	r2, [r3, #32]
 80046dc:	e0f2      	b.n	80048c4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046de:	69a3      	ldr	r3, [r4, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d04f      	beq.n	8004784 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80046e4:	2201      	movs	r2, #1
 80046e6:	4b58      	ldr	r3, [pc, #352]	; (8004848 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e8:	4e56      	ldr	r6, [pc, #344]	; (8004844 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80046ea:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80046ee:	f7fe fd4f 	bl	8003190 <HAL_GetTick>
 80046f2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f4:	e005      	b.n	8004702 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fe fd4b 	bl	8003190 <HAL_GetTick>
 80046fa:	1b40      	subs	r0, r0, r5
 80046fc:	2802      	cmp	r0, #2
 80046fe:	f200 8087 	bhi.w	8004810 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004704:	079b      	lsls	r3, r3, #30
 8004706:	d5f6      	bpl.n	80046f6 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004708:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCC_OscConfig+0x28c>)
 800470a:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_RCC_OscConfig+0x290>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0a5b      	lsrs	r3, r3, #9
 8004714:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004716:	bf00      	nop
  }
  while (Delay --);
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	9201      	str	r2, [sp, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f9      	bne.n	8004716 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	075d      	lsls	r5, r3, #29
 8004726:	d4bc      	bmi.n	80046a2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004728:	69e0      	ldr	r0, [r4, #28]
 800472a:	b1c0      	cbz	r0, 800475e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800472c:	4d45      	ldr	r5, [pc, #276]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 800472e:	686b      	ldr	r3, [r5, #4]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	f000 80d8 	beq.w	80048ea <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800473a:	2200      	movs	r2, #0
 800473c:	4b42      	ldr	r3, [pc, #264]	; (8004848 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004740:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004742:	f000 80fa 	beq.w	800493a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8004746:	f7fe fd23 	bl	8003190 <HAL_GetTick>
 800474a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474c:	e004      	b.n	8004758 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474e:	f7fe fd1f 	bl	8003190 <HAL_GetTick>
 8004752:	1b00      	subs	r0, r0, r4
 8004754:	2802      	cmp	r0, #2
 8004756:	d85b      	bhi.n	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004758:	682b      	ldr	r3, [r5, #0]
 800475a:	019b      	lsls	r3, r3, #6
 800475c:	d4f7      	bmi.n	800474e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800475e:	2000      	movs	r0, #0
}
 8004760:	b002      	add	sp, #8
 8004762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004766:	6852      	ldr	r2, [r2, #4]
 8004768:	03d6      	lsls	r6, r2, #15
 800476a:	f53f af79 	bmi.w	8004660 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4a35      	ldr	r2, [pc, #212]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	0795      	lsls	r5, r2, #30
 8004774:	d530      	bpl.n	80047d8 <HAL_RCC_OscConfig+0x214>
 8004776:	6922      	ldr	r2, [r4, #16]
 8004778:	2a01      	cmp	r2, #1
 800477a:	d02d      	beq.n	80047d8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800477c:	2001      	movs	r0, #1
}
 800477e:	b002      	add	sp, #8
 8004780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004784:	4a30      	ldr	r2, [pc, #192]	; (8004848 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004786:	4e2f      	ldr	r6, [pc, #188]	; (8004844 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8004788:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800478c:	f7fe fd00 	bl	8003190 <HAL_GetTick>
 8004790:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004792:	e004      	b.n	800479e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004794:	f7fe fcfc 	bl	8003190 <HAL_GetTick>
 8004798:	1b40      	subs	r0, r0, r5
 800479a:	2802      	cmp	r0, #2
 800479c:	d838      	bhi.n	8004810 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80047a0:	079f      	lsls	r7, r3, #30
 80047a2:	d4f7      	bmi.n	8004794 <HAL_RCC_OscConfig+0x1d0>
 80047a4:	e7bd      	b.n	8004722 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80047a8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047ae:	61da      	str	r2, [r3, #28]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80047ba:	e777      	b.n	80046ac <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047bc:	684a      	ldr	r2, [r1, #4]
 80047be:	03d0      	lsls	r0, r2, #15
 80047c0:	f57f af17 	bpl.w	80045f2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	0391      	lsls	r1, r2, #14
 80047ca:	f57f af3b 	bpl.w	8004644 <HAL_RCC_OscConfig+0x80>
 80047ce:	6862      	ldr	r2, [r4, #4]
 80047d0:	2a00      	cmp	r2, #0
 80047d2:	f47f af37 	bne.w	8004644 <HAL_RCC_OscConfig+0x80>
 80047d6:	e7d1      	b.n	800477c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	491a      	ldr	r1, [pc, #104]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 80047da:	6960      	ldr	r0, [r4, #20]
 80047dc:	680a      	ldr	r2, [r1, #0]
 80047de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80047e2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80047e6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e8:	071a      	lsls	r2, r3, #28
 80047ea:	f57f af58 	bpl.w	800469e <HAL_RCC_OscConfig+0xda>
 80047ee:	e776      	b.n	80046de <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f0:	6833      	ldr	r3, [r6, #0]
 80047f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80047f8:	f7fe fcca 	bl	8003190 <HAL_GetTick>
 80047fc:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fe:	6833      	ldr	r3, [r6, #0]
 8004800:	05da      	lsls	r2, r3, #23
 8004802:	f53f af58 	bmi.w	80046b6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fe fcc3 	bl	8003190 <HAL_GetTick>
 800480a:	1bc0      	subs	r0, r0, r7
 800480c:	2864      	cmp	r0, #100	; 0x64
 800480e:	d9f6      	bls.n	80047fe <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8004810:	2003      	movs	r0, #3
}
 8004812:	b002      	add	sp, #8
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	4d0a      	ldr	r5, [pc, #40]	; (8004844 <HAL_RCC_OscConfig+0x280>)
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004828:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800482a:	f7fe fcb1 	bl	8003190 <HAL_GetTick>
 800482e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004830:	e004      	b.n	800483c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004832:	f7fe fcad 	bl	8003190 <HAL_GetTick>
 8004836:	1b80      	subs	r0, r0, r6
 8004838:	2864      	cmp	r0, #100	; 0x64
 800483a:	d8e9      	bhi.n	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	039b      	lsls	r3, r3, #14
 8004840:	d4f7      	bmi.n	8004832 <HAL_RCC_OscConfig+0x26e>
 8004842:	e6fe      	b.n	8004642 <HAL_RCC_OscConfig+0x7e>
 8004844:	40021000 	.word	0x40021000
 8004848:	42420000 	.word	0x42420000
 800484c:	40007000 	.word	0x40007000
 8004850:	20000090 	.word	0x20000090
 8004854:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004858:	4e50      	ldr	r6, [pc, #320]	; (800499c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485e:	6a33      	ldr	r3, [r6, #32]
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6233      	str	r3, [r6, #32]
 8004866:	6a33      	ldr	r3, [r6, #32]
 8004868:	f023 0304 	bic.w	r3, r3, #4
 800486c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800486e:	f7fe fc8f 	bl	8003190 <HAL_GetTick>
 8004872:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004874:	e004      	b.n	8004880 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fe fc8b 	bl	8003190 <HAL_GetTick>
 800487a:	1bc0      	subs	r0, r0, r7
 800487c:	4540      	cmp	r0, r8
 800487e:	d8c7      	bhi.n	8004810 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004880:	6a33      	ldr	r3, [r6, #32]
 8004882:	0798      	lsls	r0, r3, #30
 8004884:	d4f7      	bmi.n	8004876 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8004886:	2d00      	cmp	r5, #0
 8004888:	f43f af4e 	beq.w	8004728 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4a43      	ldr	r2, [pc, #268]	; (800499c <HAL_RCC_OscConfig+0x3d8>)
 800488e:	69d3      	ldr	r3, [r2, #28]
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	61d3      	str	r3, [r2, #28]
 8004896:	e747      	b.n	8004728 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8004898:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	4e40      	ldr	r6, [pc, #256]	; (800499c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 800489c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800489e:	f7fe fc77 	bl	8003190 <HAL_GetTick>
 80048a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a4:	e004      	b.n	80048b0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fe fc73 	bl	8003190 <HAL_GetTick>
 80048aa:	1b40      	subs	r0, r0, r5
 80048ac:	2802      	cmp	r0, #2
 80048ae:	d8af      	bhi.n	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	0799      	lsls	r1, r3, #30
 80048b4:	d4f7      	bmi.n	80048a6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	e6ef      	b.n	800469a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ba:	4a38      	ldr	r2, [pc, #224]	; (800499c <HAL_RCC_OscConfig+0x3d8>)
 80048bc:	6a13      	ldr	r3, [r2, #32]
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80048c4:	f7fe fc64 	bl	8003190 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4f33      	ldr	r7, [pc, #204]	; (800499c <HAL_RCC_OscConfig+0x3d8>)
 80048d0:	e004      	b.n	80048dc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fe fc5d 	bl	8003190 <HAL_GetTick>
 80048d6:	1b80      	subs	r0, r0, r6
 80048d8:	4540      	cmp	r0, r8
 80048da:	d899      	bhi.n	8004810 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	079b      	lsls	r3, r3, #30
 80048e0:	d5f7      	bpl.n	80048d2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80048e2:	2d00      	cmp	r5, #0
 80048e4:	f43f af20 	beq.w	8004728 <HAL_RCC_OscConfig+0x164>
 80048e8:	e7d0      	b.n	800488c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ea:	2801      	cmp	r0, #1
 80048ec:	f43f af38 	beq.w	8004760 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 80048f0:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	6a22      	ldr	r2, [r4, #32]
 80048f4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80048f8:	4291      	cmp	r1, r2
 80048fa:	f47f af3f 	bne.w	800477c <HAL_RCC_OscConfig+0x1b8>
 80048fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004900:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004904:	1a18      	subs	r0, r3, r0
 8004906:	bf18      	it	ne
 8004908:	2001      	movne	r0, #1
 800490a:	e729      	b.n	8004760 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004910:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e67f      	b.n	8004626 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	f042 0204 	orr.w	r2, r2, #4
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	621a      	str	r2, [r3, #32]
 8004934:	e7c6      	b.n	80048c4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8004936:	2001      	movs	r0, #1
}
 8004938:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800493a:	f7fe fc29 	bl	8003190 <HAL_GetTick>
 800493e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004940:	e005      	b.n	800494e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fe fc25 	bl	8003190 <HAL_GetTick>
 8004946:	1b80      	subs	r0, r0, r6
 8004948:	2802      	cmp	r0, #2
 800494a:	f63f af61 	bhi.w	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494e:	682b      	ldr	r3, [r5, #0]
 8004950:	0199      	lsls	r1, r3, #6
 8004952:	d4f6      	bmi.n	8004942 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004954:	6a23      	ldr	r3, [r4, #32]
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495a:	d105      	bne.n	8004968 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800495c:	686a      	ldr	r2, [r5, #4]
 800495e:	68a1      	ldr	r1, [r4, #8]
 8004960:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004964:	430a      	orrs	r2, r1
 8004966:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004968:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800496a:	4d0c      	ldr	r5, [pc, #48]	; (800499c <HAL_RCC_OscConfig+0x3d8>)
 800496c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800496e:	686a      	ldr	r2, [r5, #4]
 8004970:	430b      	orrs	r3, r1
 8004972:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8004976:	490a      	ldr	r1, [pc, #40]	; (80049a0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004978:	4313      	orrs	r3, r2
 800497a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800497c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800497e:	f7fe fc07 	bl	8003190 <HAL_GetTick>
 8004982:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004984:	e005      	b.n	8004992 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004986:	f7fe fc03 	bl	8003190 <HAL_GetTick>
 800498a:	1b00      	subs	r0, r0, r4
 800498c:	2802      	cmp	r0, #2
 800498e:	f63f af3f 	bhi.w	8004810 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	019a      	lsls	r2, r3, #6
 8004996:	d5f6      	bpl.n	8004986 <HAL_RCC_OscConfig+0x3c2>
 8004998:	e6e1      	b.n	800475e <HAL_RCC_OscConfig+0x19a>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
 80049a0:	42420000 	.word	0x42420000

080049a4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80049a4:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049a6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80049a8:	f003 010c 	and.w	r1, r3, #12
 80049ac:	2908      	cmp	r1, #8
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80049b0:	480c      	ldr	r0, [pc, #48]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80049b2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049b4:	480c      	ldr	r0, [pc, #48]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x44>)
 80049b6:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ba:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049bc:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049be:	d50a      	bpl.n	80049d6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049c0:	4908      	ldr	r1, [pc, #32]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c2:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049c4:	fb01 f000 	mul.w	r0, r1, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_RCC_GetSysClockFreq+0x48>)
 80049ca:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80049d4:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x4c>)
 80049d8:	fb03 f000 	mul.w	r0, r3, r0
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	007a1200 	.word	0x007a1200
 80049e8:	08007520 	.word	0x08007520
 80049ec:	08007530 	.word	0x08007530
 80049f0:	003d0900 	.word	0x003d0900

080049f4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049f4:	2800      	cmp	r0, #0
 80049f6:	f000 808c 	beq.w	8004b12 <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049fa:	4a49      	ldr	r2, [pc, #292]	; (8004b20 <HAL_RCC_ClockConfig+0x12c>)
{
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	4604      	mov	r4, r0
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	d20c      	bcs.n	8004a28 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	f023 0307 	bic.w	r3, r3, #7
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a18:	6813      	ldr	r3, [r2, #0]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	428b      	cmp	r3, r1
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004a22:	2001      	movs	r0, #1
}
 8004a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	0798      	lsls	r0, r3, #30
 8004a2c:	d514      	bpl.n	8004a58 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2e:	0759      	lsls	r1, r3, #29
 8004a30:	d504      	bpl.n	8004a3c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a32:	493c      	ldr	r1, [pc, #240]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
 8004a34:	684a      	ldr	r2, [r1, #4]
 8004a36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a3a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3c:	071a      	lsls	r2, r3, #28
 8004a3e:	d504      	bpl.n	8004a4a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a40:	4938      	ldr	r1, [pc, #224]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
 8004a42:	684a      	ldr	r2, [r1, #4]
 8004a44:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004a48:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4a:	4936      	ldr	r1, [pc, #216]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
 8004a4c:	68a0      	ldr	r0, [r4, #8]
 8004a4e:	684a      	ldr	r2, [r1, #4]
 8004a50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a54:	4302      	orrs	r2, r0
 8004a56:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a58:	07df      	lsls	r7, r3, #31
 8004a5a:	d520      	bpl.n	8004a9e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a60:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a64:	d057      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a66:	2a02      	cmp	r2, #2
 8004a68:	d050      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6a:	0799      	lsls	r1, r3, #30
 8004a6c:	d5d9      	bpl.n	8004a22 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4e2d      	ldr	r6, [pc, #180]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a74:	6873      	ldr	r3, [r6, #4]
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004a7e:	f7fe fb87 	bl	8003190 <HAL_GetTick>
 8004a82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a84:	e004      	b.n	8004a90 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a86:	f7fe fb83 	bl	8003190 <HAL_GetTick>
 8004a8a:	1bc0      	subs	r0, r0, r7
 8004a8c:	4540      	cmp	r0, r8
 8004a8e:	d845      	bhi.n	8004b1c <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a90:	6873      	ldr	r3, [r6, #4]
 8004a92:	6862      	ldr	r2, [r4, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a9c:	d1f3      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9e:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <HAL_RCC_ClockConfig+0x12c>)
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	42ab      	cmp	r3, r5
 8004aa8:	d909      	bls.n	8004abe <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	432b      	orrs	r3, r5
 8004ab2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab4:	6813      	ldr	r3, [r2, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	d1b1      	bne.n	8004a22 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	075a      	lsls	r2, r3, #29
 8004ac2:	d506      	bpl.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4917      	ldr	r1, [pc, #92]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
 8004ac6:	68e0      	ldr	r0, [r4, #12]
 8004ac8:	684a      	ldr	r2, [r1, #4]
 8004aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ace:	4302      	orrs	r2, r0
 8004ad0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	071b      	lsls	r3, r3, #28
 8004ad4:	d507      	bpl.n	8004ae6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
 8004ad8:	6921      	ldr	r1, [r4, #16]
 8004ada:	6853      	ldr	r3, [r2, #4]
 8004adc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004ae0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ae4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ae6:	f7ff ff5d 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <HAL_RCC_ClockConfig+0x130>)
 8004aee:	490e      	ldr	r1, [pc, #56]	; (8004b28 <HAL_RCC_ClockConfig+0x134>)
 8004af0:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8004af2:	480e      	ldr	r0, [pc, #56]	; (8004b2c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004af8:	5c89      	ldrb	r1, [r1, r2]
 8004afa:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <HAL_RCC_ClockConfig+0x13c>)
 8004afc:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8004afe:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b00:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8004b02:	f7fe fb03 	bl	800310c <HAL_InitTick>
  return HAL_OK;
 8004b06:	2000      	movs	r0, #0
}
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0c:	0198      	lsls	r0, r3, #6
 8004b0e:	d4ae      	bmi.n	8004a6e <HAL_RCC_ClockConfig+0x7a>
 8004b10:	e787      	b.n	8004a22 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004b12:	2001      	movs	r0, #1
}
 8004b14:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	039e      	lsls	r6, r3, #14
 8004b18:	d4a9      	bmi.n	8004a6e <HAL_RCC_ClockConfig+0x7a>
 8004b1a:	e782      	b.n	8004a22 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	e781      	b.n	8004a24 <HAL_RCC_ClockConfig+0x30>
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
 8004b28:	08007508 	.word	0x08007508
 8004b2c:	20000098 	.word	0x20000098
 8004b30:	20000090 	.word	0x20000090

08004b34 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4905      	ldr	r1, [pc, #20]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b3c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b40:	5ccb      	ldrb	r3, [r1, r3]
 8004b42:	6810      	ldr	r0, [r2, #0]
}
 8004b44:	40d8      	lsrs	r0, r3
 8004b46:	4770      	bx	lr
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	20000090 	.word	0x20000090
 8004b50:	08007518 	.word	0x08007518

08004b54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004b56:	4a05      	ldr	r2, [pc, #20]	; (8004b6c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4905      	ldr	r1, [pc, #20]	; (8004b70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b5c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	6810      	ldr	r0, [r2, #0]
}
 8004b64:	40d8      	lsrs	r0, r3
 8004b66:	4770      	bx	lr
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	20000090 	.word	0x20000090
 8004b70:	08007518 	.word	0x08007518

08004b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b78:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b7a:	6800      	ldr	r0, [r0, #0]
{
 8004b7c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b7e:	07c1      	lsls	r1, r0, #31
 8004b80:	d52c      	bpl.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b3a      	ldr	r3, [pc, #232]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	00d2      	lsls	r2, r2, #3
 8004b88:	d53f      	bpl.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	4d39      	ldr	r5, [pc, #228]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8004b8c:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	682b      	ldr	r3, [r5, #0]
 8004b90:	05df      	lsls	r7, r3, #23
 8004b92:	d548      	bpl.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b94:	4d35      	ldr	r5, [pc, #212]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b96:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b9c:	d011      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b9e:	6861      	ldr	r1, [r4, #4]
 8004ba0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004baa:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bac:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bae:	4a31      	ldr	r2, [pc, #196]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bb4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bb8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bbc:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bbe:	07d9      	lsls	r1, r3, #31
 8004bc0:	d444      	bmi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc2:	6861      	ldr	r1, [r4, #4]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004bc6:	6a13      	ldr	r3, [r2, #32]
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bd0:	b11e      	cbz	r6, 8004bda <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd2:	69d3      	ldr	r3, [r2, #28]
 8004bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	0783      	lsls	r3, r0, #30
 8004bde:	d506      	bpl.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be0:	4922      	ldr	r1, [pc, #136]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004be2:	68a3      	ldr	r3, [r4, #8]
 8004be4:	684a      	ldr	r2, [r1, #4]
 8004be6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004bea:	431a      	orrs	r2, r3
 8004bec:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bee:	f010 0010 	ands.w	r0, r0, #16
 8004bf2:	d007      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bf4:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf6:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004bf8:	68e1      	ldr	r1, [r4, #12]
 8004bfa:	6853      	ldr	r3, [r2, #4]
 8004bfc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6053      	str	r3, [r2, #4]
}
 8004c04:	b002      	add	sp, #8
 8004c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0c:	4d18      	ldr	r5, [pc, #96]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c12:	61da      	str	r2, [r3, #28]
 8004c14:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8004c16:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	05df      	lsls	r7, r3, #23
 8004c24:	d4b6      	bmi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004c2e:	f7fe faaf 	bl	8003190 <HAL_GetTick>
 8004c32:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	05d8      	lsls	r0, r3, #23
 8004c38:	d4ac      	bmi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3a:	f7fe faa9 	bl	8003190 <HAL_GetTick>
 8004c3e:	1bc3      	subs	r3, r0, r7
 8004c40:	2b64      	cmp	r3, #100	; 0x64
 8004c42:	d9f7      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004c44:	2003      	movs	r0, #3
}
 8004c46:	b002      	add	sp, #8
 8004c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8004c4c:	f7fe faa0 	bl	8003190 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c50:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004c54:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	e004      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c58:	f7fe fa9a 	bl	8003190 <HAL_GetTick>
 8004c5c:	1bc0      	subs	r0, r0, r7
 8004c5e:	4540      	cmp	r0, r8
 8004c60:	d8f0      	bhi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	6a2b      	ldr	r3, [r5, #32]
 8004c64:	079a      	lsls	r2, r3, #30
 8004c66:	d5f7      	bpl.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004c68:	e7ab      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40007000 	.word	0x40007000
 8004c74:	42420000 	.word	0x42420000

08004c78 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c78:	2802      	cmp	r0, #2
{
 8004c7a:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8004c7e:	2810      	cmp	r0, #16
 8004c80:	d026      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8004c82:	2801      	cmp	r0, #1
 8004c84:	d00c      	beq.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c86:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004c88:	bd08      	pop	{r3, pc}
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c8a:	f7ff ff63 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8004c8e:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004c96:	3301      	adds	r3, #1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004c9e:	bd08      	pop	{r3, pc}
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ca0:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8004ca4:	4922      	ldr	r1, [pc, #136]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ca6:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004ca8:	401a      	ands	r2, r3
 8004caa:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004cae:	d02f      	beq.n	8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d02d      	beq.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbe:	d1e2      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
        frequency = HSE_VALUE / 128U;
 8004cc0:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004cc4:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8004cc6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004cca:	bf18      	it	ne
 8004ccc:	4618      	movne	r0, r3
}
 8004cce:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8004cd0:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cd2:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004cda:	d0d5      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cdc:	4815      	ldr	r0, [pc, #84]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004cde:	f3c2 4183 	ubfx	r1, r2, #18, #4
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ce2:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ce4:	5c40      	ldrb	r0, [r0, r1]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ce6:	d51e      	bpl.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004cec:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004cf0:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf8:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	025b      	lsls	r3, r3, #9
 8004d02:	d4c1      	bmi.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004d06:	0040      	lsls	r0, r0, #1
 8004d08:	fba3 3000 	umull	r3, r0, r3, r0
 8004d0c:	0840      	lsrs	r0, r0, #1
}
 8004d0e:	bd08      	pop	{r3, pc}
        frequency = LSE_VALUE;
 8004d10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
 8004d14:	bd08      	pop	{r3, pc}
        frequency = LSI_VALUE;
 8004d16:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d1a:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8004d1c:	f010 0002 	ands.w	r0, r0, #2
 8004d20:	bf18      	it	ne
 8004d22:	4618      	movne	r0, r3
}
 8004d24:	bd08      	pop	{r3, pc}
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004d28:	fb03 f000 	mul.w	r0, r3, r0
 8004d2c:	e7e6      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	08007534 	.word	0x08007534
 8004d38:	08007544 	.word	0x08007544
 8004d3c:	007a1200 	.word	0x007a1200
 8004d40:	aaaaaaab 	.word	0xaaaaaaab
 8004d44:	003d0900 	.word	0x003d0900

08004d48 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d48:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4a:	6a02      	ldr	r2, [r0, #32]
{
 8004d4c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d56:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d5a:	4d0f      	ldr	r5, [pc, #60]	; (8004d98 <TIM_OC1_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d5c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004d60:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8004d62:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004d64:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d68:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8004d6a:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d6e:	d006      	beq.n	8004d7e <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d70:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d72:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d74:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004d76:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004d78:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004d7a:	6203      	str	r3, [r0, #32]
}
 8004d7c:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004d7e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d80:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004d84:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d86:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d8a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004d8e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d90:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d94:	432c      	orrs	r4, r5
 8004d96:	e7eb      	b.n	8004d70 <TIM_OC1_SetConfig+0x28>
 8004d98:	40012c00 	.word	0x40012c00

08004d9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d9e:	6a02      	ldr	r2, [r0, #32]
{
 8004da0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dae:	4d10      	ldr	r5, [pc, #64]	; (8004df0 <TIM_OC3_SetConfig+0x54>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db6:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dbc:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dbe:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dc2:	d006      	beq.n	8004dd2 <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004dc6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004dc8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004dca:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004dcc:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004dce:	6203      	str	r3, [r0, #32]
}
 8004dd0:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dd8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ddc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004de4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dea:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004dee:	e7e9      	b.n	8004dc4 <TIM_OC3_SetConfig+0x28>
 8004df0:	40012c00 	.word	0x40012c00

08004df4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004df6:	6a02      	ldr	r2, [r0, #32]
{
 8004df8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dfe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e04:	f8d1 c000 	ldr.w	ip, [r1]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e08:	4d0c      	ldr	r5, [pc, #48]	; (8004e3c <TIM_OC4_SetConfig+0x48>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0e:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e12:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e1c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e20:	d006      	beq.n	8004e30 <TIM_OC4_SetConfig+0x3c>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e22:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004e24:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004e26:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004e28:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 8004e2a:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004e2c:	6203      	str	r3, [r0, #32]
}
 8004e2e:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e30:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e32:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e36:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004e3a:	e7f2      	b.n	8004e22 <TIM_OC4_SetConfig+0x2e>
 8004e3c:	40012c00 	.word	0x40012c00

08004e40 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e40:	bb19      	cbnz	r1, 8004e8a <HAL_TIM_OC_Start+0x4a>
 8004e42:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d127      	bne.n	8004e9a <HAL_TIM_OC_Start+0x5a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e50:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e52:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e54:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e58:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e5a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004e5c:	ea20 0002 	bic.w	r0, r0, r2
{
 8004e60:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004e62:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e64:	6a19      	ldr	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e66:	4c20      	ldr	r4, [pc, #128]	; (8004ee8 <HAL_TIM_OC_Start+0xa8>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e68:	430a      	orrs	r2, r1
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e6a:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e6c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e6e:	d01e      	beq.n	8004eae <HAL_TIM_OC_Start+0x6e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d01f      	beq.n	8004eb6 <HAL_TIM_OC_Start+0x76>
 8004e76:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <HAL_TIM_OC_Start+0xac>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01c      	beq.n	8004eb6 <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_ENABLE(htim);
 8004e7c:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004e7e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004e80:	f042 0201 	orr.w	r2, r2, #1
}
 8004e84:	bc10      	pop	{r4}
    __HAL_TIM_ENABLE(htim);
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e8a:	2904      	cmp	r1, #4
 8004e8c:	d023      	beq.n	8004ed6 <HAL_TIM_OC_Start+0x96>
 8004e8e:	2908      	cmp	r1, #8
 8004e90:	d019      	beq.n	8004ec6 <HAL_TIM_OC_Start+0x86>
 8004e92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <HAL_TIM_OC_Start+0x5e>
    return HAL_ERROR;
 8004e9a:	2001      	movs	r0, #1
}
 8004e9c:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	2904      	cmp	r1, #4
 8004ea0:	d01d      	beq.n	8004ede <HAL_TIM_OC_Start+0x9e>
 8004ea2:	2908      	cmp	r1, #8
 8004ea4:	d013      	beq.n	8004ece <HAL_TIM_OC_Start+0x8e>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004eac:	e7d0      	b.n	8004e50 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8004eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb4:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	2a06      	cmp	r2, #6
 8004ebe:	d1dd      	bne.n	8004e7c <HAL_TIM_OC_Start+0x3c>
  return HAL_OK;
 8004ec0:	2000      	movs	r0, #0
}
 8004ec2:	bc10      	pop	{r4}
 8004ec4:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ec6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d1e5      	bne.n	8004e9a <HAL_TIM_OC_Start+0x5a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ece:	2302      	movs	r3, #2
 8004ed0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004ed4:	e7bc      	b.n	8004e50 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ed6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d1dd      	bne.n	8004e9a <HAL_TIM_OC_Start+0x5a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004ee4:	e7b4      	b.n	8004e50 <HAL_TIM_OC_Start+0x10>
 8004ee6:	bf00      	nop
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40000400 	.word	0x40000400

08004ef0 <HAL_TIM_PWM_MspInit>:
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <HAL_TIM_PWM_Start>:
 8004ef4:	f7ff bfa4 	b.w	8004e40 <HAL_TIM_OC_Start>

08004ef8 <HAL_TIM_IC_MspInit>:
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop

08004efc <HAL_TIM_IC_Start_IT>:
{
 8004efc:	4603      	mov	r3, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004efe:	2900      	cmp	r1, #0
 8004f00:	d131      	bne.n	8004f66 <HAL_TIM_IC_Start_IT+0x6a>
 8004f02:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f06:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f0a:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f0c:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f0e:	2801      	cmp	r0, #1
 8004f10:	d102      	bne.n	8004f18 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f12:	2a01      	cmp	r2, #1
 8004f14:	d002      	beq.n	8004f1c <HAL_TIM_IC_Start_IT+0x20>
}
 8004f16:	4770      	bx	lr
  switch (Channel)
 8004f18:	2001      	movs	r0, #1
 8004f1a:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d131      	bne.n	8004f84 <HAL_TIM_IC_Start_IT+0x88>
 8004f20:	2002      	movs	r0, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f22:	681a      	ldr	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f24:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f28:	f883 0042 	strb.w	r0, [r3, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f2c:	68d3      	ldr	r3, [r2, #12]
 8004f2e:	4303      	orrs	r3, r0
 8004f30:	60d3      	str	r3, [r2, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f32:	2301      	movs	r3, #1
  TIMx->CCER &= ~tmp;
 8004f34:	6a10      	ldr	r0, [r2, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f36:	408b      	lsls	r3, r1
  TIMx->CCER &= ~tmp;
 8004f38:	ea20 0003 	bic.w	r0, r0, r3
{
 8004f3c:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004f3e:	6210      	str	r0, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f40:	6a11      	ldr	r1, [r2, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	4c36      	ldr	r4, [pc, #216]	; (800501c <HAL_TIM_IC_Start_IT+0x120>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f44:	430b      	orrs	r3, r1
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f46:	42a2      	cmp	r2, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f48:	6213      	str	r3, [r2, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4a:	d060      	beq.n	800500e <HAL_TIM_IC_Start_IT+0x112>
 8004f4c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004f50:	d05d      	beq.n	800500e <HAL_TIM_IC_Start_IT+0x112>
 8004f52:	4b33      	ldr	r3, [pc, #204]	; (8005020 <HAL_TIM_IC_Start_IT+0x124>)
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d05a      	beq.n	800500e <HAL_TIM_IC_Start_IT+0x112>
      __HAL_TIM_ENABLE(htim);
 8004f58:	2000      	movs	r0, #0
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6013      	str	r3, [r2, #0]
}
 8004f62:	bc10      	pop	{r4}
 8004f64:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f66:	2904      	cmp	r1, #4
 8004f68:	d04a      	beq.n	8005000 <HAL_TIM_IC_Start_IT+0x104>
 8004f6a:	2908      	cmp	r1, #8
 8004f6c:	bf0b      	itete	eq
 8004f6e:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 8004f72:	f893 0041 	ldrbne.w	r0, [r3, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f76:	f893 2044 	ldrbeq.w	r2, [r3, #68]	; 0x44
 8004f7a:	f893 2045 	ldrbne.w	r2, [r3, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f7e:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	e7c4      	b.n	8004f0e <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f84:	2904      	cmp	r1, #4
 8004f86:	d02a      	beq.n	8004fde <HAL_TIM_IC_Start_IT+0xe2>
 8004f88:	2908      	cmp	r1, #8
 8004f8a:	d01d      	beq.n	8004fc8 <HAL_TIM_IC_Start_IT+0xcc>
 8004f8c:	2002      	movs	r0, #2
  switch (Channel)
 8004f8e:	1f0a      	subs	r2, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f90:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f94:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
  switch (Channel)
 8004f98:	2a08      	cmp	r2, #8
 8004f9a:	d8bd      	bhi.n	8004f18 <HAL_TIM_IC_Start_IT+0x1c>
 8004f9c:	a001      	add	r0, pc, #4	; (adr r0, 8004fa4 <HAL_TIM_IC_Start_IT+0xa8>)
 8004f9e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fe9 	.word	0x08004fe9
 8004fa8:	08004f19 	.word	0x08004f19
 8004fac:	08004f19 	.word	0x08004f19
 8004fb0:	08004f19 	.word	0x08004f19
 8004fb4:	08004fd3 	.word	0x08004fd3
 8004fb8:	08004f19 	.word	0x08004f19
 8004fbc:	08004f19 	.word	0x08004f19
 8004fc0:	08004f19 	.word	0x08004f19
 8004fc4:	08004ff5 	.word	0x08004ff5
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68d3      	ldr	r3, [r2, #12]
 8004fd6:	f043 0308 	orr.w	r3, r3, #8
 8004fda:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004fdc:	e7a9      	b.n	8004f32 <HAL_TIM_IC_Start_IT+0x36>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68d3      	ldr	r3, [r2, #12]
 8004fec:	f043 0304 	orr.w	r3, r3, #4
 8004ff0:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004ff2:	e79e      	b.n	8004f32 <HAL_TIM_IC_Start_IT+0x36>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68d3      	ldr	r3, [r2, #12]
 8004ff8:	f043 0310 	orr.w	r3, r3, #16
 8004ffc:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004ffe:	e798      	b.n	8004f32 <HAL_TIM_IC_Start_IT+0x36>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005000:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005004:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005008:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	e77f      	b.n	8004f0e <HAL_TIM_IC_Start_IT+0x12>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500e:	6893      	ldr	r3, [r2, #8]
 8005010:	f003 0307 	and.w	r3, r3, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005014:	2b06      	cmp	r3, #6
 8005016:	d19f      	bne.n	8004f58 <HAL_TIM_IC_Start_IT+0x5c>
 8005018:	2000      	movs	r0, #0
 800501a:	e7a2      	b.n	8004f62 <HAL_TIM_IC_Start_IT+0x66>
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400

08005024 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005024:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d075      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0xf4>
 800502c:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800502e:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8005030:	2001      	movs	r0, #1
{
 8005032:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8005034:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 8005036:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800503e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005044:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005048:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800504a:	680b      	ldr	r3, [r1, #0]
 800504c:	2b60      	cmp	r3, #96	; 0x60
 800504e:	d065      	beq.n	800511c <HAL_TIM_ConfigClockSource+0xf8>
 8005050:	d824      	bhi.n	800509c <HAL_TIM_ConfigClockSource+0x78>
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d07c      	beq.n	8005150 <HAL_TIM_ConfigClockSource+0x12c>
 8005056:	d94b      	bls.n	80050f0 <HAL_TIM_ConfigClockSource+0xcc>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d117      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2000      	movs	r0, #0
                               sClockSourceConfig->ClockPolarity,
 800505e:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005060:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005062:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005064:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005068:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	6a23      	ldr	r3, [r4, #32]
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005072:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005078:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800507c:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800507e:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005080:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005086:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800508a:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800508c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800508e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005090:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005094:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005098:	bc30      	pop	{r4, r5}
 800509a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800509c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a0:	d038      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0xf0>
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	d110      	bne.n	80050ca <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80050ac:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ae:	432b      	orrs	r3, r5
 80050b0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80050ba:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80050bc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050be:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050c0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c6:	60a3      	str	r3, [r4, #8]
      break;
 80050c8:	e7e0      	b.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80050ca:	2b70      	cmp	r3, #112	; 0x70
 80050cc:	d1de      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ce:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80050d2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d4:	432b      	orrs	r3, r5
 80050d6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80050e0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80050e2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80050e4:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2000      	movs	r0, #0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80050ec:	60a3      	str	r3, [r4, #8]
      break;
 80050ee:	e7cd      	b.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d002      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xd6>
 80050f4:	d90a      	bls.n	800510c <HAL_TIM_ConfigClockSource+0xe8>
 80050f6:	2b30      	cmp	r3, #48	; 0x30
 80050f8:	d1c8      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80050fa:	68a1      	ldr	r1, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80050fc:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 80050fe:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005102:	430b      	orrs	r3, r1
 8005104:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005108:	60a3      	str	r3, [r4, #8]
}
 800510a:	e7bf      	b.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800510c:	f033 0110 	bics.w	r1, r3, #16
 8005110:	d1bc      	bne.n	800508c <HAL_TIM_ConfigClockSource+0x68>
 8005112:	e7f2      	b.n	80050fa <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8005114:	2000      	movs	r0, #0
 8005116:	e7b9      	b.n	800508c <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8005118:	2002      	movs	r0, #2
}
 800511a:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 800511c:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800511e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005120:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005122:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005128:	f021 0110 	bic.w	r1, r1, #16
 800512c:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005134:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005138:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800513c:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800513e:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005140:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005148:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800514c:	60a3      	str	r3, [r4, #8]
}
 800514e:	e79d      	b.n	800508c <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8005150:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005154:	6a21      	ldr	r1, [r4, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2000      	movs	r0, #0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005158:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800515c:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	6a23      	ldr	r3, [r4, #32]
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005166:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800516c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005170:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8005172:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8005174:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800517a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800517e:	60a3      	str	r3, [r4, #8]
}
 8005180:	e784      	b.n	800508c <HAL_TIM_ConfigClockSource+0x68>
 8005182:	bf00      	nop

08005184 <HAL_TIM_PeriodElapsedCallback>:
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <HAL_TIM_OC_DelayElapsedCallback>:
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop

0800518c <HAL_TIM_PWM_PulseFinishedCallback>:
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop

08005190 <HAL_TIM_TriggerCallback>:
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop

08005194 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005194:	6803      	ldr	r3, [r0, #0]
{
 8005196:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005198:	691a      	ldr	r2, [r3, #16]
{
 800519a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800519c:	0791      	lsls	r1, r2, #30
 800519e:	d502      	bpl.n	80051a6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	0792      	lsls	r2, r2, #30
 80051a4:	d456      	bmi.n	8005254 <HAL_TIM_IRQHandler+0xc0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	0750      	lsls	r0, r2, #29
 80051aa:	d502      	bpl.n	80051b2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	0751      	lsls	r1, r2, #29
 80051b0:	d440      	bmi.n	8005234 <HAL_TIM_IRQHandler+0xa0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	0712      	lsls	r2, r2, #28
 80051b6:	d502      	bpl.n	80051be <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	0710      	lsls	r0, r2, #28
 80051bc:	d42b      	bmi.n	8005216 <HAL_TIM_IRQHandler+0x82>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	06d2      	lsls	r2, r2, #27
 80051c2:	d502      	bpl.n	80051ca <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	06d0      	lsls	r0, r2, #27
 80051c8:	d418      	bmi.n	80051fc <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	07d1      	lsls	r1, r2, #31
 80051ce:	d502      	bpl.n	80051d6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	07d2      	lsls	r2, r2, #31
 80051d4:	d451      	bmi.n	800527a <HAL_TIM_IRQHandler+0xe6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	0610      	lsls	r0, r2, #24
 80051da:	d502      	bpl.n	80051e2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	0611      	lsls	r1, r2, #24
 80051e0:	d453      	bmi.n	800528a <HAL_TIM_IRQHandler+0xf6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	0652      	lsls	r2, r2, #25
 80051e6:	d502      	bpl.n	80051ee <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	0650      	lsls	r0, r2, #25
 80051ec:	d455      	bmi.n	800529a <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	0691      	lsls	r1, r2, #26
 80051f2:	d502      	bpl.n	80051fa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	0692      	lsls	r2, r2, #26
 80051f8:	d437      	bmi.n	800526a <HAL_TIM_IRQHandler+0xd6>
}
 80051fa:	bd10      	pop	{r4, pc}
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fc:	2208      	movs	r2, #8
 80051fe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005200:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005202:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005204:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005208:	d05b      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x12e>
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	f7fc f9b1 	bl	8001570 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005210:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	7722      	strb	r2, [r4, #28]
 8005214:	e7d9      	b.n	80051ca <HAL_TIM_IRQHandler+0x36>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005216:	2204      	movs	r2, #4
 8005218:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800521c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521e:	0799      	lsls	r1, r3, #30
 8005220:	d14c      	bne.n	80052bc <HAL_TIM_IRQHandler+0x128>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	f7ff ffb1 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff ffb0 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800522e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005230:	7722      	strb	r2, [r4, #28]
 8005232:	e7c4      	b.n	80051be <HAL_TIM_IRQHandler+0x2a>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005234:	2202      	movs	r2, #2
 8005236:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005238:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005240:	d139      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	f7ff ffa1 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005246:	4620      	mov	r0, r4
 8005248:	f7ff ffa0 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800524e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	7722      	strb	r2, [r4, #28]
 8005252:	e7ae      	b.n	80051b2 <HAL_TIM_IRQHandler+0x1e>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005254:	2201      	movs	r2, #1
 8005256:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	079b      	lsls	r3, r3, #30
 800525c:	d025      	beq.n	80052aa <HAL_TIM_IRQHandler+0x116>
          HAL_TIM_IC_CaptureCallback(htim);
 800525e:	f7fc f987 	bl	8001570 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005264:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	7722      	strb	r2, [r4, #28]
 8005268:	e79d      	b.n	80051a6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800526a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800526e:	4620      	mov	r0, r4
}
 8005270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005274:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005276:	f000 ba7f 	b.w	8005778 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800527a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800527e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005280:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005282:	f7ff ff7f 	bl	8005184 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	e7a5      	b.n	80051d6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800528a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800528e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005290:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005292:	f000 fa73 	bl	800577c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	e7a3      	b.n	80051e2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800529a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800529e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80052a2:	f7ff ff75 	bl	8005190 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	e7a1      	b.n	80051ee <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	f7ff ff6d 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7ff ff6c 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
 80052b4:	e7d5      	b.n	8005262 <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	f7fc f95b 	bl	8001570 <HAL_TIM_IC_CaptureCallback>
 80052ba:	e7c7      	b.n	800524c <HAL_TIM_IRQHandler+0xb8>
        HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	f7fc f958 	bl	8001570 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e7b4      	b.n	800522c <HAL_TIM_IRQHandler+0x98>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	f7ff ff61 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7ff ff60 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
 80052cc:	e79f      	b.n	800520e <HAL_TIM_IRQHandler+0x7a>
 80052ce:	bf00      	nop

080052d0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d0:	4a22      	ldr	r2, [pc, #136]	; (800535c <TIM_Base_SetConfig+0x8c>)
{
 80052d2:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80052d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d8:	d028      	beq.n	800532c <TIM_Base_SetConfig+0x5c>
 80052da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80052de:	d010      	beq.n	8005302 <TIM_Base_SetConfig+0x32>
 80052e0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80052e4:	4290      	cmp	r0, r2
 80052e6:	d00c      	beq.n	8005302 <TIM_Base_SetConfig+0x32>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e8:	694d      	ldr	r5, [r1, #20]
 80052ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ee:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f0:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80052f2:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80052f4:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80052f6:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f8:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052fa:	6282      	str	r2, [r0, #40]	; 0x28
}
 80052fc:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80052fe:	6143      	str	r3, [r0, #20]
}
 8005300:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005302:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005308:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 800530a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800530c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005310:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005312:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005318:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 800531a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800531c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800531e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005320:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005322:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005324:	6282      	str	r2, [r0, #40]	; 0x28
}
 8005326:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8005328:	6143      	str	r3, [r0, #20]
}
 800532a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800532c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005332:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800533c:	694a      	ldr	r2, [r1, #20]
 800533e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005342:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005344:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005346:	688b      	ldr	r3, [r1, #8]
}
 8005348:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800534c:	680b      	ldr	r3, [r1, #0]
 800534e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005350:	690b      	ldr	r3, [r1, #16]
 8005352:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005354:	2301      	movs	r3, #1
 8005356:	6143      	str	r3, [r0, #20]
}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40012c00 	.word	0x40012c00

08005360 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005360:	b350      	cbz	r0, 80053b8 <HAL_TIM_Base_Init+0x58>
{
 8005362:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005364:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005368:	4604      	mov	r4, r0
 800536a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800536e:	b1f3      	cbz	r3, 80053ae <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005372:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005378:	f851 0b04 	ldr.w	r0, [r1], #4
 800537c:	f7ff ffa8 	bl	80052d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005380:	2301      	movs	r3, #1
 8005382:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800538a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800538e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005392:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800539a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80053a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80053aa:	2000      	movs	r0, #0
}
 80053ac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80053ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80053b2:	f7fd fcd5 	bl	8002d60 <HAL_TIM_Base_MspInit>
 80053b6:	e7db      	b.n	8005370 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80053b8:	2001      	movs	r0, #1
}
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80053bc:	b350      	cbz	r0, 8005414 <HAL_TIM_PWM_Init+0x58>
{
 80053be:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80053c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053c4:	4604      	mov	r4, r0
 80053c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053ca:	b1f3      	cbz	r3, 800540a <HAL_TIM_PWM_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80053d8:	f7ff ff7a 	bl	80052d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053dc:	2301      	movs	r3, #1
 80053de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80053e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80053ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80053ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80053fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005402:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005406:	2000      	movs	r0, #0
}
 8005408:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800540a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800540e:	f7ff fd6f 	bl	8004ef0 <HAL_TIM_PWM_MspInit>
 8005412:	e7db      	b.n	80053cc <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8005414:	2001      	movs	r0, #1
}
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8005418:	b350      	cbz	r0, 8005470 <HAL_TIM_IC_Init+0x58>
{
 800541a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800541c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005420:	4604      	mov	r4, r0
 8005422:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005426:	b1f3      	cbz	r3, 8005466 <HAL_TIM_IC_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542a:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005430:	f851 0b04 	ldr.w	r0, [r1], #4
 8005434:	f7ff ff4c 	bl	80052d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	2301      	movs	r3, #1
 800543a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005442:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005446:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800544a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005456:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800545a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800545e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005462:	2000      	movs	r0, #0
}
 8005464:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005466:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800546a:	f7ff fd45 	bl	8004ef8 <HAL_TIM_IC_MspInit>
 800546e:	e7db      	b.n	8005428 <HAL_TIM_IC_Init+0x10>
    return HAL_ERROR;
 8005470:	2001      	movs	r0, #1
}
 8005472:	4770      	bx	lr

08005474 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005474:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005476:	6a02      	ldr	r2, [r0, #32]
{
 8005478:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	f022 0210 	bic.w	r2, r2, #16
 800547e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005480:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005482:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005486:	4d11      	ldr	r5, [pc, #68]	; (80054cc <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005488:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005490:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005492:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005496:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005498:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800549c:	d006      	beq.n	80054ac <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 800549e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80054a0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80054a2:	6182      	str	r2, [r0, #24]
}
 80054a4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80054a6:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80054a8:	6203      	str	r3, [r0, #32]
}
 80054aa:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054ba:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80054be:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80054c8:	e7e9      	b.n	800549e <TIM_OC2_SetConfig+0x2a>
 80054ca:	bf00      	nop
 80054cc:	40012c00 	.word	0x40012c00

080054d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80054d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80054d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d05b      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0xc2>
 80054da:	2301      	movs	r3, #1
 80054dc:	4604      	mov	r4, r0
 80054de:	460d      	mov	r5, r1
 80054e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80054e4:	2a0c      	cmp	r2, #12
 80054e6:	d808      	bhi.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x2a>
 80054e8:	e8df f002 	tbb	[pc, r2]
 80054ec:	0707071f 	.word	0x0707071f
 80054f0:	07070730 	.word	0x07070730
 80054f4:	07070742 	.word	0x07070742
 80054f8:	0d          	.byte	0x0d
 80054f9:	00          	.byte	0x00
 80054fa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80054fc:	2200      	movs	r2, #0
 80054fe:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005502:	4618      	mov	r0, r3
 8005504:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005506:	6800      	ldr	r0, [r0, #0]
 8005508:	f7ff fc74 	bl	8004df4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800550c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005514:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	69c2      	ldr	r2, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005518:	2300      	movs	r3, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800551a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551e:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005520:	69c2      	ldr	r2, [r0, #28]
 8005522:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005526:	61c2      	str	r2, [r0, #28]
      break;
 8005528:	e7e8      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552a:	6800      	ldr	r0, [r0, #0]
 800552c:	f7ff fc0c 	bl	8004d48 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005530:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005532:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005534:	f043 0308 	orr.w	r3, r3, #8
 8005538:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800553a:	6982      	ldr	r2, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800553c:	2300      	movs	r3, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800553e:	f022 0204 	bic.w	r2, r2, #4
 8005542:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005544:	6982      	ldr	r2, [r0, #24]
 8005546:	430a      	orrs	r2, r1
 8005548:	6182      	str	r2, [r0, #24]
      break;
 800554a:	e7d7      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800554c:	6800      	ldr	r0, [r0, #0]
 800554e:	f7ff ff91 	bl	8005474 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005552:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005554:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005556:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800555a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800555c:	6982      	ldr	r2, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800555e:	2300      	movs	r3, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005564:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005566:	6982      	ldr	r2, [r0, #24]
 8005568:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800556c:	6182      	str	r2, [r0, #24]
      break;
 800556e:	e7c5      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x2c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005570:	6800      	ldr	r0, [r0, #0]
 8005572:	f7ff fc13 	bl	8004d9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005576:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005578:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	f043 0308 	orr.w	r3, r3, #8
 800557e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005580:	69c2      	ldr	r2, [r0, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005584:	f022 0204 	bic.w	r2, r2, #4
 8005588:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800558a:	69c2      	ldr	r2, [r0, #28]
 800558c:	430a      	orrs	r2, r1
 800558e:	61c2      	str	r2, [r0, #28]
      break;
 8005590:	e7b4      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8005592:	2302      	movs	r3, #2
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd38      	pop	{r3, r4, r5, pc}

08005598 <TIM_TI1_SetConfig>:
{
 8005598:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800559a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559c:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800559e:	4e11      	ldr	r6, [pc, #68]	; (80055e4 <TIM_TI1_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a0:	f024 0401 	bic.w	r4, r4, #1
 80055a4:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055a6:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80055a8:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055aa:	d009      	beq.n	80055c0 <TIM_TI1_SetConfig+0x28>
 80055ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055b0:	d006      	beq.n	80055c0 <TIM_TI1_SetConfig+0x28>
 80055b2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80055b6:	42b0      	cmp	r0, r6
 80055b8:	d002      	beq.n	80055c0 <TIM_TI1_SetConfig+0x28>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055ba:	f044 0201 	orr.w	r2, r4, #1
 80055be:	e002      	b.n	80055c6 <TIM_TI1_SetConfig+0x2e>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055c0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80055c4:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055c6:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c8:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055d0:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055d2:	f001 010a 	and.w	r1, r1, #10
 80055d6:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055d8:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 80055da:	6183      	str	r3, [r0, #24]
}
 80055dc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80055de:	6201      	str	r1, [r0, #32]
}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40012c00 	.word	0x40012c00

080055e8 <HAL_TIM_IC_ConfigChannel>:
{
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80055ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d047      	beq.n	8005682 <HAL_TIM_IC_ConfigChannel+0x9a>
 80055f2:	4604      	mov	r4, r0
 80055f4:	2001      	movs	r0, #1
 80055f6:	460e      	mov	r6, r1
 80055f8:	4615      	mov	r5, r2
 80055fa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80055fe:	b15a      	cbz	r2, 8005618 <HAL_TIM_IC_ConfigChannel+0x30>
  else if (Channel == TIM_CHANNEL_2)
 8005600:	2a04      	cmp	r2, #4
 8005602:	d018      	beq.n	8005636 <HAL_TIM_IC_ConfigChannel+0x4e>
  else if (Channel == TIM_CHANNEL_3)
 8005604:	2a08      	cmp	r2, #8
 8005606:	d03f      	beq.n	8005688 <HAL_TIM_IC_ConfigChannel+0xa0>
  else if (Channel == TIM_CHANNEL_4)
 8005608:	2a0c      	cmp	r2, #12
 800560a:	d061      	beq.n	80056d0 <HAL_TIM_IC_ConfigChannel+0xe8>
    status = HAL_ERROR;
 800560c:	4603      	mov	r3, r0
  __HAL_UNLOCK(htim);
 800560e:	2200      	movs	r2, #0
 8005610:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005614:	4618      	mov	r0, r3
 8005616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	68cb      	ldr	r3, [r1, #12]
 800561c:	c906      	ldmia	r1, {r1, r2}
 800561e:	f7ff ffbb 	bl	8005598 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005622:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005624:	68b1      	ldr	r1, [r6, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005626:	f023 030c 	bic.w	r3, r3, #12
 800562a:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800562c:	6982      	ldr	r2, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	462b      	mov	r3, r5
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005630:	430a      	orrs	r2, r1
 8005632:	6182      	str	r2, [r0, #24]
 8005634:	e7eb      	b.n	800560e <HAL_TIM_IC_ConfigChannel+0x26>
    TIM_TI2_SetConfig(htim->Instance,
 8005636:	6822      	ldr	r2, [r4, #0]
                      sConfig->ICSelection,
 8005638:	e9d1 3700 	ldrd	r3, r7, [r1]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800563c:	0118      	lsls	r0, r3, #4
  tmpccer = TIMx->CCER;
 800563e:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005640:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	f021 0110 	bic.w	r1, r1, #16
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800564a:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
 800564e:	4318      	orrs	r0, r3
                      sConfig->ICFilter);
 8005650:	68f3      	ldr	r3, [r6, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005654:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005656:	031b      	lsls	r3, r3, #12
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005658:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800565c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005660:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005664:	b29b      	uxth	r3, r3
 8005666:	430b      	orrs	r3, r1
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005668:	68b5      	ldr	r5, [r6, #8]
  TIMx->CCMR1 = tmpccmr1 ;
 800566a:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800566c:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800566e:	6991      	ldr	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005672:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8005676:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005678:	6991      	ldr	r1, [r2, #24]
 800567a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800567e:	6191      	str	r1, [r2, #24]
 8005680:	e7c5      	b.n	800560e <HAL_TIM_IC_ConfigChannel+0x26>
  __HAL_LOCK(htim);
 8005682:	2302      	movs	r3, #2
}
 8005684:	4618      	mov	r0, r3
 8005686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI3_SetConfig(htim->Instance,
 8005688:	6822      	ldr	r2, [r4, #0]
                      sConfig->ICSelection,
 800568a:	e9d1 3100 	ldrd	r3, r1, [r1]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800568e:	0218      	lsls	r0, r3, #8
  tmpccer = TIMx->CCER;
 8005690:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005692:	6a15      	ldr	r5, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC3P);
 8005694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005698:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800569c:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80056a0:	4318      	orrs	r0, r3
                      sConfig->ICFilter);
 80056a2:	68f3      	ldr	r3, [r6, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056a4:	6215      	str	r5, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056a6:	69d5      	ldr	r5, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056a8:	011b      	lsls	r3, r3, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056aa:	f025 0503 	bic.w	r5, r5, #3
  tmpccmr2 |= TIM_ICSelection;
 80056ae:	4329      	orrs	r1, r5
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056b0:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	430b      	orrs	r3, r1
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056b8:	68b6      	ldr	r6, [r6, #8]
  TIMx->CCMR2 = tmpccmr2;
 80056ba:	61d3      	str	r3, [r2, #28]
  TIMx->CCER = tmpccer;
 80056bc:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056be:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80056c0:	2300      	movs	r3, #0
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056c2:	f021 010c 	bic.w	r1, r1, #12
 80056c6:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056c8:	69d1      	ldr	r1, [r2, #28]
 80056ca:	4331      	orrs	r1, r6
 80056cc:	61d1      	str	r1, [r2, #28]
 80056ce:	e79e      	b.n	800560e <HAL_TIM_IC_ConfigChannel+0x26>
    TIM_TI4_SetConfig(htim->Instance,
 80056d0:	6822      	ldr	r2, [r4, #0]
                      sConfig->ICSelection,
 80056d2:	e9d1 3700 	ldrd	r3, r7, [r1]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80056d6:	0318      	lsls	r0, r3, #12
  tmpccer = TIMx->CCER;
 80056d8:	6a13      	ldr	r3, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056da:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC4P);
 80056dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056e0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80056e4:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80056e8:	4318      	orrs	r0, r3
                      sConfig->ICFilter);
 80056ea:	68f3      	ldr	r3, [r6, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ec:	6211      	str	r1, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056ee:	69d1      	ldr	r1, [r2, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056f0:	031b      	lsls	r3, r3, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056f2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056f6:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056fa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056fe:	b29b      	uxth	r3, r3
 8005700:	430b      	orrs	r3, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005702:	68b5      	ldr	r5, [r6, #8]
  TIMx->CCMR2 = tmpccmr2;
 8005704:	61d3      	str	r3, [r2, #28]
  TIMx->CCER = tmpccer ;
 8005706:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005708:	69d1      	ldr	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800570c:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8005710:	61d1      	str	r1, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005712:	69d1      	ldr	r1, [r2, #28]
 8005714:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005718:	61d1      	str	r1, [r2, #28]
 800571a:	e778      	b.n	800560e <HAL_TIM_IC_ConfigChannel+0x26>

0800571c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005720:	2a01      	cmp	r2, #1
 8005722:	d023      	beq.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005724:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005726:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005728:	681a      	ldr	r2, [r3, #0]
{
 800572a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005730:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005732:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005734:	4d0e      	ldr	r5, [pc, #56]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005736:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800573a:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800573e:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8005740:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005742:	d005      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8005744:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005748:	d002      	beq.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800574a:	480a      	ldr	r0, [pc, #40]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800574c:	4282      	cmp	r2, r0
 800574e:	d104      	bne.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005750:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005752:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005756:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800575a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800575c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8005762:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8005766:	4610      	mov	r0, r2
}
 8005768:	bc30      	pop	{r4, r5}
 800576a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800576c:	2002      	movs	r0, #2
}
 800576e:	4770      	bx	lr
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40000400 	.word	0x40000400

08005778 <HAL_TIMEx_CommutCallback>:
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop

0800577c <HAL_TIMEx_BreakCallback>:
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop

08005780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005780:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	f102 030c 	add.w	r3, r2, #12
 8005786:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	f102 0c0c 	add.w	ip, r2, #12
 8005792:	e84c 3100 	strex	r1, r3, [ip]
 8005796:	2900      	cmp	r1, #0
 8005798:	d1f3      	bne.n	8005782 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	f102 0314 	add.w	r3, r2, #20
 800579e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	f102 0c14 	add.w	ip, r2, #20
 80057aa:	e84c 3100 	strex	r1, r3, [ip]
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d1f3      	bne.n	800579a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d005      	beq.n	80057c4 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b8:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80057bc:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c0:	6303      	str	r3, [r0, #48]	; 0x30
}
 80057c2:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	f102 030c 	add.w	r3, r2, #12
 80057c8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	f102 0c0c 	add.w	ip, r2, #12
 80057d4:	e84c 3100 	strex	r1, r3, [ip]
 80057d8:	2900      	cmp	r1, #0
 80057da:	d1f3      	bne.n	80057c4 <UART_EndRxTransfer+0x44>
 80057dc:	e7ec      	b.n	80057b8 <UART_EndRxTransfer+0x38>
 80057de:	bf00      	nop

080057e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e4:	6803      	ldr	r3, [r0, #0]
 80057e6:	68c1      	ldr	r1, [r0, #12]
 80057e8:	691a      	ldr	r2, [r3, #16]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);


  if(huart->Instance == USART1)
 80057ea:	4d1c      	ldr	r5, [pc, #112]	; (800585c <UART_SetConfig+0x7c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80057f0:	430a      	orrs	r2, r1
 80057f2:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057f4:	6882      	ldr	r2, [r0, #8]
 80057f6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80057f8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057fa:	4302      	orrs	r2, r0
 80057fc:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80057fe:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8005802:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005806:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005808:	430a      	orrs	r2, r1
 800580a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	69a1      	ldr	r1, [r4, #24]
 8005810:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005814:	430a      	orrs	r2, r1
  if(huart->Instance == USART1)
 8005816:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005818:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800581a:	d01b      	beq.n	8005854 <UART_SetConfig+0x74>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7ff f98a 	bl	8004b34 <HAL_RCC_GetPCLK1Freq>
 8005820:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005828:	0092      	lsls	r2, r2, #2
 800582a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800582e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005832:	2564      	movs	r5, #100	; 0x64
 8005834:	490a      	ldr	r1, [pc, #40]	; (8005860 <UART_SetConfig+0x80>)
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	fba1 4203 	umull	r4, r2, r1, r3
 800583c:	0952      	lsrs	r2, r2, #5
 800583e:	fb05 3312 	mls	r3, r5, r2, r3
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	fba1 1303 	umull	r1, r3, r1, r3
 800584a:	0112      	lsls	r2, r2, #4
 800584c:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8005850:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8005852:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8005854:	f7ff f97e 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8005858:	4603      	mov	r3, r0
 800585a:	e7e2      	b.n	8005822 <UART_SetConfig+0x42>
 800585c:	40013800 	.word	0x40013800
 8005860:	51eb851f 	.word	0x51eb851f

08005864 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8005864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005868:	4680      	mov	r8, r0
 800586a:	460f      	mov	r7, r1
 800586c:	4691      	mov	r9, r2
 800586e:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005870:	f8d8 5000 	ldr.w	r5, [r8]
 8005874:	e001      	b.n	800587a <UART_WaitOnFlagUntilTimeout.constprop.0+0x16>
    if (Timeout != HAL_MAX_DELAY)
 8005876:	1c73      	adds	r3, r6, #1
 8005878:	d106      	bne.n	8005888 <UART_WaitOnFlagUntilTimeout.constprop.0+0x24>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587a:	682c      	ldr	r4, [r5, #0]
 800587c:	ea37 0404 	bics.w	r4, r7, r4
 8005880:	d1f9      	bne.n	8005876 <UART_WaitOnFlagUntilTimeout.constprop.0+0x12>
  return HAL_OK;
 8005882:	2000      	movs	r0, #0
}
 8005884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005888:	b13e      	cbz	r6, 800589a <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
 800588a:	f7fd fc81 	bl	8003190 <HAL_GetTick>
 800588e:	eba0 0009 	sub.w	r0, r0, r9
 8005892:	4286      	cmp	r6, r0
 8005894:	d2ec      	bcs.n	8005870 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005896:	f8d8 5000 	ldr.w	r5, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	f105 030c 	add.w	r3, r5, #12
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	f105 010c 	add.w	r1, r5, #12
 80058aa:	e841 3200 	strex	r2, r3, [r1]
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d1f3      	bne.n	800589a <UART_WaitOnFlagUntilTimeout.constprop.0+0x36>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	f105 0314 	add.w	r3, r5, #20
 80058b6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f105 0114 	add.w	r1, r5, #20
 80058c2:	e841 3200 	strex	r2, r3, [r1]
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d1f3      	bne.n	80058b2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x4e>
        huart->gState  = HAL_UART_STATE_READY;
 80058ca:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80058cc:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80058ce:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80058d2:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80058d6:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        return HAL_TIMEOUT;
 80058da:	e7d3      	b.n	8005884 <UART_WaitOnFlagUntilTimeout.constprop.0+0x20>

080058dc <HAL_UART_Init>:
  if (huart == NULL)
 80058dc:	b370      	cbz	r0, 800593c <HAL_UART_Init+0x60>
{
 80058de:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80058e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058e4:	4604      	mov	r4, r0
 80058e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058ea:	b313      	cbz	r3, 8005932 <HAL_UART_Init+0x56>
  huart->gState = HAL_UART_STATE_BUSY;
 80058ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80058ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80058f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80058f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80058f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80058f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80058fe:	f7ff ff6f 	bl	80057e0 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8005904:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005908:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800590a:	4610      	mov	r0, r2
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800590c:	6919      	ldr	r1, [r3, #16]
 800590e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005912:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005914:	6959      	ldr	r1, [r3, #20]
 8005916:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800591a:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8005922:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	6462      	str	r2, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005926:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800592e:	6362      	str	r2, [r4, #52]	; 0x34
}
 8005930:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005932:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8005936:	f7fd fb4b 	bl	8002fd0 <HAL_UART_MspInit>
 800593a:	e7d7      	b.n	80058ec <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800593c:	2001      	movs	r0, #1
}
 800593e:	4770      	bx	lr

08005940 <HAL_UART_Receive>:
{
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005946:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800594a:	2b20      	cmp	r3, #32
 800594c:	d149      	bne.n	80059e2 <HAL_UART_Receive+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800594e:	460d      	mov	r5, r1
 8005950:	b109      	cbz	r1, 8005956 <HAL_UART_Receive+0x16>
 8005952:	4617      	mov	r7, r2
 8005954:	b912      	cbnz	r2, 800595c <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8005956:	2001      	movs	r0, #1
}
 8005958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800595c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595e:	f04f 0900 	mov.w	r9, #0
 8005962:	4604      	mov	r4, r0
 8005964:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005968:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8005970:	f7fd fc0e 	bl	8003190 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005974:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8005976:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800597c:	85a7      	strh	r7, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800597e:	85e7      	strh	r7, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005980:	d032      	beq.n	80059e8 <HAL_UART_Receive+0xa8>
    while (huart->RxXferCount > 0U)
 8005982:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005984:	b29b      	uxth	r3, r3
 8005986:	b9bb      	cbnz	r3, 80059b8 <HAL_UART_Receive+0x78>
 8005988:	e034      	b.n	80059f4 <HAL_UART_Receive+0xb4>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005990:	d002      	beq.n	8005998 <HAL_UART_Receive+0x58>
 8005992:	bb0b      	cbnz	r3, 80059d8 <HAL_UART_Receive+0x98>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	b9fb      	cbnz	r3, 80059d8 <HAL_UART_Receive+0x98>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 80059a2:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
 80059a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80059aa:	fa1f fc8c 	uxth.w	ip, ip
 80059ae:	f8a4 c02e 	strh.w	ip, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80059b2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80059b4:	b289      	uxth	r1, r1
 80059b6:	b1e9      	cbz	r1, 80059f4 <HAL_UART_Receive+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059b8:	4633      	mov	r3, r6
 80059ba:	4642      	mov	r2, r8
 80059bc:	2120      	movs	r1, #32
 80059be:	4620      	mov	r0, r4
 80059c0:	f7ff ff50 	bl	8005864 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80059c4:	b9e0      	cbnz	r0, 8005a00 <HAL_UART_Receive+0xc0>
      if (pdata8bits == NULL)
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	d1df      	bne.n	800598a <HAL_UART_Receive+0x4a>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	f829 3b02 	strh.w	r3, [r9], #2
        pdata16bits++;
 80059d6:	e7e4      	b.n	80059a2 <HAL_UART_Receive+0x62>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e0:	e7dd      	b.n	800599e <HAL_UART_Receive+0x5e>
    return HAL_BUSY;
 80059e2:	2002      	movs	r0, #2
}
 80059e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1c9      	bne.n	8005982 <HAL_UART_Receive+0x42>
 80059ee:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80059f0:	461d      	mov	r5, r3
 80059f2:	e7c6      	b.n	8005982 <HAL_UART_Receive+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 80059f4:	2320      	movs	r3, #32
 80059f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_OK;
 80059fa:	2000      	movs	r0, #0
}
 80059fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8005a00:	2003      	movs	r0, #3
}
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	bf00      	nop

08005a08 <HAL_UART_TxCpltCallback>:
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop

08005a0c <HAL_UART_RxCpltCallback>:
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <HAL_UART_ErrorCallback>:
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <UART_DMAAbortOnError>:
{
 8005a14:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8005a16:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a18:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005a1a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a1c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005a1e:	f7ff fff7 	bl	8005a10 <HAL_UART_ErrorCallback>
}
 8005a22:	bd08      	pop	{r3, pc}

08005a24 <HAL_UARTEx_RxEventCallback>:
}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop

08005a28 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a28:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005a2c:	2b22      	cmp	r3, #34	; 0x22
 8005a2e:	d151      	bne.n	8005ad4 <UART_Receive_IT.isra.0+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	6883      	ldr	r3, [r0, #8]
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a36:	d043      	beq.n	8005ac0 <UART_Receive_IT.isra.0+0x98>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a38:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d04b      	beq.n	8005ad6 <UART_Receive_IT.isra.0+0xae>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a3e:	6803      	ldr	r3, [r0, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a46:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005a48:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005a4a:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8005a4c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 2U;
 8005a4e:	6282      	str	r2, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d13c      	bne.n	8005ad4 <UART_Receive_IT.isra.0+0xac>
      huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a5e:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005a60:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a62:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005a64:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a66:	f021 0120 	bic.w	r1, r1, #32
 8005a6a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a6c:	68d1      	ldr	r1, [r2, #12]
 8005a6e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005a72:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a74:	6951      	ldr	r1, [r2, #20]
 8005a76:	f021 0101 	bic.w	r1, r1, #1
 8005a7a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a80:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a82:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005a84:	2901      	cmp	r1, #1
 8005a86:	d12d      	bne.n	8005ae4 <UART_Receive_IT.isra.0+0xbc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a88:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	f102 030c 	add.w	r3, r2, #12
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a92:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	f102 0c0c 	add.w	ip, r2, #12
 8005a9a:	e84c 3100 	strex	r1, r3, [ip]
 8005a9e:	2900      	cmp	r1, #0
 8005aa0:	d1f3      	bne.n	8005a8a <UART_Receive_IT.isra.0+0x62>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	06db      	lsls	r3, r3, #27
 8005aa6:	d505      	bpl.n	8005ab4 <UART_Receive_IT.isra.0+0x8c>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa8:	9101      	str	r1, [sp, #4]
 8005aaa:	6813      	ldr	r3, [r2, #0]
 8005aac:	9301      	str	r3, [sp, #4]
 8005aae:	6853      	ldr	r3, [r2, #4]
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8005ab6:	f7ff ffb5 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
}
 8005aba:	b003      	add	sp, #12
 8005abc:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac0:	6903      	ldr	r3, [r0, #16]
 8005ac2:	b9a3      	cbnz	r3, 8005aee <UART_Receive_IT.isra.0+0xc6>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ac4:	6803      	ldr	r3, [r0, #0]
 8005ac6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ace:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8005ad2:	e7bb      	b.n	8005a4c <UART_Receive_IT.isra.0+0x24>
 8005ad4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ad6:	6903      	ldr	r3, [r0, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1b0      	bne.n	8005a3e <UART_Receive_IT.isra.0+0x16>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005adc:	6803      	ldr	r3, [r0, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	7013      	strb	r3, [r2, #0]
 8005ae2:	e7b1      	b.n	8005a48 <UART_Receive_IT.isra.0+0x20>
        HAL_UART_RxCpltCallback(huart);
 8005ae4:	f7ff ff92 	bl	8005a0c <HAL_UART_RxCpltCallback>
}
 8005ae8:	b003      	add	sp, #12
 8005aea:	f85d fb04 	ldr.w	pc, [sp], #4
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aee:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005af0:	e7f4      	b.n	8005adc <UART_Receive_IT.isra.0+0xb4>
 8005af2:	bf00      	nop

08005af4 <HAL_UART_IRQHandler>:
{
 8005af4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005af6:	6805      	ldr	r5, [r0, #0]
{
 8005af8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	46ac      	mov	ip, r5
  if (errorflags == RESET)
 8005afe:	071e      	lsls	r6, r3, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b00:	68ea      	ldr	r2, [r5, #12]
{
 8005b02:	b082      	sub	sp, #8
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b04:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 8005b06:	d172      	bne.n	8005bee <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b08:	069d      	lsls	r5, r3, #26
 8005b0a:	d502      	bpl.n	8005b12 <HAL_UART_IRQHandler+0x1e>
 8005b0c:	0691      	lsls	r1, r2, #26
 8005b0e:	f100 80e0 	bmi.w	8005cd2 <HAL_UART_IRQHandler+0x1de>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b14:	2901      	cmp	r1, #1
 8005b16:	d00b      	beq.n	8005b30 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b18:	061d      	lsls	r5, r3, #24
 8005b1a:	d502      	bpl.n	8005b22 <HAL_UART_IRQHandler+0x2e>
 8005b1c:	0610      	lsls	r0, r2, #24
 8005b1e:	f100 80a7 	bmi.w	8005c70 <HAL_UART_IRQHandler+0x17c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b22:	0659      	lsls	r1, r3, #25
 8005b24:	d502      	bpl.n	8005b2c <HAL_UART_IRQHandler+0x38>
 8005b26:	0653      	lsls	r3, r2, #25
 8005b28:	f100 80c6 	bmi.w	8005cb8 <HAL_UART_IRQHandler+0x1c4>
}
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b30:	06d8      	lsls	r0, r3, #27
 8005b32:	d5f1      	bpl.n	8005b18 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b34:	06d1      	lsls	r1, r2, #27
 8005b36:	d5ef      	bpl.n	8005b18 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	f8dc 3000 	ldr.w	r3, [ip]
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4a:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8005b4e:	065e      	lsls	r6, r3, #25
 8005b50:	f140 80ea 	bpl.w	8005d28 <HAL_UART_IRQHandler+0x234>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b54:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005b56:	6803      	ldr	r3, [r0, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0e5      	beq.n	8005b2c <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b60:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d9e2      	bls.n	8005b2c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b66:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b68:	6983      	ldr	r3, [r0, #24]
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d036      	beq.n	8005bdc <HAL_UART_IRQHandler+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	f10c 030c 	add.w	r3, ip, #12
 8005b72:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	f10c 010c 	add.w	r1, ip, #12
 8005b7e:	e841 3200 	strex	r2, r3, [r1]
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	d1f3      	bne.n	8005b6e <HAL_UART_IRQHandler+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	f10c 0314 	add.w	r3, ip, #20
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	f10c 0114 	add.w	r1, ip, #20
 8005b96:	e841 3200 	strex	r2, r3, [r1]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d1f3      	bne.n	8005b86 <HAL_UART_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	f10c 0314 	add.w	r3, ip, #20
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	f10c 0114 	add.w	r1, ip, #20
 8005bae:	e841 3200 	strex	r2, r3, [r1]
 8005bb2:	2a00      	cmp	r2, #0
 8005bb4:	d1f3      	bne.n	8005b9e <HAL_UART_IRQHandler+0xaa>
          huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	f10c 030c 	add.w	r3, ip, #12
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	f10c 010c 	add.w	r1, ip, #12
 8005bce:	e841 3200 	strex	r2, r3, [r1]
 8005bd2:	2a00      	cmp	r2, #0
 8005bd4:	d1f3      	bne.n	8005bbe <HAL_UART_IRQHandler+0xca>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bd6:	f7fd fe37 	bl	8003848 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bda:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005be0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8005be2:	4620      	mov	r0, r4
 8005be4:	1ad2      	subs	r2, r2, r3
 8005be6:	b291      	uxth	r1, r2
 8005be8:	f7ff ff1c 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 8005bec:	e79e      	b.n	8005b2c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bee:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bf2:	f402 7090 	and.w	r0, r2, #288	; 0x120
 8005bf6:	4308      	orrs	r0, r1
 8005bf8:	d08b      	beq.n	8005b12 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bfa:	07de      	lsls	r6, r3, #31
 8005bfc:	d505      	bpl.n	8005c0a <HAL_UART_IRQHandler+0x116>
 8005bfe:	05d0      	lsls	r0, r2, #23
 8005c00:	d503      	bpl.n	8005c0a <HAL_UART_IRQHandler+0x116>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c02:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005c04:	f040 0001 	orr.w	r0, r0, #1
 8005c08:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c0a:	075e      	lsls	r6, r3, #29
 8005c0c:	d527      	bpl.n	8005c5e <HAL_UART_IRQHandler+0x16a>
 8005c0e:	b129      	cbz	r1, 8005c1c <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c10:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005c12:	f040 0002 	orr.w	r0, r0, #2
 8005c16:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c18:	0798      	lsls	r0, r3, #30
 8005c1a:	d424      	bmi.n	8005c66 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c1c:	0718      	lsls	r0, r3, #28
 8005c1e:	d507      	bpl.n	8005c30 <HAL_UART_IRQHandler+0x13c>
 8005c20:	f002 0020 	and.w	r0, r2, #32
 8005c24:	4308      	orrs	r0, r1
 8005c26:	d003      	beq.n	8005c30 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c28:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c2a:	f041 0108 	orr.w	r1, r1, #8
 8005c2e:	6461      	str	r1, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005c32:	2900      	cmp	r1, #0
 8005c34:	f43f af7a 	beq.w	8005b2c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	d502      	bpl.n	8005c42 <HAL_UART_IRQHandler+0x14e>
 8005c3c:	0693      	lsls	r3, r2, #26
 8005c3e:	f100 80ae 	bmi.w	8005d9e <HAL_UART_IRQHandler+0x2aa>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c44:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c4a:	f002 0208 	and.w	r2, r2, #8
 8005c4e:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 8005c52:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c54:	d142      	bne.n	8005cdc <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8005c56:	f7ff fedb 	bl	8005a10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5a:	6466      	str	r6, [r4, #68]	; 0x44
 8005c5c:	e766      	b.n	8005b2c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5e:	079e      	lsls	r6, r3, #30
 8005c60:	d5dc      	bpl.n	8005c1c <HAL_UART_IRQHandler+0x128>
 8005c62:	2900      	cmp	r1, #0
 8005c64:	d0da      	beq.n	8005c1c <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c66:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005c68:	f040 0004 	orr.w	r0, r0, #4
 8005c6c:	6460      	str	r0, [r4, #68]	; 0x44
 8005c6e:	e7d5      	b.n	8005c1c <HAL_UART_IRQHandler+0x128>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c74:	2b21      	cmp	r3, #33	; 0x21
 8005c76:	f47f af59 	bne.w	8005b2c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7a:	68a3      	ldr	r3, [r4, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	f000 8092 	beq.w	8005da8 <HAL_UART_IRQHandler+0x2b4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c84:	6a23      	ldr	r3, [r4, #32]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	6222      	str	r2, [r4, #32]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f8cc 3004 	str.w	r3, [ip, #4]
    if (--huart->TxXferCount == 0U)
 8005c90:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	84e3      	strh	r3, [r4, #38]	; 0x26
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f47f af47 	bne.w	8005b2c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c9e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca6:	f8cc 300c 	str.w	r3, [ip, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005caa:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb2:	f8cc 300c 	str.w	r3, [ip, #12]
 8005cb6:	e739      	b.n	8005b2c <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8005cb8:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cba:	f8dc 300c 	ldr.w	r3, [ip, #12]
  HAL_UART_TxCpltCallback(huart);
 8005cbe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc4:	f8cc 300c 	str.w	r3, [ip, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005cc8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8005ccc:	f7ff fe9c 	bl	8005a08 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8005cd0:	e72c      	b.n	8005b2c <HAL_UART_IRQHandler+0x38>
}
 8005cd2:	b002      	add	sp, #8
 8005cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005cd8:	f7ff bea6 	b.w	8005a28 <UART_Receive_IT.isra.0>
        UART_EndRxTransfer(huart);
 8005cdc:	f7ff fd50 	bl	8005780 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	696b      	ldr	r3, [r5, #20]
 8005ce2:	065e      	lsls	r6, r3, #25
 8005ce4:	d51c      	bpl.n	8005d20 <HAL_UART_IRQHandler+0x22c>
 8005ce6:	e000      	b.n	8005cea <HAL_UART_IRQHandler+0x1f6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce8:	6825      	ldr	r5, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	f105 0314 	add.w	r3, r5, #20
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	f105 0114 	add.w	r1, r5, #20
 8005cfa:	e841 3200 	strex	r2, r3, [r1]
 8005cfe:	2a00      	cmp	r2, #0
 8005d00:	d1f2      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x1f4>
          if (huart->hdmarx != NULL)
 8005d02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005d04:	b160      	cbz	r0, 8005d20 <HAL_UART_IRQHandler+0x22c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <HAL_UART_IRQHandler+0x2d0>)
 8005d08:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d0a:	f7fd fdc1 	bl	8003890 <HAL_DMA_Abort_IT>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f43f af0c 	beq.w	8005b2c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005d16:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8005d18:	b002      	add	sp, #8
 8005d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d1e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005d20:	4620      	mov	r0, r4
 8005d22:	f7ff fe75 	bl	8005a10 <HAL_UART_ErrorCallback>
 8005d26:	e701      	b.n	8005b2c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d28:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8005d2a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d2c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8005d2e:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d30:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f43f aefa 	beq.w	8005b2c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d38:	1a52      	subs	r2, r2, r1
 8005d3a:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	f43f aef5 	beq.w	8005b2c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d42:	f10c 030c 	add.w	r3, ip, #12
 8005d46:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	f10c 000c 	add.w	r0, ip, #12
 8005d52:	e840 3200 	strex	r2, r3, [r0]
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	d1f3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x24e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	f10c 0314 	add.w	r3, ip, #20
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f10c 0014 	add.w	r0, ip, #20
 8005d6a:	e840 3200 	strex	r2, r3, [r0]
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	d1f3      	bne.n	8005d5a <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 8005d72:	2320      	movs	r3, #32
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d78:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	f10c 030c 	add.w	r3, ip, #12
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	f10c 000c 	add.w	r0, ip, #12
 8005d8a:	e840 3200 	strex	r2, r3, [r0]
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d1f3      	bne.n	8005d7a <HAL_UART_IRQHandler+0x286>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d92:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d94:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d96:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d98:	f7ff fe44 	bl	8005a24 <HAL_UARTEx_RxEventCallback>
 8005d9c:	e6c6      	b.n	8005b2c <HAL_UART_IRQHandler+0x38>
        UART_Receive_IT(huart);
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff fe42 	bl	8005a28 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005da4:	6825      	ldr	r5, [r4, #0]
 8005da6:	e74c      	b.n	8005c42 <HAL_UART_IRQHandler+0x14e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f47f af6a 	bne.w	8005c84 <HAL_UART_IRQHandler+0x190>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005db0:	6a23      	ldr	r3, [r4, #32]
 8005db2:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dba:	f8cc 2004 	str.w	r2, [ip, #4]
      huart->pTxBuffPtr += 2U;
 8005dbe:	6223      	str	r3, [r4, #32]
 8005dc0:	e766      	b.n	8005c90 <HAL_UART_IRQHandler+0x19c>
 8005dc2:	bf00      	nop
 8005dc4:	08005a15 	.word	0x08005a15

08005dc8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dc8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005dca:	f000 fb2b 	bl	8006424 <vTaskStartScheduler>
  
  return osOK;
}
 8005dce:	2000      	movs	r0, #0
 8005dd0:	bd08      	pop	{r3, pc}
 8005dd2:	bf00      	nop

08005dd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dd4:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dd6:	6944      	ldr	r4, [r0, #20]
{
 8005dd8:	4684      	mov	ip, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dde:	b1ac      	cbz	r4, 8005e0c <osThreadCreate+0x38>
 8005de0:	6986      	ldr	r6, [r0, #24]
 8005de2:	b19e      	cbz	r6, 8005e0c <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005de4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005de8:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8005dec:	f1be 0f84 	cmp.w	lr, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005df0:	bf0c      	ite	eq
 8005df2:	2500      	moveq	r5, #0
    fpriority += (priority - osPriorityIdle);
 8005df4:	f10e 0503 	addne.w	r5, lr, #3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005df8:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dfc:	6840      	ldr	r0, [r0, #4]
 8005dfe:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005e02:	9500      	str	r5, [sp, #0]
 8005e04:	f000 faa2 	bl	800634c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8005e08:	b006      	add	sp, #24
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e0c:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e10:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8005e14:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e16:	bf08      	it	eq
 8005e18:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1a:	e9dc 1000 	ldrd	r1, r0, [ip]
    fpriority += (priority - osPriorityIdle);
 8005e1e:	bf18      	it	ne
 8005e20:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e22:	9400      	str	r4, [sp, #0]
 8005e24:	ac05      	add	r4, sp, #20
 8005e26:	9401      	str	r4, [sp, #4]
 8005e28:	f000 faca 	bl	80063c0 <xTaskCreate>
 8005e2c:	2801      	cmp	r0, #1
      return NULL;
 8005e2e:	bf14      	ite	ne
 8005e30:	2000      	movne	r0, #0
  return handle;
 8005e32:	9805      	ldreq	r0, [sp, #20]
}
 8005e34:	b006      	add	sp, #24
 8005e36:	bd70      	pop	{r4, r5, r6, pc}

08005e38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e38:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e3a:	2801      	cmp	r0, #1
 8005e3c:	bf38      	it	cc
 8005e3e:	2001      	movcc	r0, #1
 8005e40:	f000 fc78 	bl	8006734 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e44:	2000      	movs	r0, #0
 8005e46:	bd08      	pop	{r3, pc}

08005e48 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005e48:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005e4a:	201c      	movs	r0, #28
 8005e4c:	f000 fec8 	bl	8006be0 <pvPortMalloc>

		if( pxEventBits != NULL )
 8005e50:	4604      	mov	r4, r0
 8005e52:	b128      	cbz	r0, 8005e60 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8005e54:	2500      	movs	r5, #0
 8005e56:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005e5a:	f000 f8d5 	bl	8006008 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005e5e:	7625      	strb	r5, [r4, #24]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005e60:	4620      	mov	r0, r4
 8005e62:	bd38      	pop	{r3, r4, r5, pc}

08005e64 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005e64:	b1c0      	cbz	r0, 8005e98 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005e66:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
{
 8005e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	460c      	mov	r4, r1
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005e70:	d109      	bne.n	8005e86 <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 8005e72:	b9d1      	cbnz	r1, 8005eaa <xEventGroupWaitBits+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	e7fe      	b.n	8005e84 <xEventGroupWaitBits+0x20>
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005e96:	e7fe      	b.n	8005e96 <xEventGroupWaitBits+0x32>
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005ea8:	e7fe      	b.n	8005ea8 <xEventGroupWaitBits+0x44>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eaa:	4607      	mov	r7, r0
 8005eac:	4615      	mov	r5, r2
 8005eae:	461e      	mov	r6, r3
 8005eb0:	f000 fd0e 	bl	80068d0 <xTaskGetSchedulerState>
 8005eb4:	b908      	cbnz	r0, 8005eba <xEventGroupWaitBits+0x56>
 8005eb6:	9b06      	ldr	r3, [sp, #24]
 8005eb8:	bb93      	cbnz	r3, 8005f20 <xEventGroupWaitBits+0xbc>
	}
	#endif

	vTaskSuspendAll();
 8005eba:	f000 faeb 	bl	8006494 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005ebe:	f8d7 8000 	ldr.w	r8, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005ec2:	bb1e      	cbnz	r6, 8005f0c <xEventGroupWaitBits+0xa8>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005ec4:	ea14 0f08 	tst.w	r4, r8
 8005ec8:	d133      	bne.n	8005f32 <xEventGroupWaitBits+0xce>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005eca:	9b06      	ldr	r3, [sp, #24]
 8005ecc:	b31b      	cbz	r3, 8005f16 <xEventGroupWaitBits+0xb2>
			if( xClearOnExit != pdFALSE )
 8005ece:	3d00      	subs	r5, #0
 8005ed0:	bf18      	it	ne
 8005ed2:	2501      	movne	r5, #1
 8005ed4:	0629      	lsls	r1, r5, #24
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	4321      	orrs	r1, r4
 8005eda:	1d38      	adds	r0, r7, #4
 8005edc:	f000 fc88 	bl	80067f0 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005ee0:	f000 fb96 	bl	8006610 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005ee4:	b948      	cbnz	r0, 8005efa <xEventGroupWaitBits+0x96>
			portYIELD_WITHIN_API();
 8005ee6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8005efa:	f000 fcf9 	bl	80068f0 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005efe:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 8005f02:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005f04:	d01d      	beq.n	8005f42 <xEventGroupWaitBits+0xde>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005f06:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
	return uxReturn;
 8005f0a:	e006      	b.n	8005f1a <xEventGroupWaitBits+0xb6>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005f0c:	ea34 0308 	bics.w	r3, r4, r8
 8005f10:	d00f      	beq.n	8005f32 <xEventGroupWaitBits+0xce>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	bb23      	cbnz	r3, 8005f60 <xEventGroupWaitBits+0xfc>
	xAlreadyYielded = xTaskResumeAll();
 8005f16:	f000 fb7b 	bl	8006610 <xTaskResumeAll>
}
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f30:	e7fe      	b.n	8005f30 <xEventGroupWaitBits+0xcc>
			if( xClearOnExit != pdFALSE )
 8005f32:	2d00      	cmp	r5, #0
 8005f34:	d0ef      	beq.n	8005f16 <xEventGroupWaitBits+0xb2>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005f36:	ea28 0404 	bic.w	r4, r8, r4
 8005f3a:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005f3c:	f000 fb68 	bl	8006610 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8005f40:	e7eb      	b.n	8005f1a <xEventGroupWaitBits+0xb6>
			taskENTER_CRITICAL();
 8005f42:	f000 fd37 	bl	80069b4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8005f46:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005f4a:	b986      	cbnz	r6, 8005f6e <xEventGroupWaitBits+0x10a>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005f4c:	ea14 0f08 	tst.w	r4, r8
 8005f50:	d003      	beq.n	8005f5a <xEventGroupWaitBits+0xf6>
					if( xClearOnExit != pdFALSE )
 8005f52:	b115      	cbz	r5, 8005f5a <xEventGroupWaitBits+0xf6>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005f54:	ea28 0404 	bic.w	r4, r8, r4
 8005f58:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005f5a:	f000 fd4d 	bl	80069f8 <vPortExitCritical>
 8005f5e:	e7d2      	b.n	8005f06 <xEventGroupWaitBits+0xa2>
			if( xClearOnExit != pdFALSE )
 8005f60:	3d00      	subs	r5, #0
 8005f62:	bf18      	it	ne
 8005f64:	2501      	movne	r5, #1
 8005f66:	0629      	lsls	r1, r5, #24
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005f68:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005f6c:	e7b3      	b.n	8005ed6 <xEventGroupWaitBits+0x72>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005f6e:	ea34 0308 	bics.w	r3, r4, r8
 8005f72:	d1f2      	bne.n	8005f5a <xEventGroupWaitBits+0xf6>
 8005f74:	e7ed      	b.n	8005f52 <xEventGroupWaitBits+0xee>
 8005f76:	bf00      	nop

08005f78 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d03b      	beq.n	8005ff4 <xEventGroupSetBits+0x7c>
{
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f80:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 8005f84:	460c      	mov	r4, r1
 8005f86:	d008      	beq.n	8005f9a <xEventGroupSetBits+0x22>
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	e7fe      	b.n	8005f98 <xEventGroupSetBits+0x20>
 8005f9a:	4606      	mov	r6, r0
	vTaskSuspendAll();
 8005f9c:	f000 fa7a 	bl	8006494 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005fa0:	6833      	ldr	r3, [r6, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005fa2:	6935      	ldr	r5, [r6, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	f106 080c 	add.w	r8, r6, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005fa8:	4323      	orrs	r3, r4
		while( pxListItem != pxListEnd )
 8005faa:	45a8      	cmp	r8, r5
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005fac:	6033      	str	r3, [r6, #0]
		while( pxListItem != pxListEnd )
 8005fae:	d10a      	bne.n	8005fc6 <xEventGroupSetBits+0x4e>
 8005fb0:	e01a      	b.n	8005fe8 <xEventGroupSetBits+0x70>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005fb2:	421c      	tst	r4, r3
 8005fb4:	d005      	beq.n	8005fc2 <xEventGroupSetBits+0x4a>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005fb6:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 8005fb8:	bf48      	it	mi
 8005fba:	4327      	orrmi	r7, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005fbc:	f000 fc44 	bl	8006848 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005fc0:	6833      	ldr	r3, [r6, #0]
		while( pxListItem != pxListEnd )
 8005fc2:	45a8      	cmp	r8, r5
 8005fc4:	d00e      	beq.n	8005fe4 <xEventGroupSetBits+0x6c>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005fc6:	4628      	mov	r0, r5
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005fc8:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8005fca:	686d      	ldr	r5, [r5, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005fcc:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005fd0:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005fd4:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005fd8:	d0eb      	beq.n	8005fb2 <xEventGroupSetBits+0x3a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005fda:	ea34 0c03 	bics.w	ip, r4, r3
 8005fde:	d0ea      	beq.n	8005fb6 <xEventGroupSetBits+0x3e>
		while( pxListItem != pxListEnd )
 8005fe0:	45a8      	cmp	r8, r5
 8005fe2:	d1f0      	bne.n	8005fc6 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005fe4:	ea23 0307 	bic.w	r3, r3, r7
 8005fe8:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8005fea:	f000 fb11 	bl	8006610 <xTaskResumeAll>
}
 8005fee:	6830      	ldr	r0, [r6, #0]
 8005ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8006004:	e7fe      	b.n	8006004 <xEventGroupSetBits+0x8c>
 8006006:	bf00      	nop

08006008 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006008:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800600c:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600e:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006012:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006016:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800601a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop

08006028 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006028:	6843      	ldr	r3, [r0, #4]
{
 800602a:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800602c:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800602e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006030:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006032:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8006034:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 8006036:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006038:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800603a:	6099      	str	r1, [r3, #8]
}
 800603c:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 800603e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006040:	6002      	str	r2, [r0, #0]
}
 8006042:	4770      	bx	lr

08006044 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006044:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006046:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006048:	1c6b      	adds	r3, r5, #1
 800604a:	d010      	beq.n	800606e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800604c:	f100 0308 	add.w	r3, r0, #8
 8006050:	461c      	mov	r4, r3
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	42aa      	cmp	r2, r5
 8006058:	d9fa      	bls.n	8006050 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800605a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800605c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800605e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006060:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006062:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006064:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006066:	6108      	str	r0, [r1, #16]
}
 8006068:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800606a:	6002      	str	r2, [r0, #0]
}
 800606c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800606e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006070:	6863      	ldr	r3, [r4, #4]
 8006072:	e7f2      	b.n	800605a <vListInsert+0x16>

08006074 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006074:	6903      	ldr	r3, [r0, #16]
{
 8006076:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006078:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800607c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006080:	6051      	str	r1, [r2, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006082:	2100      	movs	r1, #0
	if( pxList->pxIndex == pxItemToRemove )
 8006084:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006086:	bf08      	it	eq
 8006088:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800608a:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 800608c:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800608e:	3a01      	subs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006092:	6818      	ldr	r0, [r3, #0]
}
 8006094:	bc10      	pop	{r4}
 8006096:	4770      	bx	lr

08006098 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800609c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800609e:	f000 fc89 	bl	80069b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a2:	4a35      	ldr	r2, [pc, #212]	; (8006178 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80060a4:	4d35      	ldr	r5, [pc, #212]	; (800617c <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80060a6:	6813      	ldr	r3, [r2, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d034      	beq.n	800611c <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060b2:	4f33      	ldr	r7, [pc, #204]	; (8006180 <prvAddNewTaskToReadyList+0xe8>)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	b343      	cbz	r3, 800610a <prvAddNewTaskToReadyList+0x72>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060ba:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8006184 <prvAddNewTaskToReadyList+0xec>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060be:	2301      	movs	r3, #1
		uxTaskNumber++;
 80060c0:	4831      	ldr	r0, [pc, #196]	; (8006188 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80060c2:	4e32      	ldr	r6, [pc, #200]	; (800618c <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 80060c4:	6801      	ldr	r1, [r0, #0]
 80060c6:	4419      	add	r1, r3
 80060c8:	6001      	str	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80060ca:	6831      	ldr	r1, [r6, #0]
 80060cc:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80060d0:	4093      	lsls	r3, r2
 80060d2:	430b      	orrs	r3, r1
 80060d4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80060d8:	1d21      	adds	r1, r4, #4
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f7ff ffa4 	bl	8006028 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060e0:	f000 fc8a 	bl	80069f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	b173      	cbz	r3, 8006106 <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060e8:	682a      	ldr	r2, [r5, #0]
 80060ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d209      	bcs.n	8006106 <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006184 <prvAddNewTaskToReadyList+0xec>
 8006114:	4293      	cmp	r3, r2
					pxCurrentTCB = pxNewTCB;
 8006116:	bf98      	it	ls
 8006118:	602c      	strls	r4, [r5, #0]
 800611a:	e7d0      	b.n	80060be <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 800611c:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d004      	beq.n	800612e <prvAddNewTaskToReadyList+0x96>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006124:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006126:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8006184 <prvAddNewTaskToReadyList+0xec>
 800612a:	4f15      	ldr	r7, [pc, #84]	; (8006180 <prvAddNewTaskToReadyList+0xe8>)
 800612c:	e7c7      	b.n	80060be <prvAddNewTaskToReadyList+0x26>
 800612e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8006184 <prvAddNewTaskToReadyList+0xec>
 8006132:	4646      	mov	r6, r8
 8006134:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006138:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613a:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800613c:	f7ff ff64 	bl	8006008 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006140:	42b7      	cmp	r7, r6
 8006142:	d1f9      	bne.n	8006138 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006144:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8006190 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8006148:	4e12      	ldr	r6, [pc, #72]	; (8006194 <prvAddNewTaskToReadyList+0xfc>)
	vListInitialise( &xDelayedTaskList1 );
 800614a:	4648      	mov	r0, r9
 800614c:	f7ff ff5c 	bl	8006008 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff ff59 	bl	8006008 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006156:	4810      	ldr	r0, [pc, #64]	; (8006198 <prvAddNewTaskToReadyList+0x100>)
 8006158:	f7ff ff56 	bl	8006008 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615c:	480f      	ldr	r0, [pc, #60]	; (800619c <prvAddNewTaskToReadyList+0x104>)
 800615e:	f7ff ff53 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006162:	480f      	ldr	r0, [pc, #60]	; (80061a0 <prvAddNewTaskToReadyList+0x108>)
 8006164:	f7ff ff50 	bl	8006008 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <prvAddNewTaskToReadyList+0x10c>)
 800616a:	4f05      	ldr	r7, [pc, #20]	; (8006180 <prvAddNewTaskToReadyList+0xe8>)
 800616c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <prvAddNewTaskToReadyList+0x110>)
		prvAddTaskToReadyList( pxNewTCB );
 8006172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006174:	601e      	str	r6, [r3, #0]
}
 8006176:	e7a2      	b.n	80060be <prvAddNewTaskToReadyList+0x26>
 8006178:	200006dc 	.word	0x200006dc
 800617c:	20000644 	.word	0x20000644
 8006180:	20000738 	.word	0x20000738
 8006184:	20000650 	.word	0x20000650
 8006188:	200006ec 	.word	0x200006ec
 800618c:	200006f0 	.word	0x200006f0
 8006190:	200006f4 	.word	0x200006f4
 8006194:	20000708 	.word	0x20000708
 8006198:	20000724 	.word	0x20000724
 800619c:	20000750 	.word	0x20000750
 80061a0:	2000073c 	.word	0x2000073c
 80061a4:	20000648 	.word	0x20000648
 80061a8:	2000064c 	.word	0x2000064c

080061ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b0:	4e1b      	ldr	r6, [pc, #108]	; (8006220 <prvAddCurrentTaskToDelayedList+0x74>)
{
 80061b2:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 80061b4:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b6:	6830      	ldr	r0, [r6, #0]
{
 80061b8:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ba:	3004      	adds	r0, #4
 80061bc:	f7ff ff5a 	bl	8006074 <uxListRemove>
 80061c0:	b940      	cbnz	r0, 80061d4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80061c2:	2201      	movs	r2, #1
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	4917      	ldr	r1, [pc, #92]	; (8006224 <prvAddCurrentTaskToDelayedList+0x78>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	409a      	lsls	r2, r3
 80061cc:	680b      	ldr	r3, [r1, #0]
 80061ce:	ea23 0302 	bic.w	r3, r3, r2
 80061d2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061d4:	1c6b      	adds	r3, r5, #1
 80061d6:	d017      	beq.n	8006208 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	1964      	adds	r4, r4, r5
 80061dc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80061de:	d307      	bcc.n	80061f0 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e0:	4b11      	ldr	r3, [pc, #68]	; (8006228 <prvAddCurrentTaskToDelayedList+0x7c>)
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ea:	3104      	adds	r1, #4
 80061ec:	f7ff bf2a 	b.w	8006044 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f0:	4b0e      	ldr	r3, [pc, #56]	; (800622c <prvAddCurrentTaskToDelayedList+0x80>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	6831      	ldr	r1, [r6, #0]
 80061f6:	3104      	adds	r1, #4
 80061f8:	f7ff ff24 	bl	8006044 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvAddCurrentTaskToDelayedList+0x84>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006202:	bf88      	it	hi
 8006204:	601c      	strhi	r4, [r3, #0]
}
 8006206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006208:	2f00      	cmp	r7, #0
 800620a:	d0e5      	beq.n	80061d8 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620c:	6831      	ldr	r1, [r6, #0]
 800620e:	4809      	ldr	r0, [pc, #36]	; (8006234 <prvAddCurrentTaskToDelayedList+0x88>)
 8006210:	3104      	adds	r1, #4
}
 8006212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006216:	f7ff bf07 	b.w	8006028 <vListInsertEnd>
 800621a:	bf00      	nop
 800621c:	20000764 	.word	0x20000764
 8006220:	20000644 	.word	0x20000644
 8006224:	200006f0 	.word	0x200006f0
 8006228:	2000064c 	.word	0x2000064c
 800622c:	20000648 	.word	0x20000648
 8006230:	2000071c 	.word	0x2000071c
 8006234:	2000073c 	.word	0x2000073c

08006238 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	460e      	mov	r6, r1
 800623e:	e9dd 7509 	ldrd	r7, r5, [sp, #36]	; 0x24
 8006242:	4681      	mov	r9, r0
 8006244:	469a      	mov	sl, r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006246:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8006248:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800624c:	3a01      	subs	r2, #1
 800624e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8006252:	f105 0e33 	add.w	lr, r5, #51	; 0x33
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006256:	f024 0807 	bic.w	r8, r4, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800625a:	f101 3cff 	add.w	ip, r1, #4294967295
 800625e:	360f      	adds	r6, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006260:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8006264:	f80e 4f01 	strb.w	r4, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8006268:	b10c      	cbz	r4, 800626e <prvInitialiseNewTask.constprop.0+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800626a:	45b4      	cmp	ip, r6
 800626c:	d1f8      	bne.n	8006260 <prvInitialiseNewTask.constprop.0+0x28>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800626e:	9c08      	ldr	r4, [sp, #32]
 8006270:	2600      	movs	r6, #0
 8006272:	2c06      	cmp	r4, #6
 8006274:	bf28      	it	cs
 8006276:	2406      	movcs	r4, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006278:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 800627a:	e9c5 4611 	strd	r4, r6, [r5, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 800627e:	62ec      	str	r4, [r5, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006280:	f885 6043 	strb.w	r6, [r5, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006284:	f7ff fecc 	bl	8006020 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006288:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800628c:	f105 0018 	add.w	r0, r5, #24
 8006290:	f7ff fec6 	bl	8006020 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006294:	64ee      	str	r6, [r5, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006296:	4652      	mov	r2, sl
 8006298:	4649      	mov	r1, r9
 800629a:	4640      	mov	r0, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629c:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800629e:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062a2:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062a4:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062a6:	f000 fb5f 	bl	8006968 <pxPortInitialiseStack>
 80062aa:	6028      	str	r0, [r5, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80062ac:	b107      	cbz	r7, 80062b0 <prvInitialiseNewTask.constprop.0+0x78>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062ae:	603d      	str	r5, [r7, #0]
}
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080062b4 <prvIdleTask>:
				taskYIELD();
 80062b4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80062b8:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	4c1f      	ldr	r4, [pc, #124]	; (800633c <prvIdleTask+0x88>)
 80062c0:	4e1f      	ldr	r6, [pc, #124]	; (8006340 <prvIdleTask+0x8c>)
 80062c2:	4d20      	ldr	r5, [pc, #128]	; (8006344 <prvIdleTask+0x90>)
 80062c4:	4f20      	ldr	r7, [pc, #128]	; (8006348 <prvIdleTask+0x94>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	b353      	cbz	r3, 8006320 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 80062ca:	f000 fb73 	bl	80069b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062ce:	68f3      	ldr	r3, [r6, #12]
 80062d0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d4:	f10a 0004 	add.w	r0, sl, #4
 80062d8:	f7ff fecc 	bl	8006074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	3b01      	subs	r3, #1
 80062e0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80062e8:	f000 fb86 	bl	80069f8 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062ec:	f89a 3051 	ldrb.w	r3, [sl, #81]	; 0x51
 80062f0:	b163      	cbz	r3, 800630c <prvIdleTask+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d01e      	beq.n	8006334 <prvIdleTask+0x80>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d0e5      	beq.n	80062c6 <prvIdleTask+0x12>
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	e7fe      	b.n	800630a <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 800630c:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8006310:	f000 fcf8 	bl	8006d04 <vPortFree>
				vPortFree( pxTCB );
 8006314:	4650      	mov	r0, sl
 8006316:	f000 fcf5 	bl	8006d04 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1d4      	bne.n	80062ca <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d9cf      	bls.n	80062c6 <prvIdleTask+0x12>
				taskYIELD();
 8006326:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	e7c8      	b.n	80062c6 <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8006334:	4650      	mov	r0, sl
 8006336:	f000 fce5 	bl	8006d04 <vPortFree>
 800633a:	e7c4      	b.n	80062c6 <prvIdleTask+0x12>
 800633c:	200006e0 	.word	0x200006e0
 8006340:	20000750 	.word	0x20000750
 8006344:	200006dc 	.word	0x200006dc
 8006348:	20000650 	.word	0x20000650

0800634c <xTaskCreateStatic>:
	{
 800634c:	b530      	push	{r4, r5, lr}
 800634e:	b087      	sub	sp, #28
 8006350:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006352:	b1c4      	cbz	r4, 8006386 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8006354:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006356:	b16d      	cbz	r5, 8006374 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006358:	2554      	movs	r5, #84	; 0x54
 800635a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800635c:	9d05      	ldr	r5, [sp, #20]
 800635e:	2d54      	cmp	r5, #84	; 0x54
 8006360:	d01a      	beq.n	8006398 <xTaskCreateStatic+0x4c>
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	e7fe      	b.n	8006372 <xTaskCreateStatic+0x26>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006384:	e7fe      	b.n	8006384 <xTaskCreateStatic+0x38>
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006396:	e7fe      	b.n	8006396 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006398:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800639a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800639c:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800639e:	9502      	str	r5, [sp, #8]
 80063a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80063a2:	9500      	str	r5, [sp, #0]
 80063a4:	ad04      	add	r5, sp, #16
 80063a6:	9501      	str	r5, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063aa:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063ae:	f7ff ff43 	bl	8006238 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80063b4:	f7ff fe70 	bl	8006098 <prvAddNewTaskToReadyList>
	}
 80063b8:	9804      	ldr	r0, [sp, #16]
 80063ba:	b007      	add	sp, #28
 80063bc:	bd30      	pop	{r4, r5, pc}
 80063be:	bf00      	nop

080063c0 <xTaskCreate>:
	{
 80063c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4607      	mov	r7, r0
 80063c6:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c8:	0090      	lsls	r0, r2, #2
	{
 80063ca:	4615      	mov	r5, r2
 80063cc:	4688      	mov	r8, r1
 80063ce:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d0:	f000 fc06 	bl	8006be0 <pvPortMalloc>
			if( pxStack != NULL )
 80063d4:	b1d8      	cbz	r0, 800640e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80063d6:	4604      	mov	r4, r0
 80063d8:	2054      	movs	r0, #84	; 0x54
 80063da:	f000 fc01 	bl	8006be0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80063de:	4606      	mov	r6, r0
 80063e0:	b1d0      	cbz	r0, 8006418 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80063e2:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063e4:	2400      	movs	r4, #0
 80063e6:	f886 4051 	strb.w	r4, [r6, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80063ec:	464b      	mov	r3, r9
 80063ee:	9401      	str	r4, [sp, #4]
 80063f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80063f2:	462a      	mov	r2, r5
 80063f4:	4641      	mov	r1, r8
 80063f6:	4638      	mov	r0, r7
 80063f8:	9602      	str	r6, [sp, #8]
 80063fa:	9400      	str	r4, [sp, #0]
 80063fc:	f7ff ff1c 	bl	8006238 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006400:	4630      	mov	r0, r6
 8006402:	f7ff fe49 	bl	8006098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006406:	2001      	movs	r0, #1
	}
 8006408:	b005      	add	sp, #20
 800640a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006412:	b005      	add	sp, #20
 8006414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fc73 	bl	8006d04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800641e:	f04f 30ff 	mov.w	r0, #4294967295
 8006422:	e7f1      	b.n	8006408 <xTaskCreate+0x48>

08006424 <vTaskStartScheduler>:
{
 8006424:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006426:	2400      	movs	r4, #0
{
 8006428:	b089      	sub	sp, #36	; 0x24
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800642a:	aa07      	add	r2, sp, #28
 800642c:	a906      	add	r1, sp, #24
 800642e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006430:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006434:	f7fb fbf4 	bl	8001c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006438:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800643c:	4623      	mov	r3, r4
 800643e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006442:	9a07      	ldr	r2, [sp, #28]
 8006444:	490e      	ldr	r1, [pc, #56]	; (8006480 <vTaskStartScheduler+0x5c>)
 8006446:	480f      	ldr	r0, [pc, #60]	; (8006484 <vTaskStartScheduler+0x60>)
 8006448:	9400      	str	r4, [sp, #0]
 800644a:	f7ff ff7f 	bl	800634c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800644e:	b1a8      	cbz	r0, 800647c <vTaskStartScheduler+0x58>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006460:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8006464:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8006466:	4808      	ldr	r0, [pc, #32]	; (8006488 <vTaskStartScheduler+0x64>)
		xSchedulerRunning = pdTRUE;
 8006468:	4a08      	ldr	r2, [pc, #32]	; (800648c <vTaskStartScheduler+0x68>)
		xTickCount = ( TickType_t ) 0U;
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <vTaskStartScheduler+0x6c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800646c:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 800646e:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8006470:	601c      	str	r4, [r3, #0]
}
 8006472:	b009      	add	sp, #36	; 0x24
 8006474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006478:	f000 bb20 	b.w	8006abc <xPortStartScheduler>
}
 800647c:	b009      	add	sp, #36	; 0x24
 800647e:	bd30      	pop	{r4, r5, pc}
 8006480:	08007548 	.word	0x08007548
 8006484:	080062b5 	.word	0x080062b5
 8006488:	2000071c 	.word	0x2000071c
 800648c:	20000738 	.word	0x20000738
 8006490:	20000764 	.word	0x20000764

08006494 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006494:	4a02      	ldr	r2, [pc, #8]	; (80064a0 <vTaskSuspendAll+0xc>)
 8006496:	6813      	ldr	r3, [r2, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	200006e8 	.word	0x200006e8

080064a4 <xTaskIncrementTick>:
{
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a8:	4b4e      	ldr	r3, [pc, #312]	; (80065e4 <xTaskIncrementTick+0x140>)
{
 80064aa:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d148      	bne.n	8006544 <xTaskIncrementTick+0xa0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064b2:	4b4d      	ldr	r3, [pc, #308]	; (80065e8 <xTaskIncrementTick+0x144>)
 80064b4:	681d      	ldr	r5, [r3, #0]
 80064b6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80064b8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	d050      	beq.n	8006560 <xTaskIncrementTick+0xbc>
 80064be:	4b4b      	ldr	r3, [pc, #300]	; (80065ec <xTaskIncrementTick+0x148>)
 80064c0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064c2:	9b01      	ldr	r3, [sp, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	42ab      	cmp	r3, r5
 80064c8:	d857      	bhi.n	800657a <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ca:	4e49      	ldr	r6, [pc, #292]	; (80065f0 <xTaskIncrementTick+0x14c>)
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	681c      	ldr	r4, [r3, #0]
 80064d0:	2c00      	cmp	r4, #0
 80064d2:	d075      	beq.n	80065c0 <xTaskIncrementTick+0x11c>
BaseType_t xSwitchRequired = pdFALSE;
 80064d4:	2400      	movs	r4, #0
 80064d6:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80065f4 <xTaskIncrementTick+0x150>
 80064da:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80065f8 <xTaskIncrementTick+0x154>
					prvAddTaskToReadyList( pxTCB );
 80064de:	4f47      	ldr	r7, [pc, #284]	; (80065fc <xTaskIncrementTick+0x158>)
 80064e0:	e023      	b.n	800652a <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e2:	4650      	mov	r0, sl
 80064e4:	f7ff fdc6 	bl	8006074 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064e8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064ec:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064f0:	b10a      	cbz	r2, 80064f6 <xTaskIncrementTick+0x52>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064f2:	f7ff fdbf 	bl	8006074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	4082      	lsls	r2, r0
 8006500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006504:	431a      	orrs	r2, r3
 8006506:	4651      	mov	r1, sl
 8006508:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800650c:	603a      	str	r2, [r7, #0]
 800650e:	f7ff fd8b 	bl	8006028 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006512:	f8d9 3000 	ldr.w	r3, [r9]
 8006516:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800651c:	429a      	cmp	r2, r3
 800651e:	bf28      	it	cs
 8006520:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006522:	6833      	ldr	r3, [r6, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d04e      	beq.n	80065c8 <xTaskIncrementTick+0x124>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800652a:	6833      	ldr	r3, [r6, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006532:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006536:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800653a:	4295      	cmp	r5, r2
 800653c:	d2d1      	bcs.n	80064e2 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	601a      	str	r2, [r3, #0]
						break;
 8006542:	e01f      	b.n	8006584 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 8006544:	2400      	movs	r4, #0
		++uxPendedTicks;
 8006546:	4a2e      	ldr	r2, [pc, #184]	; (8006600 <xTaskIncrementTick+0x15c>)
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 800654e:	4b2d      	ldr	r3, [pc, #180]	; (8006604 <xTaskIncrementTick+0x160>)
 8006550:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006552:	2b00      	cmp	r3, #0
}
 8006554:	bf0c      	ite	eq
 8006556:	4620      	moveq	r0, r4
 8006558:	2001      	movne	r0, #1
 800655a:	b003      	add	sp, #12
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006560:	4b23      	ldr	r3, [pc, #140]	; (80065f0 <xTaskIncrementTick+0x14c>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	b1ca      	cbz	r2, 800659c <xTaskIncrementTick+0xf8>
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	e7fe      	b.n	8006578 <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 800657a:	2400      	movs	r4, #0
 800657c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80065f4 <xTaskIncrementTick+0x150>
 8006580:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80065f8 <xTaskIncrementTick+0x154>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006584:	f8d9 3000 	ldr.w	r3, [r9]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8006594:	2b02      	cmp	r3, #2
 8006596:	bf28      	it	cs
 8006598:	2401      	movcs	r4, #1
 800659a:	e7d8      	b.n	800654e <xTaskIncrementTick+0xaa>
			taskSWITCH_DELAYED_LISTS();
 800659c:	4a1a      	ldr	r2, [pc, #104]	; (8006608 <xTaskIncrementTick+0x164>)
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	6811      	ldr	r1, [r2, #0]
 80065a2:	6019      	str	r1, [r3, #0]
 80065a4:	4919      	ldr	r1, [pc, #100]	; (800660c <xTaskIncrementTick+0x168>)
 80065a6:	6010      	str	r0, [r2, #0]
 80065a8:	680a      	ldr	r2, [r1, #0]
 80065aa:	3201      	adds	r2, #1
 80065ac:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	b972      	cbnz	r2, 80065d2 <xTaskIncrementTick+0x12e>
		xNextTaskUnblockTime = portMAX_DELAY;
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295
 80065b8:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <xTaskIncrementTick+0x148>)
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e780      	b.n	80064c2 <xTaskIncrementTick+0x1e>
 80065c0:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80065f4 <xTaskIncrementTick+0x150>
 80065c4:	f8df 9030 	ldr.w	r9, [pc, #48]	; 80065f8 <xTaskIncrementTick+0x154>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295
 80065cc:	9a01      	ldr	r2, [sp, #4]
 80065ce:	6013      	str	r3, [r2, #0]
					break;
 80065d0:	e7d8      	b.n	8006584 <xTaskIncrementTick+0xe0>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065d2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065d4:	4a05      	ldr	r2, [pc, #20]	; (80065ec <xTaskIncrementTick+0x148>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065d6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065d8:	9201      	str	r2, [sp, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	6013      	str	r3, [r2, #0]
}
 80065e0:	e76f      	b.n	80064c2 <xTaskIncrementTick+0x1e>
 80065e2:	bf00      	nop
 80065e4:	200006e8 	.word	0x200006e8
 80065e8:	20000764 	.word	0x20000764
 80065ec:	2000071c 	.word	0x2000071c
 80065f0:	20000648 	.word	0x20000648
 80065f4:	20000650 	.word	0x20000650
 80065f8:	20000644 	.word	0x20000644
 80065fc:	200006f0 	.word	0x200006f0
 8006600:	200006e4 	.word	0x200006e4
 8006604:	20000768 	.word	0x20000768
 8006608:	2000064c 	.word	0x2000064c
 800660c:	20000720 	.word	0x20000720

08006610 <xTaskResumeAll>:
{
 8006610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8006614:	4c3d      	ldr	r4, [pc, #244]	; (800670c <xTaskResumeAll+0xfc>)
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	b943      	cbnz	r3, 800662c <xTaskResumeAll+0x1c>
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	e7fe      	b.n	800662a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800662c:	f000 f9c2 	bl	80069b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	3b01      	subs	r3, #1
 8006634:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d159      	bne.n	80066f0 <xTaskResumeAll+0xe0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800663c:	4b34      	ldr	r3, [pc, #208]	; (8006710 <xTaskResumeAll+0x100>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d055      	beq.n	80066f0 <xTaskResumeAll+0xe0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006644:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8006714 <xTaskResumeAll+0x104>
 8006648:	f8da 3000 	ldr.w	r3, [sl]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05a      	beq.n	8006706 <xTaskResumeAll+0xf6>
					prvAddTaskToReadyList( pxTCB );
 8006650:	2601      	movs	r6, #1
 8006652:	4d31      	ldr	r5, [pc, #196]	; (8006718 <xTaskResumeAll+0x108>)
 8006654:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800671c <xTaskResumeAll+0x10c>
 8006658:	4f31      	ldr	r7, [pc, #196]	; (8006720 <xTaskResumeAll+0x110>)
 800665a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8006724 <xTaskResumeAll+0x114>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800665e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006662:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006668:	f104 0018 	add.w	r0, r4, #24
 800666c:	f7ff fd02 	bl	8006074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006670:	4658      	mov	r0, fp
 8006672:	f7ff fcff 	bl	8006074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006676:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006678:	682a      	ldr	r2, [r5, #0]
 800667a:	fa06 f300 	lsl.w	r3, r6, r0
 800667e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006682:	4313      	orrs	r3, r2
 8006684:	4659      	mov	r1, fp
 8006686:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800668a:	602b      	str	r3, [r5, #0]
 800668c:	f7ff fccc 	bl	8006028 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8006698:	bf28      	it	cs
 800669a:	f8c9 6000 	strcs.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800669e:	f8da 3000 	ldr.w	r3, [sl]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1db      	bne.n	800665e <xTaskResumeAll+0x4e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a6:	4b20      	ldr	r3, [pc, #128]	; (8006728 <xTaskResumeAll+0x118>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	b332      	cbz	r2, 80066fc <xTaskResumeAll+0xec>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066ae:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066b0:	4b1e      	ldr	r3, [pc, #120]	; (800672c <xTaskResumeAll+0x11c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066b2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066b4:	68d2      	ldr	r2, [r2, #12]
 80066b6:	6852      	ldr	r2, [r2, #4]
 80066b8:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066ba:	4d1d      	ldr	r5, [pc, #116]	; (8006730 <xTaskResumeAll+0x120>)
 80066bc:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066be:	b144      	cbz	r4, 80066d2 <xTaskResumeAll+0xc2>
								xYieldPending = pdTRUE;
 80066c0:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80066c2:	f7ff feef 	bl	80064a4 <xTaskIncrementTick>
 80066c6:	b108      	cbz	r0, 80066cc <xTaskResumeAll+0xbc>
								xYieldPending = pdTRUE;
 80066c8:	f8c9 6000 	str.w	r6, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066cc:	3c01      	subs	r4, #1
 80066ce:	d1f8      	bne.n	80066c2 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80066d0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80066d2:	f8d9 3000 	ldr.w	r3, [r9]
 80066d6:	b15b      	cbz	r3, 80066f0 <xTaskResumeAll+0xe0>
					taskYIELD_IF_USING_PREEMPTION();
 80066d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80066dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80066ec:	2401      	movs	r4, #1
 80066ee:	e000      	b.n	80066f2 <xTaskResumeAll+0xe2>
BaseType_t xAlreadyYielded = pdFALSE;
 80066f0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80066f2:	f000 f981 	bl	80069f8 <vPortExitCritical>
}
 80066f6:	4620      	mov	r0, r4
 80066f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80066fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <xTaskResumeAll+0x11c>)
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e7d9      	b.n	80066ba <xTaskResumeAll+0xaa>
 8006706:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8006724 <xTaskResumeAll+0x114>
 800670a:	e7d6      	b.n	80066ba <xTaskResumeAll+0xaa>
 800670c:	200006e8 	.word	0x200006e8
 8006710:	200006dc 	.word	0x200006dc
 8006714:	20000724 	.word	0x20000724
 8006718:	200006f0 	.word	0x200006f0
 800671c:	20000650 	.word	0x20000650
 8006720:	20000644 	.word	0x20000644
 8006724:	20000768 	.word	0x20000768
 8006728:	20000648 	.word	0x20000648
 800672c:	2000071c 	.word	0x2000071c
 8006730:	200006e4 	.word	0x200006e4

08006734 <vTaskDelay>:
	{
 8006734:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006736:	b198      	cbz	r0, 8006760 <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 8006738:	4b0f      	ldr	r3, [pc, #60]	; (8006778 <vTaskDelay+0x44>)
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	b141      	cbz	r1, 8006750 <vTaskDelay+0x1c>
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	e7fe      	b.n	800674e <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	3201      	adds	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006756:	f7ff fd29 	bl	80061ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800675a:	f7ff ff59 	bl	8006610 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800675e:	b948      	cbnz	r0, 8006774 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006760:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006768:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
	}
 8006774:	bd08      	pop	{r3, pc}
 8006776:	bf00      	nop
 8006778:	200006e8 	.word	0x200006e8

0800677c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800677c:	4b17      	ldr	r3, [pc, #92]	; (80067dc <vTaskSwitchContext+0x60>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	b11b      	cbz	r3, 800678a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006782:	2201      	movs	r2, #1
 8006784:	4b16      	ldr	r3, [pc, #88]	; (80067e0 <vTaskSwitchContext+0x64>)
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800678a:	4915      	ldr	r1, [pc, #84]	; (80067e0 <vTaskSwitchContext+0x64>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800678c:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800678e:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006790:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006792:	fab3 f383 	clz	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f1c3 031f 	rsb	r3, r3, #31
 800679c:	4a12      	ldr	r2, [pc, #72]	; (80067e8 <vTaskSwitchContext+0x6c>)
 800679e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067a2:	0099      	lsls	r1, r3, #2
 80067a4:	5850      	ldr	r0, [r2, r1]
 80067a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067aa:	b940      	cbnz	r0, 80067be <vTaskSwitchContext+0x42>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	e7fe      	b.n	80067bc <vTaskSwitchContext+0x40>
 80067be:	6858      	ldr	r0, [r3, #4]
 80067c0:	3108      	adds	r1, #8
 80067c2:	6840      	ldr	r0, [r0, #4]
 80067c4:	440a      	add	r2, r1
 80067c6:	4290      	cmp	r0, r2
 80067c8:	6058      	str	r0, [r3, #4]
 80067ca:	bf08      	it	eq
 80067cc:	6840      	ldreq	r0, [r0, #4]
 80067ce:	68c2      	ldr	r2, [r0, #12]
 80067d0:	bf08      	it	eq
 80067d2:	6058      	streq	r0, [r3, #4]
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <vTaskSwitchContext+0x70>)
 80067d6:	601a      	str	r2, [r3, #0]
}
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	200006e8 	.word	0x200006e8
 80067e0:	20000768 	.word	0x20000768
 80067e4:	200006f0 	.word	0x200006f0
 80067e8:	20000650 	.word	0x20000650
 80067ec:	20000644 	.word	0x20000644

080067f0 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80067f0:	b1e8      	cbz	r0, 800682e <vTaskPlaceOnUnorderedEventList+0x3e>
	configASSERT( uxSchedulerSuspended != 0 );
 80067f2:	4b13      	ldr	r3, [pc, #76]	; (8006840 <vTaskPlaceOnUnorderedEventList+0x50>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	b943      	cbnz	r3, 800680a <vTaskPlaceOnUnorderedEventList+0x1a>
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	e7fe      	b.n	8006808 <vTaskPlaceOnUnorderedEventList+0x18>
{
 800680a:	b510      	push	{r4, lr}
 800680c:	4614      	mov	r4, r2
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800680e:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006810:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006814:	681a      	ldr	r2, [r3, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006816:	681b      	ldr	r3, [r3, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006818:	6191      	str	r1, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800681a:	f103 0118 	add.w	r1, r3, #24
 800681e:	f7ff fc03 	bl	8006028 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006822:	4620      	mov	r0, r4
}
 8006824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006828:	2101      	movs	r1, #1
 800682a:	f7ff bcbf 	b.w	80061ac <prvAddCurrentTaskToDelayedList>
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800683e:	e7fe      	b.n	800683e <vTaskPlaceOnUnorderedEventList+0x4e>
 8006840:	200006e8 	.word	0x200006e8
 8006844:	20000644 	.word	0x20000644

08006848 <vTaskRemoveFromUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006848:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <vTaskRemoveFromUnorderedEventList+0x74>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	b942      	cbnz	r2, 8006860 <vTaskRemoveFromUnorderedEventList+0x18>
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	e7fe      	b.n	800685e <vTaskRemoveFromUnorderedEventList+0x16>
{
 8006860:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006862:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006864:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006868:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 800686a:	b1f4      	cbz	r4, 80068aa <vTaskRemoveFromUnorderedEventList+0x62>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800686c:	2601      	movs	r6, #1
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800686e:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 8006870:	f7ff fc00 	bl	8006074 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006874:	4628      	mov	r0, r5
 8006876:	f7ff fbfd 	bl	8006074 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800687a:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <vTaskRemoveFromUnorderedEventList+0x78>)
 800687c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800687e:	4629      	mov	r1, r5
 8006880:	4810      	ldr	r0, [pc, #64]	; (80068c4 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8006882:	6815      	ldr	r5, [r2, #0]
 8006884:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8006888:	fa06 f303 	lsl.w	r3, r6, r3
 800688c:	432b      	orrs	r3, r5
 800688e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	f7ff fbc8 	bl	8006028 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <vTaskRemoveFromUnorderedEventList+0x80>)
 800689a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80068a2:	bf84      	itt	hi
 80068a4:	4b09      	ldrhi	r3, [pc, #36]	; (80068cc <vTaskRemoveFromUnorderedEventList+0x84>)
 80068a6:	601e      	strhi	r6, [r3, #0]
}
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80068ba:	e7fe      	b.n	80068ba <vTaskRemoveFromUnorderedEventList+0x72>
 80068bc:	200006e8 	.word	0x200006e8
 80068c0:	200006f0 	.word	0x200006f0
 80068c4:	20000650 	.word	0x20000650
 80068c8:	20000644 	.word	0x20000644
 80068cc:	20000768 	.word	0x20000768

080068d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <xTaskGetSchedulerState+0x18>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b133      	cbz	r3, 80068e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <xTaskGetSchedulerState+0x1c>)
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	fab0 f080 	clz	r0, r0
 80068de:	0940      	lsrs	r0, r0, #5
 80068e0:	0040      	lsls	r0, r0, #1
 80068e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068e4:	2001      	movs	r0, #1
	}
 80068e6:	4770      	bx	lr
 80068e8:	20000738 	.word	0x20000738
 80068ec:	200006e8 	.word	0x200006e8

080068f0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80068f0:	4a04      	ldr	r2, [pc, #16]	; (8006904 <uxTaskResetEventItemValue+0x14>)
 80068f2:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f4:	6813      	ldr	r3, [r2, #0]
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80068fa:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068fc:	f1c3 0307 	rsb	r3, r3, #7
 8006900:	6193      	str	r3, [r2, #24]
}
 8006902:	4770      	bx	lr
 8006904:	20000644 	.word	0x20000644

08006908 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006908:	4806      	ldr	r0, [pc, #24]	; (8006924 <prvPortStartFirstTask+0x1c>)
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	6800      	ldr	r0, [r0, #0]
 800690e:	f380 8808 	msr	MSP, r0
 8006912:	b662      	cpsie	i
 8006914:	b661      	cpsie	f
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	df00      	svc	0
 8006920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006922:	0000      	.short	0x0000
 8006924:	e000ed08 	.word	0xe000ed08

08006928 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8006928:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800692a:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <prvTaskExitError+0x3c>)
{
 800692c:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 800692e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 8006930:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006932:	3301      	adds	r3, #1
 8006934:	d008      	beq.n	8006948 <prvTaskExitError+0x20>
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	e7fe      	b.n	8006946 <prvTaskExitError+0x1e>
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006958:	9b01      	ldr	r3, [sp, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0fc      	beq.n	8006958 <prvTaskExitError+0x30>
}
 800695e:	b002      	add	sp, #8
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000009c 	.word	0x2000009c

08006968 <pxPortInitialiseStack>:
{
 8006968:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800696a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006970:	f021 0101 	bic.w	r1, r1, #1
 8006974:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006978:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800697c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006980:	bc10      	pop	{r4}
 8006982:	3840      	subs	r0, #64	; 0x40
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	08006929 	.word	0x08006929
 800698c:	00000000 	.word	0x00000000

08006990 <SVC_Handler>:
	__asm volatile (
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <pxCurrentTCBConst2>)
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	6808      	ldr	r0, [r1, #0]
 8006996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800699a:	f380 8809 	msr	PSP, r0
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8811 	msr	BASEPRI, r0
 80069aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80069ae:	4770      	bx	lr

080069b0 <pxCurrentTCBConst2>:
 80069b0:	20000644 	.word	0x20000644

080069b4 <vPortEnterCritical>:
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069c4:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <vPortEnterCritical+0x40>)
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80069cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80069ce:	d000      	beq.n	80069d2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80069d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f7      	beq.n	80069d0 <vPortEnterCritical+0x1c>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	e7fe      	b.n	80069f0 <vPortEnterCritical+0x3c>
 80069f2:	bf00      	nop
 80069f4:	2000009c 	.word	0x2000009c

080069f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80069f8:	4a08      	ldr	r2, [pc, #32]	; (8006a1c <vPortExitCritical+0x24>)
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	b943      	cbnz	r3, 8006a10 <vPortExitCritical+0x18>
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	e7fe      	b.n	8006a0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006a10:	3b01      	subs	r3, #1
 8006a12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a14:	b90b      	cbnz	r3, 8006a1a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a16:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a1a:	4770      	bx	lr
 8006a1c:	2000009c 	.word	0x2000009c

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a3a:	f380 8811 	msr	BASEPRI, r0
 8006a3e:	f7ff fe9d 	bl	800677c <vTaskSwitchContext>
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8811 	msr	BASEPRI, r0
 8006a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a56:	f380 8809 	msr	PSP, r0
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	4770      	bx	lr

08006a60 <pxCurrentTCBConst>:
 8006a60:	20000644 	.word	0x20000644

08006a64 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a64:	b508      	push	{r3, lr}
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a76:	f7ff fd15 	bl	80064a4 <xTaskIncrementTick>
 8006a7a:	b128      	cbz	r0, 8006a88 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a8e:	bd08      	pop	{r3, pc}

08006a90 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a90:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006a94:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a96:	2007      	movs	r0, #7
{
 8006a98:	b410      	push	{r4}
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a9a:	4c06      	ldr	r4, [pc, #24]	; (8006ab4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a9c:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a9e:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	4905      	ldr	r1, [pc, #20]	; (8006ab8 <vPortSetupTimerInterrupt+0x28>)
}
 8006aa4:	bc10      	pop	{r4}
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aa6:	fba1 1303 	umull	r1, r3, r1, r3
 8006aaa:	099b      	lsrs	r3, r3, #6
 8006aac:	3b01      	subs	r3, #1
 8006aae:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ab0:	6110      	str	r0, [r2, #16]
}
 8006ab2:	4770      	bx	lr
 8006ab4:	20000090 	.word	0x20000090
 8006ab8:	10624dd3 	.word	0x10624dd3

08006abc <xPortStartScheduler>:
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006abc:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ac0:	2007      	movs	r0, #7
{
 8006ac2:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ac4:	4b2a      	ldr	r3, [pc, #168]	; (8006b70 <xPortStartScheduler+0xb4>)
{
 8006ac6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ac8:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aca:	4c2a      	ldr	r4, [pc, #168]	; (8006b74 <xPortStartScheduler+0xb8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ad0:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ad6:	4928      	ldr	r1, [pc, #160]	; (8006b78 <xPortStartScheduler+0xbc>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ade:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ae2:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ae6:	6020      	str	r0, [r4, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ae8:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aec:	0610      	lsls	r0, r2, #24
 8006aee:	bf48      	it	mi
 8006af0:	2206      	movmi	r2, #6
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006af2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006af4:	d510      	bpl.n	8006b18 <xPortStartScheduler+0x5c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006afa:	4610      	mov	r0, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b04:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8006b08:	3a01      	subs	r2, #1
 8006b0a:	0609      	lsls	r1, r1, #24
 8006b0c:	d4f3      	bmi.n	8006af6 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b0e:	2803      	cmp	r0, #3
 8006b10:	6020      	str	r0, [r4, #0]
 8006b12:	f88d 3003 	strb.w	r3, [sp, #3]
 8006b16:	d008      	beq.n	8006b2a <xPortStartScheduler+0x6e>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	e7fe      	b.n	8006b28 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b2a:	f44f 7040 	mov.w	r0, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8006b32:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b34:	9a01      	ldr	r2, [sp, #4]
 8006b36:	490e      	ldr	r1, [pc, #56]	; (8006b70 <xPortStartScheduler+0xb4>)
 8006b38:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b3a:	6020      	str	r0, [r4, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b3c:	700a      	strb	r2, [r1, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b3e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006b42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006b46:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b4a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006b4e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006b52:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006b56:	f7ff ff9b 	bl	8006a90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <xPortStartScheduler+0xc0>)
 8006b5c:	601d      	str	r5, [r3, #0]
	prvPortStartFirstTask();
 8006b5e:	f7ff fed3 	bl	8006908 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006b62:	f7ff fe0b 	bl	800677c <vTaskSwitchContext>
}
 8006b66:	4628      	mov	r0, r5
	prvTaskExitError();
 8006b68:	f7ff fede 	bl	8006928 <prvTaskExitError>
}
 8006b6c:	b003      	add	sp, #12
 8006b6e:	bd30      	pop	{r4, r5, pc}
 8006b70:	e000e400 	.word	0xe000e400
 8006b74:	20000770 	.word	0x20000770
 8006b78:	2000076c 	.word	0x2000076c
 8006b7c:	2000009c 	.word	0x2000009c

08006b80 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b80:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <prvInsertBlockIntoFreeList+0x58>)
 8006b82:	461a      	mov	r2, r3
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4283      	cmp	r3, r0
 8006b88:	d3fb      	bcc.n	8006b82 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b8a:	6851      	ldr	r1, [r2, #4]
 8006b8c:	eb02 0c01 	add.w	ip, r2, r1
 8006b90:	4560      	cmp	r0, ip
 8006b92:	d018      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x46>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b94:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b96:	eb00 0c01 	add.w	ip, r0, r1
 8006b9a:	4563      	cmp	r3, ip
 8006b9c:	d005      	beq.n	8006baa <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b9e:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ba0:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ba2:	bf18      	it	ne
 8006ba4:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006ba6:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ba8:	4610      	mov	r0, r2
{
 8006baa:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bac:	4c0b      	ldr	r4, [pc, #44]	; (8006bdc <prvInsertBlockIntoFreeList+0x5c>)
 8006bae:	6824      	ldr	r4, [r4, #0]
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d002      	beq.n	8006bba <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bb4:	cb18      	ldmia	r3, {r3, r4}
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bb6:	4421      	add	r1, r4
 8006bb8:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 8006bba:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bbc:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006bbe:	d000      	beq.n	8006bc2 <prvInsertBlockIntoFreeList+0x42>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bc0:	6010      	str	r0, [r2, #0]
	}
}
 8006bc2:	bc10      	pop	{r4}
 8006bc4:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bc6:	6840      	ldr	r0, [r0, #4]
 8006bc8:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bca:	1850      	adds	r0, r2, r1
 8006bcc:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bce:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bd0:	d0ea      	beq.n	8006ba8 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd2:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	20001384 	.word	0x20001384
 8006bdc:	20000774 	.word	0x20000774

08006be0 <pvPortMalloc>:
{
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8006be4:	4d41      	ldr	r5, [pc, #260]	; (8006cec <pvPortMalloc+0x10c>)
{
 8006be6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006be8:	f7ff fc54 	bl	8006494 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d057      	beq.n	8006ca2 <pvPortMalloc+0xc2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf2:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <pvPortMalloc+0x110>)
 8006bf4:	681e      	ldr	r6, [r3, #0]
 8006bf6:	4234      	tst	r4, r6
 8006bf8:	d12f      	bne.n	8006c5a <pvPortMalloc+0x7a>
			if( xWantedSize > 0 )
 8006bfa:	b374      	cbz	r4, 8006c5a <pvPortMalloc+0x7a>
				xWantedSize += xHeapStructSize;
 8006bfc:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c00:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c02:	bf1c      	itt	ne
 8006c04:	f021 0107 	bicne.w	r1, r1, #7
 8006c08:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c0a:	b331      	cbz	r1, 8006c5a <pvPortMalloc+0x7a>
 8006c0c:	4f39      	ldr	r7, [pc, #228]	; (8006cf4 <pvPortMalloc+0x114>)
 8006c0e:	f8d7 8000 	ldr.w	r8, [r7]
 8006c12:	4588      	cmp	r8, r1
 8006c14:	d321      	bcc.n	8006c5a <pvPortMalloc+0x7a>
				pxBlock = xStart.pxNextFreeBlock;
 8006c16:	4b38      	ldr	r3, [pc, #224]	; (8006cf8 <pvPortMalloc+0x118>)
				pxPreviousBlock = &xStart;
 8006c18:	4618      	mov	r0, r3
				pxBlock = xStart.pxNextFreeBlock;
 8006c1a:	681c      	ldr	r4, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c1c:	e003      	b.n	8006c26 <pvPortMalloc+0x46>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	b123      	cbz	r3, 8006c2c <pvPortMalloc+0x4c>
 8006c22:	4620      	mov	r0, r4
 8006c24:	461c      	mov	r4, r3
 8006c26:	6862      	ldr	r2, [r4, #4]
 8006c28:	428a      	cmp	r2, r1
 8006c2a:	d3f8      	bcc.n	8006c1e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	d013      	beq.n	8006c5a <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c32:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c34:	6805      	ldr	r5, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c36:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c38:	1a53      	subs	r3, r2, r1
 8006c3a:	2b10      	cmp	r3, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c3c:	f105 0508 	add.w	r5, r5, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c40:	d916      	bls.n	8006c70 <pvPortMalloc+0x90>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c42:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c44:	0742      	lsls	r2, r0, #29
 8006c46:	d00e      	beq.n	8006c66 <pvPortMalloc+0x86>
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	e7fe      	b.n	8006c58 <pvPortMalloc+0x78>
	( void ) xTaskResumeAll();
 8006c5a:	f7ff fcd9 	bl	8006610 <xTaskResumeAll>
 8006c5e:	2500      	movs	r5, #0
}
 8006c60:	4628      	mov	r0, r5
 8006c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c66:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c68:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c6a:	f7ff ff89 	bl	8006b80 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c6e:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c70:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c72:	eba8 0102 	sub.w	r1, r8, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c76:	6818      	ldr	r0, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c78:	6039      	str	r1, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c7a:	4281      	cmp	r1, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c7c:	bf38      	it	cc
 8006c7e:	6019      	strcc	r1, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006c80:	2100      	movs	r1, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c82:	4332      	orrs	r2, r6
					pxBlock->pxNextFreeBlock = NULL;
 8006c84:	e9c4 1200 	strd	r1, r2, [r4]
	( void ) xTaskResumeAll();
 8006c88:	f7ff fcc2 	bl	8006610 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c8c:	076b      	lsls	r3, r5, #29
 8006c8e:	d0e7      	beq.n	8006c60 <pvPortMalloc+0x80>
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	e7fe      	b.n	8006ca0 <pvPortMalloc+0xc0>
	uxAddress = ( size_t ) ucHeap;
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <pvPortMalloc+0x120>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ca4:	075e      	lsls	r6, r3, #29
 8006ca6:	d119      	bne.n	8006cdc <pvPortMalloc+0xfc>
 8006ca8:	4619      	mov	r1, r3
 8006caa:	f503 6240 	add.w	r2, r3, #3072	; 0xc00
	xStart.xBlockSize = ( size_t ) 0;
 8006cae:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cb0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 8006cb4:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cb6:	f022 0207 	bic.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cba:	4e0f      	ldr	r6, [pc, #60]	; (8006cf8 <pvPortMalloc+0x118>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cbc:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8006cbe:	e9c6 1000 	strd	r1, r0, [r6]
	pxEnd = ( void * ) uxAddress;
 8006cc2:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006cc4:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cc8:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ccc:	4a0b      	ldr	r2, [pc, #44]	; (8006cfc <pvPortMalloc+0x11c>)
}
 8006cce:	463e      	mov	r6, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <pvPortMalloc+0x114>)
 8006cd4:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cd6:	4b06      	ldr	r3, [pc, #24]	; (8006cf0 <pvPortMalloc+0x110>)
 8006cd8:	601f      	str	r7, [r3, #0]
}
 8006cda:	e78c      	b.n	8006bf6 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cdc:	1dd9      	adds	r1, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cde:	f021 0107 	bic.w	r1, r1, #7
 8006ce2:	f503 6240 	add.w	r2, r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	e7e1      	b.n	8006cae <pvPortMalloc+0xce>
 8006cea:	bf00      	nop
 8006cec:	20000774 	.word	0x20000774
 8006cf0:	20001378 	.word	0x20001378
 8006cf4:	2000137c 	.word	0x2000137c
 8006cf8:	20001384 	.word	0x20001384
 8006cfc:	20001380 	.word	0x20001380
 8006d00:	20000778 	.word	0x20000778

08006d04 <vPortFree>:
	if( pv != NULL )
 8006d04:	b1d0      	cbz	r0, 8006d3c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d06:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <vPortFree+0x6c>)
 8006d08:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	4213      	tst	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d12:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006d16:	b191      	cbz	r1, 8006d3e <vPortFree+0x3a>
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	e7fe      	b.n	8006d28 <vPortFree+0x24>
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d3a:	e7fe      	b.n	8006d3a <vPortFree+0x36>
 8006d3c:	4770      	bx	lr
{
 8006d3e:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d40:	ea23 0302 	bic.w	r3, r3, r2
{
 8006d44:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d46:	f840 3c04 	str.w	r3, [r0, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006d4c:	f7ff fba2 	bl	8006494 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d50:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <vPortFree+0x70>)
 8006d52:	9801      	ldr	r0, [sp, #4]
 8006d54:	6811      	ldr	r1, [r2, #0]
 8006d56:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d5a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d5c:	440b      	add	r3, r1
 8006d5e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d60:	f7ff ff0e 	bl	8006b80 <prvInsertBlockIntoFreeList>
}
 8006d64:	b003      	add	sp, #12
 8006d66:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006d6a:	f7ff bc51 	b.w	8006610 <xTaskResumeAll>
 8006d6e:	bf00      	nop
 8006d70:	20001378 	.word	0x20001378
 8006d74:	2000137c 	.word	0x2000137c

08006d78 <memset>:
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4402      	add	r2, r0
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d100      	bne.n	8006d82 <memset+0xa>
 8006d80:	4770      	bx	lr
 8006d82:	f803 1b01 	strb.w	r1, [r3], #1
 8006d86:	e7f9      	b.n	8006d7c <memset+0x4>

08006d88 <__errno>:
 8006d88:	4b01      	ldr	r3, [pc, #4]	; (8006d90 <__errno+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	200000ec 	.word	0x200000ec

08006d94 <__libc_init_array>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	2600      	movs	r6, #0
 8006d98:	4d0c      	ldr	r5, [pc, #48]	; (8006dcc <__libc_init_array+0x38>)
 8006d9a:	4c0d      	ldr	r4, [pc, #52]	; (8006dd0 <__libc_init_array+0x3c>)
 8006d9c:	1b64      	subs	r4, r4, r5
 8006d9e:	10a4      	asrs	r4, r4, #2
 8006da0:	42a6      	cmp	r6, r4
 8006da2:	d109      	bne.n	8006db8 <__libc_init_array+0x24>
 8006da4:	f000 fb76 	bl	8007494 <_init>
 8006da8:	2600      	movs	r6, #0
 8006daa:	4d0a      	ldr	r5, [pc, #40]	; (8006dd4 <__libc_init_array+0x40>)
 8006dac:	4c0a      	ldr	r4, [pc, #40]	; (8006dd8 <__libc_init_array+0x44>)
 8006dae:	1b64      	subs	r4, r4, r5
 8006db0:	10a4      	asrs	r4, r4, #2
 8006db2:	42a6      	cmp	r6, r4
 8006db4:	d105      	bne.n	8006dc2 <__libc_init_array+0x2e>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbc:	4798      	blx	r3
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	e7ee      	b.n	8006da0 <__libc_init_array+0xc>
 8006dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc6:	4798      	blx	r3
 8006dc8:	3601      	adds	r6, #1
 8006dca:	e7f2      	b.n	8006db2 <__libc_init_array+0x1e>
 8006dcc:	080075c0 	.word	0x080075c0
 8006dd0:	080075c0 	.word	0x080075c0
 8006dd4:	080075c0 	.word	0x080075c0
 8006dd8:	080075c4 	.word	0x080075c4

08006ddc <atan2>:
 8006ddc:	f000 ba8c 	b.w	80072f8 <__ieee754_atan2>

08006de0 <sqrt>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	4606      	mov	r6, r0
 8006de4:	460f      	mov	r7, r1
 8006de6:	f000 f9ad 	bl	8007144 <__ieee754_sqrt>
 8006dea:	4632      	mov	r2, r6
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	463b      	mov	r3, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	4639      	mov	r1, r7
 8006df6:	f7f9 fe01 	bl	80009fc <__aeabi_dcmpun>
 8006dfa:	b990      	cbnz	r0, 8006e22 <sqrt+0x42>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fdd2 	bl	80009ac <__aeabi_dcmplt>
 8006e08:	b158      	cbz	r0, 8006e22 <sqrt+0x42>
 8006e0a:	f7ff ffbd 	bl	8006d88 <__errno>
 8006e0e:	2321      	movs	r3, #33	; 0x21
 8006e10:	2200      	movs	r2, #0
 8006e12:	6003      	str	r3, [r0, #0]
 8006e14:	2300      	movs	r3, #0
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f7f9 fc7f 	bl	800071c <__aeabi_ddiv>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	460d      	mov	r5, r1
 8006e22:	4620      	mov	r0, r4
 8006e24:	4629      	mov	r1, r5
 8006e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e28 <atan>:
 8006e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	4bb6      	ldr	r3, [pc, #728]	; (8007108 <atan+0x2e0>)
 8006e2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e32:	429e      	cmp	r6, r3
 8006e34:	4604      	mov	r4, r0
 8006e36:	460d      	mov	r5, r1
 8006e38:	468b      	mov	fp, r1
 8006e3a:	dd17      	ble.n	8006e6c <atan+0x44>
 8006e3c:	4bb3      	ldr	r3, [pc, #716]	; (800710c <atan+0x2e4>)
 8006e3e:	429e      	cmp	r6, r3
 8006e40:	dc01      	bgt.n	8006e46 <atan+0x1e>
 8006e42:	d109      	bne.n	8006e58 <atan+0x30>
 8006e44:	b140      	cbz	r0, 8006e58 <atan+0x30>
 8006e46:	4622      	mov	r2, r4
 8006e48:	462b      	mov	r3, r5
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f7f9 f985 	bl	800015c <__adddf3>
 8006e52:	4604      	mov	r4, r0
 8006e54:	460d      	mov	r5, r1
 8006e56:	e005      	b.n	8006e64 <atan+0x3c>
 8006e58:	f1bb 0f00 	cmp.w	fp, #0
 8006e5c:	4cac      	ldr	r4, [pc, #688]	; (8007110 <atan+0x2e8>)
 8006e5e:	f300 8121 	bgt.w	80070a4 <atan+0x27c>
 8006e62:	4dac      	ldr	r5, [pc, #688]	; (8007114 <atan+0x2ec>)
 8006e64:	4620      	mov	r0, r4
 8006e66:	4629      	mov	r1, r5
 8006e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	4baa      	ldr	r3, [pc, #680]	; (8007118 <atan+0x2f0>)
 8006e6e:	429e      	cmp	r6, r3
 8006e70:	dc11      	bgt.n	8006e96 <atan+0x6e>
 8006e72:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006e76:	429e      	cmp	r6, r3
 8006e78:	dc0a      	bgt.n	8006e90 <atan+0x68>
 8006e7a:	a38b      	add	r3, pc, #556	; (adr r3, 80070a8 <atan+0x280>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f7f9 f96c 	bl	800015c <__adddf3>
 8006e84:	2200      	movs	r2, #0
 8006e86:	4ba5      	ldr	r3, [pc, #660]	; (800711c <atan+0x2f4>)
 8006e88:	f7f9 fdae 	bl	80009e8 <__aeabi_dcmpgt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1e9      	bne.n	8006e64 <atan+0x3c>
 8006e90:	f04f 3aff 	mov.w	sl, #4294967295
 8006e94:	e027      	b.n	8006ee6 <atan+0xbe>
 8006e96:	f000 f951 	bl	800713c <fabs>
 8006e9a:	4ba1      	ldr	r3, [pc, #644]	; (8007120 <atan+0x2f8>)
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	429e      	cmp	r6, r3
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	f300 80b8 	bgt.w	8007016 <atan+0x1ee>
 8006ea6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006eaa:	429e      	cmp	r6, r3
 8006eac:	f300 809c 	bgt.w	8006fe8 <atan+0x1c0>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	f7f9 f952 	bl	800015c <__adddf3>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4b98      	ldr	r3, [pc, #608]	; (800711c <atan+0x2f4>)
 8006ebc:	f7f9 f94c 	bl	8000158 <__aeabi_dsub>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460f      	mov	r7, r1
 8006ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7f9 f945 	bl	800015c <__adddf3>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	4639      	mov	r1, r7
 8006eda:	f7f9 fc1f 	bl	800071c <__aeabi_ddiv>
 8006ede:	f04f 0a00 	mov.w	sl, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	462b      	mov	r3, r5
 8006eea:	4620      	mov	r0, r4
 8006eec:	4629      	mov	r1, r5
 8006eee:	f7f9 faeb 	bl	80004c8 <__aeabi_dmul>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	4689      	mov	r9, r1
 8006efa:	f7f9 fae5 	bl	80004c8 <__aeabi_dmul>
 8006efe:	a36c      	add	r3, pc, #432	; (adr r3, 80070b0 <atan+0x288>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	4606      	mov	r6, r0
 8006f06:	460f      	mov	r7, r1
 8006f08:	f7f9 fade 	bl	80004c8 <__aeabi_dmul>
 8006f0c:	a36a      	add	r3, pc, #424	; (adr r3, 80070b8 <atan+0x290>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f7f9 f923 	bl	800015c <__adddf3>
 8006f16:	4632      	mov	r2, r6
 8006f18:	463b      	mov	r3, r7
 8006f1a:	f7f9 fad5 	bl	80004c8 <__aeabi_dmul>
 8006f1e:	a368      	add	r3, pc, #416	; (adr r3, 80070c0 <atan+0x298>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f7f9 f91a 	bl	800015c <__adddf3>
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	f7f9 facc 	bl	80004c8 <__aeabi_dmul>
 8006f30:	a365      	add	r3, pc, #404	; (adr r3, 80070c8 <atan+0x2a0>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f911 	bl	800015c <__adddf3>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	f7f9 fac3 	bl	80004c8 <__aeabi_dmul>
 8006f42:	a363      	add	r3, pc, #396	; (adr r3, 80070d0 <atan+0x2a8>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f7f9 f908 	bl	800015c <__adddf3>
 8006f4c:	4632      	mov	r2, r6
 8006f4e:	463b      	mov	r3, r7
 8006f50:	f7f9 faba 	bl	80004c8 <__aeabi_dmul>
 8006f54:	a360      	add	r3, pc, #384	; (adr r3, 80070d8 <atan+0x2b0>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 f8ff 	bl	800015c <__adddf3>
 8006f5e:	4642      	mov	r2, r8
 8006f60:	464b      	mov	r3, r9
 8006f62:	f7f9 fab1 	bl	80004c8 <__aeabi_dmul>
 8006f66:	a35e      	add	r3, pc, #376	; (adr r3, 80070e0 <atan+0x2b8>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 faa8 	bl	80004c8 <__aeabi_dmul>
 8006f78:	a35b      	add	r3, pc, #364	; (adr r3, 80070e8 <atan+0x2c0>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f7f9 f8eb 	bl	8000158 <__aeabi_dsub>
 8006f82:	4632      	mov	r2, r6
 8006f84:	463b      	mov	r3, r7
 8006f86:	f7f9 fa9f 	bl	80004c8 <__aeabi_dmul>
 8006f8a:	a359      	add	r3, pc, #356	; (adr r3, 80070f0 <atan+0x2c8>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f7f9 f8e2 	bl	8000158 <__aeabi_dsub>
 8006f94:	4632      	mov	r2, r6
 8006f96:	463b      	mov	r3, r7
 8006f98:	f7f9 fa96 	bl	80004c8 <__aeabi_dmul>
 8006f9c:	a356      	add	r3, pc, #344	; (adr r3, 80070f8 <atan+0x2d0>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f7f9 f8d9 	bl	8000158 <__aeabi_dsub>
 8006fa6:	4632      	mov	r2, r6
 8006fa8:	463b      	mov	r3, r7
 8006faa:	f7f9 fa8d 	bl	80004c8 <__aeabi_dmul>
 8006fae:	a354      	add	r3, pc, #336	; (adr r3, 8007100 <atan+0x2d8>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 f8d0 	bl	8000158 <__aeabi_dsub>
 8006fb8:	4632      	mov	r2, r6
 8006fba:	463b      	mov	r3, r7
 8006fbc:	f7f9 fa84 	bl	80004c8 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	f7f9 f8c8 	bl	800015c <__adddf3>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	462b      	mov	r3, r5
 8006fd0:	f7f9 fa7a 	bl	80004c8 <__aeabi_dmul>
 8006fd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	d144      	bne.n	8007068 <atan+0x240>
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 f8b9 	bl	8000158 <__aeabi_dsub>
 8006fe6:	e734      	b.n	8006e52 <atan+0x2a>
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4b4c      	ldr	r3, [pc, #304]	; (800711c <atan+0x2f4>)
 8006fec:	f7f9 f8b4 	bl	8000158 <__aeabi_dsub>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460f      	mov	r7, r1
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4b48      	ldr	r3, [pc, #288]	; (800711c <atan+0x2f4>)
 8006ffc:	f7f9 f8ae 	bl	800015c <__adddf3>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4630      	mov	r0, r6
 8007006:	4639      	mov	r1, r7
 8007008:	f7f9 fb88 	bl	800071c <__aeabi_ddiv>
 800700c:	f04f 0a01 	mov.w	sl, #1
 8007010:	4604      	mov	r4, r0
 8007012:	460d      	mov	r5, r1
 8007014:	e767      	b.n	8006ee6 <atan+0xbe>
 8007016:	4b43      	ldr	r3, [pc, #268]	; (8007124 <atan+0x2fc>)
 8007018:	429e      	cmp	r6, r3
 800701a:	da1a      	bge.n	8007052 <atan+0x22a>
 800701c:	2200      	movs	r2, #0
 800701e:	4b42      	ldr	r3, [pc, #264]	; (8007128 <atan+0x300>)
 8007020:	f7f9 f89a 	bl	8000158 <__aeabi_dsub>
 8007024:	2200      	movs	r2, #0
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <atan+0x300>)
 8007030:	f7f9 fa4a 	bl	80004c8 <__aeabi_dmul>
 8007034:	2200      	movs	r2, #0
 8007036:	4b39      	ldr	r3, [pc, #228]	; (800711c <atan+0x2f4>)
 8007038:	f7f9 f890 	bl	800015c <__adddf3>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 fb6a 	bl	800071c <__aeabi_ddiv>
 8007048:	f04f 0a02 	mov.w	sl, #2
 800704c:	4604      	mov	r4, r0
 800704e:	460d      	mov	r5, r1
 8007050:	e749      	b.n	8006ee6 <atan+0xbe>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	2000      	movs	r0, #0
 8007058:	4934      	ldr	r1, [pc, #208]	; (800712c <atan+0x304>)
 800705a:	f7f9 fb5f 	bl	800071c <__aeabi_ddiv>
 800705e:	f04f 0a03 	mov.w	sl, #3
 8007062:	4604      	mov	r4, r0
 8007064:	460d      	mov	r5, r1
 8007066:	e73e      	b.n	8006ee6 <atan+0xbe>
 8007068:	4b31      	ldr	r3, [pc, #196]	; (8007130 <atan+0x308>)
 800706a:	4e32      	ldr	r6, [pc, #200]	; (8007134 <atan+0x30c>)
 800706c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f7f9 f870 	bl	8000158 <__aeabi_dsub>
 8007078:	4622      	mov	r2, r4
 800707a:	462b      	mov	r3, r5
 800707c:	f7f9 f86c 	bl	8000158 <__aeabi_dsub>
 8007080:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	e9d6 0100 	ldrd	r0, r1, [r6]
 800708c:	f7f9 f864 	bl	8000158 <__aeabi_dsub>
 8007090:	f1bb 0f00 	cmp.w	fp, #0
 8007094:	4604      	mov	r4, r0
 8007096:	460d      	mov	r5, r1
 8007098:	f6bf aee4 	bge.w	8006e64 <atan+0x3c>
 800709c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070a0:	461d      	mov	r5, r3
 80070a2:	e6df      	b.n	8006e64 <atan+0x3c>
 80070a4:	4d24      	ldr	r5, [pc, #144]	; (8007138 <atan+0x310>)
 80070a6:	e6dd      	b.n	8006e64 <atan+0x3c>
 80070a8:	8800759c 	.word	0x8800759c
 80070ac:	7e37e43c 	.word	0x7e37e43c
 80070b0:	e322da11 	.word	0xe322da11
 80070b4:	3f90ad3a 	.word	0x3f90ad3a
 80070b8:	24760deb 	.word	0x24760deb
 80070bc:	3fa97b4b 	.word	0x3fa97b4b
 80070c0:	a0d03d51 	.word	0xa0d03d51
 80070c4:	3fb10d66 	.word	0x3fb10d66
 80070c8:	c54c206e 	.word	0xc54c206e
 80070cc:	3fb745cd 	.word	0x3fb745cd
 80070d0:	920083ff 	.word	0x920083ff
 80070d4:	3fc24924 	.word	0x3fc24924
 80070d8:	5555550d 	.word	0x5555550d
 80070dc:	3fd55555 	.word	0x3fd55555
 80070e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80070e4:	bfa2b444 	.word	0xbfa2b444
 80070e8:	52defd9a 	.word	0x52defd9a
 80070ec:	3fadde2d 	.word	0x3fadde2d
 80070f0:	af749a6d 	.word	0xaf749a6d
 80070f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80070f8:	fe231671 	.word	0xfe231671
 80070fc:	3fbc71c6 	.word	0x3fbc71c6
 8007100:	9998ebc4 	.word	0x9998ebc4
 8007104:	3fc99999 	.word	0x3fc99999
 8007108:	440fffff 	.word	0x440fffff
 800710c:	7ff00000 	.word	0x7ff00000
 8007110:	54442d18 	.word	0x54442d18
 8007114:	bff921fb 	.word	0xbff921fb
 8007118:	3fdbffff 	.word	0x3fdbffff
 800711c:	3ff00000 	.word	0x3ff00000
 8007120:	3ff2ffff 	.word	0x3ff2ffff
 8007124:	40038000 	.word	0x40038000
 8007128:	3ff80000 	.word	0x3ff80000
 800712c:	bff00000 	.word	0xbff00000
 8007130:	08007570 	.word	0x08007570
 8007134:	08007550 	.word	0x08007550
 8007138:	3ff921fb 	.word	0x3ff921fb

0800713c <fabs>:
 800713c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007140:	4619      	mov	r1, r3
 8007142:	4770      	bx	lr

08007144 <__ieee754_sqrt>:
 8007144:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80072e8 <__ieee754_sqrt+0x1a4>
 8007148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007150:	460b      	mov	r3, r1
 8007152:	4606      	mov	r6, r0
 8007154:	460d      	mov	r5, r1
 8007156:	460a      	mov	r2, r1
 8007158:	4604      	mov	r4, r0
 800715a:	d10e      	bne.n	800717a <__ieee754_sqrt+0x36>
 800715c:	4602      	mov	r2, r0
 800715e:	f7f9 f9b3 	bl	80004c8 <__aeabi_dmul>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4630      	mov	r0, r6
 8007168:	4629      	mov	r1, r5
 800716a:	f7f8 fff7 	bl	800015c <__adddf3>
 800716e:	4606      	mov	r6, r0
 8007170:	460d      	mov	r5, r1
 8007172:	4630      	mov	r0, r6
 8007174:	4629      	mov	r1, r5
 8007176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717a:	2900      	cmp	r1, #0
 800717c:	dc0d      	bgt.n	800719a <__ieee754_sqrt+0x56>
 800717e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007182:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007186:	d0f4      	beq.n	8007172 <__ieee754_sqrt+0x2e>
 8007188:	b139      	cbz	r1, 800719a <__ieee754_sqrt+0x56>
 800718a:	4602      	mov	r2, r0
 800718c:	f7f8 ffe4 	bl	8000158 <__aeabi_dsub>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	f7f9 fac2 	bl	800071c <__aeabi_ddiv>
 8007198:	e7e9      	b.n	800716e <__ieee754_sqrt+0x2a>
 800719a:	1512      	asrs	r2, r2, #20
 800719c:	f000 8089 	beq.w	80072b2 <__ieee754_sqrt+0x16e>
 80071a0:	2500      	movs	r5, #0
 80071a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071a6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80071aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ae:	07d2      	lsls	r2, r2, #31
 80071b0:	bf5c      	itt	pl
 80071b2:	005b      	lslpl	r3, r3, #1
 80071b4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80071b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071bc:	bf58      	it	pl
 80071be:	0064      	lslpl	r4, r4, #1
 80071c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80071c4:	0062      	lsls	r2, r4, #1
 80071c6:	2016      	movs	r0, #22
 80071c8:	4629      	mov	r1, r5
 80071ca:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80071ce:	1076      	asrs	r6, r6, #1
 80071d0:	190f      	adds	r7, r1, r4
 80071d2:	429f      	cmp	r7, r3
 80071d4:	bfde      	ittt	le
 80071d6:	1bdb      	suble	r3, r3, r7
 80071d8:	1939      	addle	r1, r7, r4
 80071da:	192d      	addle	r5, r5, r4
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	3801      	subs	r0, #1
 80071e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80071e4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80071e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80071ec:	d1f0      	bne.n	80071d0 <__ieee754_sqrt+0x8c>
 80071ee:	4604      	mov	r4, r0
 80071f0:	2720      	movs	r7, #32
 80071f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80071f6:	428b      	cmp	r3, r1
 80071f8:	eb0c 0e00 	add.w	lr, ip, r0
 80071fc:	dc02      	bgt.n	8007204 <__ieee754_sqrt+0xc0>
 80071fe:	d113      	bne.n	8007228 <__ieee754_sqrt+0xe4>
 8007200:	4596      	cmp	lr, r2
 8007202:	d811      	bhi.n	8007228 <__ieee754_sqrt+0xe4>
 8007204:	f1be 0f00 	cmp.w	lr, #0
 8007208:	eb0e 000c 	add.w	r0, lr, ip
 800720c:	da56      	bge.n	80072bc <__ieee754_sqrt+0x178>
 800720e:	2800      	cmp	r0, #0
 8007210:	db54      	blt.n	80072bc <__ieee754_sqrt+0x178>
 8007212:	f101 0801 	add.w	r8, r1, #1
 8007216:	1a5b      	subs	r3, r3, r1
 8007218:	4641      	mov	r1, r8
 800721a:	4596      	cmp	lr, r2
 800721c:	bf88      	it	hi
 800721e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007222:	eba2 020e 	sub.w	r2, r2, lr
 8007226:	4464      	add	r4, ip
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	3f01      	subs	r7, #1
 800722c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007230:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007234:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007238:	d1dd      	bne.n	80071f6 <__ieee754_sqrt+0xb2>
 800723a:	4313      	orrs	r3, r2
 800723c:	d01b      	beq.n	8007276 <__ieee754_sqrt+0x132>
 800723e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80072ec <__ieee754_sqrt+0x1a8>
 8007242:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80072f0 <__ieee754_sqrt+0x1ac>
 8007246:	e9da 0100 	ldrd	r0, r1, [sl]
 800724a:	e9db 2300 	ldrd	r2, r3, [fp]
 800724e:	f7f8 ff83 	bl	8000158 <__aeabi_dsub>
 8007252:	e9da 8900 	ldrd	r8, r9, [sl]
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4640      	mov	r0, r8
 800725c:	4649      	mov	r1, r9
 800725e:	f7f9 fbaf 	bl	80009c0 <__aeabi_dcmple>
 8007262:	b140      	cbz	r0, 8007276 <__ieee754_sqrt+0x132>
 8007264:	e9da 0100 	ldrd	r0, r1, [sl]
 8007268:	e9db 2300 	ldrd	r2, r3, [fp]
 800726c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007270:	d126      	bne.n	80072c0 <__ieee754_sqrt+0x17c>
 8007272:	463c      	mov	r4, r7
 8007274:	3501      	adds	r5, #1
 8007276:	106b      	asrs	r3, r5, #1
 8007278:	0864      	lsrs	r4, r4, #1
 800727a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800727e:	07ea      	lsls	r2, r5, #31
 8007280:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007284:	bf48      	it	mi
 8007286:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800728a:	4620      	mov	r0, r4
 800728c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007290:	e76d      	b.n	800716e <__ieee754_sqrt+0x2a>
 8007292:	0ae3      	lsrs	r3, r4, #11
 8007294:	3915      	subs	r1, #21
 8007296:	0564      	lsls	r4, r4, #21
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0fa      	beq.n	8007292 <__ieee754_sqrt+0x14e>
 800729c:	02d8      	lsls	r0, r3, #11
 800729e:	d50a      	bpl.n	80072b6 <__ieee754_sqrt+0x172>
 80072a0:	f1c2 0020 	rsb	r0, r2, #32
 80072a4:	fa24 f000 	lsr.w	r0, r4, r0
 80072a8:	1e55      	subs	r5, r2, #1
 80072aa:	4094      	lsls	r4, r2
 80072ac:	4303      	orrs	r3, r0
 80072ae:	1b4a      	subs	r2, r1, r5
 80072b0:	e776      	b.n	80071a0 <__ieee754_sqrt+0x5c>
 80072b2:	4611      	mov	r1, r2
 80072b4:	e7f0      	b.n	8007298 <__ieee754_sqrt+0x154>
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	3201      	adds	r2, #1
 80072ba:	e7ef      	b.n	800729c <__ieee754_sqrt+0x158>
 80072bc:	4688      	mov	r8, r1
 80072be:	e7aa      	b.n	8007216 <__ieee754_sqrt+0xd2>
 80072c0:	f7f8 ff4c 	bl	800015c <__adddf3>
 80072c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4640      	mov	r0, r8
 80072ce:	4649      	mov	r1, r9
 80072d0:	f7f9 fb6c 	bl	80009ac <__aeabi_dcmplt>
 80072d4:	b120      	cbz	r0, 80072e0 <__ieee754_sqrt+0x19c>
 80072d6:	1ca1      	adds	r1, r4, #2
 80072d8:	bf08      	it	eq
 80072da:	3501      	addeq	r5, #1
 80072dc:	3402      	adds	r4, #2
 80072de:	e7ca      	b.n	8007276 <__ieee754_sqrt+0x132>
 80072e0:	3401      	adds	r4, #1
 80072e2:	f024 0401 	bic.w	r4, r4, #1
 80072e6:	e7c6      	b.n	8007276 <__ieee754_sqrt+0x132>
 80072e8:	7ff00000 	.word	0x7ff00000
 80072ec:	200000f0 	.word	0x200000f0
 80072f0:	200000f8 	.word	0x200000f8
 80072f4:	00000000 	.word	0x00000000

080072f8 <__ieee754_atan2>:
 80072f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	4617      	mov	r7, r2
 80072fe:	4692      	mov	sl, r2
 8007300:	4699      	mov	r9, r3
 8007302:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007306:	427b      	negs	r3, r7
 8007308:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007488 <__ieee754_atan2+0x190>
 800730c:	433b      	orrs	r3, r7
 800730e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007312:	4543      	cmp	r3, r8
 8007314:	4604      	mov	r4, r0
 8007316:	460d      	mov	r5, r1
 8007318:	d809      	bhi.n	800732e <__ieee754_atan2+0x36>
 800731a:	4246      	negs	r6, r0
 800731c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007320:	4306      	orrs	r6, r0
 8007322:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007326:	4546      	cmp	r6, r8
 8007328:	468e      	mov	lr, r1
 800732a:	4683      	mov	fp, r0
 800732c:	d908      	bls.n	8007340 <__ieee754_atan2+0x48>
 800732e:	4652      	mov	r2, sl
 8007330:	464b      	mov	r3, r9
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f8 ff11 	bl	800015c <__adddf3>
 800733a:	4604      	mov	r4, r0
 800733c:	460d      	mov	r5, r1
 800733e:	e019      	b.n	8007374 <__ieee754_atan2+0x7c>
 8007340:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007344:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007348:	433e      	orrs	r6, r7
 800734a:	d103      	bne.n	8007354 <__ieee754_atan2+0x5c>
 800734c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	f7ff bd6a 	b.w	8006e28 <atan>
 8007354:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8007358:	f006 0602 	and.w	r6, r6, #2
 800735c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8007360:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007364:	d10a      	bne.n	800737c <__ieee754_atan2+0x84>
 8007366:	2e02      	cmp	r6, #2
 8007368:	d067      	beq.n	800743a <__ieee754_atan2+0x142>
 800736a:	2e03      	cmp	r6, #3
 800736c:	d102      	bne.n	8007374 <__ieee754_atan2+0x7c>
 800736e:	a53a      	add	r5, pc, #232	; (adr r5, 8007458 <__ieee754_atan2+0x160>)
 8007370:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007374:	4620      	mov	r0, r4
 8007376:	4629      	mov	r1, r5
 8007378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	4317      	orrs	r7, r2
 800737e:	d106      	bne.n	800738e <__ieee754_atan2+0x96>
 8007380:	f1be 0f00 	cmp.w	lr, #0
 8007384:	da64      	bge.n	8007450 <__ieee754_atan2+0x158>
 8007386:	a536      	add	r5, pc, #216	; (adr r5, 8007460 <__ieee754_atan2+0x168>)
 8007388:	e9d5 4500 	ldrd	r4, r5, [r5]
 800738c:	e7f2      	b.n	8007374 <__ieee754_atan2+0x7c>
 800738e:	4542      	cmp	r2, r8
 8007390:	d10f      	bne.n	80073b2 <__ieee754_atan2+0xba>
 8007392:	4293      	cmp	r3, r2
 8007394:	f106 36ff 	add.w	r6, r6, #4294967295
 8007398:	d107      	bne.n	80073aa <__ieee754_atan2+0xb2>
 800739a:	2e02      	cmp	r6, #2
 800739c:	d851      	bhi.n	8007442 <__ieee754_atan2+0x14a>
 800739e:	4b3b      	ldr	r3, [pc, #236]	; (800748c <__ieee754_atan2+0x194>)
 80073a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80073a8:	e7e4      	b.n	8007374 <__ieee754_atan2+0x7c>
 80073aa:	2e02      	cmp	r6, #2
 80073ac:	d84d      	bhi.n	800744a <__ieee754_atan2+0x152>
 80073ae:	4b38      	ldr	r3, [pc, #224]	; (8007490 <__ieee754_atan2+0x198>)
 80073b0:	e7f6      	b.n	80073a0 <__ieee754_atan2+0xa8>
 80073b2:	4543      	cmp	r3, r8
 80073b4:	d0e4      	beq.n	8007380 <__ieee754_atan2+0x88>
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80073bc:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073c0:	da21      	bge.n	8007406 <__ieee754_atan2+0x10e>
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	da01      	bge.n	80073cc <__ieee754_atan2+0xd4>
 80073c8:	323c      	adds	r2, #60	; 0x3c
 80073ca:	db20      	blt.n	800740e <__ieee754_atan2+0x116>
 80073cc:	4652      	mov	r2, sl
 80073ce:	464b      	mov	r3, r9
 80073d0:	4620      	mov	r0, r4
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f9 f9a2 	bl	800071c <__aeabi_ddiv>
 80073d8:	f7ff feb0 	bl	800713c <fabs>
 80073dc:	f7ff fd24 	bl	8006e28 <atan>
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	2e01      	cmp	r6, #1
 80073e6:	d015      	beq.n	8007414 <__ieee754_atan2+0x11c>
 80073e8:	2e02      	cmp	r6, #2
 80073ea:	d017      	beq.n	800741c <__ieee754_atan2+0x124>
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	d0c1      	beq.n	8007374 <__ieee754_atan2+0x7c>
 80073f0:	a31d      	add	r3, pc, #116	; (adr r3, 8007468 <__ieee754_atan2+0x170>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	4620      	mov	r0, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7f8 fead 	bl	8000158 <__aeabi_dsub>
 80073fe:	a31c      	add	r3, pc, #112	; (adr r3, 8007470 <__ieee754_atan2+0x178>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	e016      	b.n	8007434 <__ieee754_atan2+0x13c>
 8007406:	a51c      	add	r5, pc, #112	; (adr r5, 8007478 <__ieee754_atan2+0x180>)
 8007408:	e9d5 4500 	ldrd	r4, r5, [r5]
 800740c:	e7ea      	b.n	80073e4 <__ieee754_atan2+0xec>
 800740e:	2400      	movs	r4, #0
 8007410:	2500      	movs	r5, #0
 8007412:	e7e7      	b.n	80073e4 <__ieee754_atan2+0xec>
 8007414:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007418:	461d      	mov	r5, r3
 800741a:	e7ab      	b.n	8007374 <__ieee754_atan2+0x7c>
 800741c:	a312      	add	r3, pc, #72	; (adr r3, 8007468 <__ieee754_atan2+0x170>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	4620      	mov	r0, r4
 8007424:	4629      	mov	r1, r5
 8007426:	f7f8 fe97 	bl	8000158 <__aeabi_dsub>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	a110      	add	r1, pc, #64	; (adr r1, 8007470 <__ieee754_atan2+0x178>)
 8007430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007434:	f7f8 fe90 	bl	8000158 <__aeabi_dsub>
 8007438:	e77f      	b.n	800733a <__ieee754_atan2+0x42>
 800743a:	a50d      	add	r5, pc, #52	; (adr r5, 8007470 <__ieee754_atan2+0x178>)
 800743c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007440:	e798      	b.n	8007374 <__ieee754_atan2+0x7c>
 8007442:	a50f      	add	r5, pc, #60	; (adr r5, 8007480 <__ieee754_atan2+0x188>)
 8007444:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007448:	e794      	b.n	8007374 <__ieee754_atan2+0x7c>
 800744a:	2400      	movs	r4, #0
 800744c:	2500      	movs	r5, #0
 800744e:	e791      	b.n	8007374 <__ieee754_atan2+0x7c>
 8007450:	a509      	add	r5, pc, #36	; (adr r5, 8007478 <__ieee754_atan2+0x180>)
 8007452:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007456:	e78d      	b.n	8007374 <__ieee754_atan2+0x7c>
 8007458:	54442d18 	.word	0x54442d18
 800745c:	c00921fb 	.word	0xc00921fb
 8007460:	54442d18 	.word	0x54442d18
 8007464:	bff921fb 	.word	0xbff921fb
 8007468:	33145c07 	.word	0x33145c07
 800746c:	3ca1a626 	.word	0x3ca1a626
 8007470:	54442d18 	.word	0x54442d18
 8007474:	400921fb 	.word	0x400921fb
 8007478:	54442d18 	.word	0x54442d18
 800747c:	3ff921fb 	.word	0x3ff921fb
 8007480:	54442d18 	.word	0x54442d18
 8007484:	3fe921fb 	.word	0x3fe921fb
 8007488:	7ff00000 	.word	0x7ff00000
 800748c:	08007590 	.word	0x08007590
 8007490:	080075a8 	.word	0x080075a8

08007494 <_init>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr

080074a0 <_fini>:
 80074a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a2:	bf00      	nop
 80074a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074a6:	bc08      	pop	{r3}
 80074a8:	469e      	mov	lr, r3
 80074aa:	4770      	bx	lr
