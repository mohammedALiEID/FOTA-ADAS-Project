
FOTA_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b54  08002b54  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b54  08002b54  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000020  08002b78  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08002b78  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008221  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df9  00000000  00000000  000282a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000651  00000000  00000000  0002a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a09  00000000  00000000  0002af61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b615  00000000  00000000  0004296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082c98  00000000  00000000  0004df7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f98  00000000  00000000  000d0c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d2bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b10 	.word	0x08002b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08002b10 	.word	0x08002b10

0800014c <BL_UART_Fetch_Host_Command>:
		CBL_CHANGE_ROP_Level_CMD
};

/* -----------------  Software Interfaces Definitions -----------------*/

BL_Status BL_UART_Fetch_Host_Command(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]

	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	4843      	ldr	r0, [pc, #268]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000164:	f002 fca8 	bl	8002ab8 <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2201      	movs	r2, #1
 800016e:	4940      	ldr	r1, [pc, #256]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000170:	4840      	ldr	r0, [pc, #256]	; (8000274 <BL_UART_Fetch_Host_Command+0x128>)
 8000172:	f002 fb12 	bl	800279a <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	71bb      	strb	r3, [r7, #6]
	if(HAL_Status != HAL_OK){
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <BL_UART_Fetch_Host_Command+0x3a>
		Status = BL_NACK;
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e06f      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
	}
	else{
		Data_Length = BL_Host_Buffer[0];
 8000186:	4b3a      	ldr	r3, [pc, #232]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 800018c:	797b      	ldrb	r3, [r7, #5]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	4938      	ldr	r1, [pc, #224]	; (8000278 <BL_UART_Fetch_Host_Command+0x12c>)
 8000196:	4837      	ldr	r0, [pc, #220]	; (8000274 <BL_UART_Fetch_Host_Command+0x128>)
 8000198:	f002 faff 	bl	800279a <HAL_UART_Receive>
 800019c:	4603      	mov	r3, r0
 800019e:	71bb      	strb	r3, [r7, #6]
		if(HAL_Status != HAL_OK){
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <BL_UART_Fetch_Host_Command+0x60>
			Status = BL_NACK;
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e05c      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
		}
		else{
			switch(BL_Host_Buffer[1]){
 80001ac:	4b30      	ldr	r3, [pc, #192]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	3b10      	subs	r3, #16
 80001b2:	2b11      	cmp	r3, #17
 80001b4:	d856      	bhi.n	8000264 <BL_UART_Fetch_Host_Command+0x118>
 80001b6:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <BL_UART_Fetch_Host_Command+0x70>)
 80001b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001bc:	08000205 	.word	0x08000205
 80001c0:	08000211 	.word	0x08000211
 80001c4:	0800021d 	.word	0x0800021d
 80001c8:	08000229 	.word	0x08000229
 80001cc:	08000235 	.word	0x08000235
 80001d0:	08000241 	.word	0x08000241
 80001d4:	0800024d 	.word	0x0800024d
 80001d8:	08000265 	.word	0x08000265
 80001dc:	08000265 	.word	0x08000265
 80001e0:	08000265 	.word	0x08000265
 80001e4:	08000265 	.word	0x08000265
 80001e8:	08000265 	.word	0x08000265
 80001ec:	08000265 	.word	0x08000265
 80001f0:	08000265 	.word	0x08000265
 80001f4:	08000265 	.word	0x08000265
 80001f8:	08000265 	.word	0x08000265
 80001fc:	08000265 	.word	0x08000265
 8000200:	08000259 	.word	0x08000259
			case CBL_GET_VER_CMD:
				Bootloader_Get_Version(BL_Host_Buffer);
 8000204:	481a      	ldr	r0, [pc, #104]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000206:	f000 f905 	bl	8000414 <Bootloader_Get_Version>

				Status = BL_OK;
 800020a:	2301      	movs	r3, #1
 800020c:	71fb      	strb	r3, [r7, #7]
				break;
 800020e:	e02a      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			case CBL_GET_HELP_CMD:
				Bootloader_Get_Help(BL_Host_Buffer);
 8000210:	4817      	ldr	r0, [pc, #92]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000212:	f000 f92d 	bl	8000470 <Bootloader_Get_Help>
				Status = BL_OK;
 8000216:	2301      	movs	r3, #1
 8000218:	71fb      	strb	r3, [r7, #7]
				break;
 800021a:	e024      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			case CBL_GET_CID_CMD:
				Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 800021c:	4814      	ldr	r0, [pc, #80]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 800021e:	f000 f951 	bl	80004c4 <Bootloader_Get_Chip_Identification_Number>
				Status = BL_OK;
 8000222:	2301      	movs	r3, #1
 8000224:	71fb      	strb	r3, [r7, #7]
				break;
 8000226:	e01e      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			case CBL_GET_RDP_STATUS_CMD:
				Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000228:	4811      	ldr	r0, [pc, #68]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 800022a:	f000 f9b5 	bl	8000598 <Bootloader_Read_Protection_Level>
				Status = BL_OK;
 800022e:	2301      	movs	r3, #1
 8000230:	71fb      	strb	r3, [r7, #7]
				break;
 8000232:	e018      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			case CBL_JUMP_TO_APP_CMD:
				Bootloader_Jump_To_User_App(BL_Host_Buffer) ;
 8000234:	480e      	ldr	r0, [pc, #56]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000236:	f000 f821 	bl	800027c <Bootloader_Jump_To_User_App>
				Status = BL_OK;
 800023a:	2301      	movs	r3, #1
 800023c:	71fb      	strb	r3, [r7, #7]
				break;
 800023e:	e012      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			case CBL_FLASH_ERASE_CMD:
				Bootloader_Erase_Flash(BL_Host_Buffer);
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 8000242:	f000 fa23 	bl	800068c <Bootloader_Erase_Flash>
				Status = BL_OK;
 8000246:	2301      	movs	r3, #1
 8000248:	71fb      	strb	r3, [r7, #7]
				break;
 800024a:	e00c      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			case CBL_MEM_WRITE_CMD:
				Bootloader_Memory_Write(BL_Host_Buffer);
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 800024e:	f000 fabb 	bl	80007c8 <Bootloader_Memory_Write>
				Status = BL_OK;
 8000252:	2301      	movs	r3, #1
 8000254:	71fb      	strb	r3, [r7, #7]
				break;
 8000256:	e006      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>

			case CBL_CHANGE_ROP_Level_CMD:
				Bootloader_Change_Read_Protection_Level(BL_Host_Buffer);
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <BL_UART_Fetch_Host_Command+0x124>)
 800025a:	f000 fb5d 	bl	8000918 <Bootloader_Change_Read_Protection_Level>
				Status = BL_OK;
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
				break;
 8000262:	e000      	b.n	8000266 <BL_UART_Fetch_Host_Command+0x11a>
			default:
				break;
 8000264:	bf00      	nop
			}
		}
	}

	return Status;
 8000266:	79fb      	ldrb	r3, [r7, #7]
}
 8000268:	4618      	mov	r0, r3
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000003c 	.word	0x2000003c
 8000274:	2000010c 	.word	0x2000010c
 8000278:	2000003d 	.word	0x2000003d

0800027c <Bootloader_Jump_To_User_App>:


/* ----------------- Static Functions Definitions -----------------*/

static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	b29b      	uxth	r3, r3
 8000292:	3301      	adds	r3, #1
 8000294:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000296:	8bfb      	ldrh	r3, [r7, #30]
 8000298:	3b04      	subs	r3, #4
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	4413      	add	r3, r2
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	61bb      	str	r3, [r7, #24]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 80002a2:	8bfb      	ldrh	r3, [r7, #30]
 80002a4:	3b04      	subs	r3, #4
 80002a6:	69ba      	ldr	r2, [r7, #24]
 80002a8:	4619      	mov	r1, r3
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f000 f834 	bl	8000318 <Bootloader_CRC_Verify>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d124      	bne.n	8000300 <Bootloader_Jump_To_User_App+0x84>
	{
		if(0xFFFFFFFF != *((volatile uint32_t *)FLASH_Page_BASE_ADDRESS))
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <Bootloader_Jump_To_User_App+0x90>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002be:	d017      	beq.n	80002f0 <Bootloader_Jump_To_User_App+0x74>
		{
			APPJUMP = 1 ;
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <Bootloader_Jump_To_User_App+0x94>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	701a      	strb	r2, [r3, #0]
			//Bootloader_Send_ACK(1);
			Bootloader_Send_Data_To_Host((uint8_t *)&APPJUMP, 1);
 80002c6:	2101      	movs	r1, #1
 80002c8:	4811      	ldr	r0, [pc, #68]	; (8000310 <Bootloader_Jump_To_User_App+0x94>)
 80002ca:	f000 f88f 	bl	80003ec <Bootloader_Send_Data_To_Host>
			/* Value of the main stack pointer of our main application */
			uint32_t MSP_Value = *((volatile uint32_t *)FLASH_Page_BASE_ADDRESS);
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <Bootloader_Jump_To_User_App+0x90>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	617b      	str	r3, [r7, #20]

			/* Reset Handler definition function of our main application */
			uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_Page_BASE_ADDRESS + 4));
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <Bootloader_Jump_To_User_App+0x98>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	613b      	str	r3, [r7, #16]

			/* Fetch the reset handler address of the user application */
			pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	f383 8808 	msr	MSP, r3
}
 80002e8:	bf00      	nop
			__set_MSP(MSP_Value);



			/* Jump to Application Reset Handler */
			ResetHandler_Address();
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	4798      	blx	r3
		}
	}
	else{
		Bootloader_Send_NACK();
	}
}
 80002ee:	e009      	b.n	8000304 <Bootloader_Jump_To_User_App+0x88>
			APPJUMP = 0 ;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <Bootloader_Jump_To_User_App+0x94>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&APPJUMP, 1);
 80002f6:	2101      	movs	r1, #1
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <Bootloader_Jump_To_User_App+0x94>)
 80002fa:	f000 f877 	bl	80003ec <Bootloader_Send_Data_To_Host>
}
 80002fe:	e001      	b.n	8000304 <Bootloader_Jump_To_User_App+0x88>
		Bootloader_Send_NACK();
 8000300:	f000 f862 	bl	80003c8 <Bootloader_Send_NACK>
}
 8000304:	bf00      	nop
 8000306:	3720      	adds	r7, #32
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	08008000 	.word	0x08008000
 8000310:	20000000 	.word	0x20000000
 8000314:	08008004 	.word	0x08008004

08000318 <Bootloader_CRC_Verify>:





static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC){
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000324:	2300      	movs	r3, #0
 8000326:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000334:	2300      	movs	r3, #0
 8000336:	75fb      	strb	r3, [r7, #23]
 8000338:	e00f      	b.n	800035a <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 800033a:	7dfb      	ldrb	r3, [r7, #23]
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 8000344:	f107 0310 	add.w	r3, r7, #16
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	4810      	ldr	r0, [pc, #64]	; (8000390 <Bootloader_CRC_Verify+0x78>)
 800034e:	f000 fe52 	bl	8000ff6 <HAL_CRC_Accumulate>
 8000352:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000354:	7dfb      	ldrb	r3, [r7, #23]
 8000356:	3301      	adds	r3, #1
 8000358:	75fb      	strb	r3, [r7, #23]
 800035a:	7dfb      	ldrb	r3, [r7, #23]
 800035c:	68ba      	ldr	r2, [r7, #8]
 800035e:	429a      	cmp	r2, r3
 8000360:	d8eb      	bhi.n	800033a <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
	__HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <Bootloader_CRC_Verify+0x78>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <Bootloader_CRC_Verify+0x78>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f042 0201 	orr.w	r2, r2, #1
 8000370:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 8000372:	69ba      	ldr	r2, [r7, #24]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	429a      	cmp	r2, r3
 8000378:	d102      	bne.n	8000380 <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 800037a:	2301      	movs	r3, #1
 800037c:	77fb      	strb	r3, [r7, #31]
 800037e:	e001      	b.n	8000384 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000380:	2300      	movs	r3, #0
 8000382:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000384:	7ffb      	ldrb	r3, [r7, #31]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000104 	.word	0x20000104

08000394 <Bootloader_Send_ACK>:





static void Bootloader_Send_ACK(uint8_t Replay_Len){
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 800039e:	2300      	movs	r3, #0
 80003a0:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 80003a2:	23cd      	movs	r3, #205	; 0xcd
 80003a4:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value,2, HAL_MAX_DELAY);///////////////////////
 80003aa:	f107 010c 	add.w	r1, r7, #12
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
 80003b2:	2202      	movs	r2, #2
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <Bootloader_Send_ACK+0x30>)
 80003b6:	f002 f96d 	bl	8002694 <HAL_UART_Transmit>
}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000010c 	.word	0x2000010c

080003c8 <Bootloader_Send_NACK>:




static void Bootloader_Send_NACK(void){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 80003ce:	23ab      	movs	r3, #171	; 0xab
 80003d0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 80003d2:	1df9      	adds	r1, r7, #7
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	2201      	movs	r2, #1
 80003da:	4803      	ldr	r0, [pc, #12]	; (80003e8 <Bootloader_Send_NACK+0x20>)
 80003dc:	f002 f95a 	bl	8002694 <HAL_UART_Transmit>
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000010c 	.word	0x2000010c

080003ec <Bootloader_Send_Data_To_Host>:




static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	6879      	ldr	r1, [r7, #4]
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <Bootloader_Send_Data_To_Host+0x24>)
 8000402:	f002 f947 	bl	8002694 <HAL_UART_Transmit>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000010c 	.word	0x2000010c

08000414 <Bootloader_Get_Version>:




static void Bootloader_Get_Version(uint8_t *Host_Buffer){
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION };
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <Bootloader_Get_Version+0x58>)
 800041e:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]


	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b29b      	uxth	r3, r3
 800042e:	3301      	adds	r3, #1
 8000430:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000432:	8afb      	ldrh	r3, [r7, #22]
 8000434:	3b04      	subs	r3, #4
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 800043e:	8afb      	ldrh	r3, [r7, #22]
 8000440:	3b04      	subs	r3, #4
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff66 	bl	8000318 <Bootloader_CRC_Verify>
 800044c:	4603      	mov	r3, r0
 800044e:	2b01      	cmp	r3, #1
 8000450:	d106      	bne.n	8000460 <Bootloader_Get_Version+0x4c>


		//Bootloader_Send_ACK(4);
		Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Version[0]), 4);
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	2104      	movs	r1, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ffc7 	bl	80003ec <Bootloader_Send_Data_To_Host>
	}
	else{

		Bootloader_Send_NACK();
	}
}
 800045e:	e001      	b.n	8000464 <Bootloader_Get_Version+0x50>
		Bootloader_Send_NACK();
 8000460:	f7ff ffb2 	bl	80003c8 <Bootloader_Send_NACK>
}
 8000464:	bf00      	nop
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	00010146 	.word	0x00010146

08000470 <Bootloader_Get_Help>:





static void Bootloader_Get_Help(uint8_t *Host_Buffer){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	81fb      	strh	r3, [r7, #14]
	uint32_t Host_CRC32 = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b29b      	uxth	r3, r3
 8000486:	3301      	adds	r3, #1
 8000488:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800048a:	89fb      	ldrh	r3, [r7, #14]
 800048c:	3b04      	subs	r3, #4
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	60bb      	str	r3, [r7, #8]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000496:	89fb      	ldrh	r3, [r7, #14]
 8000498:	3b04      	subs	r3, #4
 800049a:	68ba      	ldr	r2, [r7, #8]
 800049c:	4619      	mov	r1, r3
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ff3a 	bl	8000318 <Bootloader_CRC_Verify>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d104      	bne.n	80004b4 <Bootloader_Get_Help+0x44>

		//Bootloader_Send_ACK(12);
		Bootloader_Send_Data_To_Host((uint8_t *)(&Bootloader_Supported_CMDs[0]), 12);
 80004aa:	210c      	movs	r1, #12
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <Bootloader_Get_Help+0x50>)
 80004ae:	f7ff ff9d 	bl	80003ec <Bootloader_Send_Data_To_Host>
	}
	else{

		Bootloader_Send_NACK();
	}
}
 80004b2:	e001      	b.n	80004b8 <Bootloader_Get_Help+0x48>
		Bootloader_Send_NACK();
 80004b4:	f7ff ff88 	bl	80003c8 <Bootloader_Send_NACK>
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000004 	.word	0x20000004

080004c4 <Bootloader_Get_Chip_Identification_Number>:





static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	81fb      	strh	r3, [r7, #14]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80004e2:	8afb      	ldrh	r3, [r7, #22]
 80004e4:	3b04      	subs	r3, #4
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80004ee:	8afb      	ldrh	r3, [r7, #22]
 80004f0:	3b04      	subs	r3, #4
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ff0e 	bl	8000318 <Bootloader_CRC_Verify>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d10d      	bne.n	800051e <Bootloader_Get_Chip_Identification_Number+0x5a>


		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Bootloader_Get_Chip_Identification_Number+0x68>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	b29b      	uxth	r3, r3
 8000508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800050c:	b29b      	uxth	r3, r3
 800050e:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		//	Bootloader_Send_ACK(2);/////////////////////////
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 8000510:	f107 030e 	add.w	r3, r7, #14
 8000514:	2102      	movs	r1, #2
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff68 	bl	80003ec <Bootloader_Send_Data_To_Host>
	}
	else{

		Bootloader_Send_NACK();
	}
}
 800051c:	e001      	b.n	8000522 <Bootloader_Get_Chip_Identification_Number+0x5e>
		Bootloader_Send_NACK();
 800051e:	f7ff ff53 	bl	80003c8 <Bootloader_Send_NACK>
}
 8000522:	bf00      	nop
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	e0042000 	.word	0xe0042000

08000530 <Host_Address_Verification>:




static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F103_SRAM_END)){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000542:	d306      	bcc.n	8000552 <Host_Address_Verification+0x22>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <Host_Address_Verification+0x48>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d802      	bhi.n	8000552 <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e00c      	b.n	800056c <Host_Address_Verification+0x3c>
	}

	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F103_FLASH_END)){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000558:	d306      	bcc.n	8000568 <Host_Address_Verification+0x38>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <Host_Address_Verification+0x4c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d802      	bhi.n	8000568 <Host_Address_Verification+0x38>
		Address_Verification = ADDRESS_IS_VALID;
 8000562:	2301      	movs	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	e001      	b.n	800056c <Host_Address_Verification+0x3c>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 800056c:	7bfb      	ldrb	r3, [r7, #15]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20005000 	.word	0x20005000
 800057c:	08010000 	.word	0x08010000

08000580 <CBL_STM32F103_Get_RDP_Level>:





static uint8_t CBL_STM32F103_Get_RDP_Level(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0


	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f813 	bl	80015b4 <HAL_FLASHEx_OBGetConfig>

	return ((uint8_t)(FLASH_OBProgram.RDPLevel));
 800058e:	7d3b      	ldrb	r3, [r7, #20]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Bootloader_Read_Protection_Level>:





static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer){
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	3301      	adds	r3, #1
 80005b4:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80005b6:	8afb      	ldrh	r3, [r7, #22]
 80005b8:	3b04      	subs	r3, #4
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80005c2:	8afb      	ldrh	r3, [r7, #22]
 80005c4:	3b04      	subs	r3, #4
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	4619      	mov	r1, r3
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff fea4 	bl	8000318 <Bootloader_CRC_Verify>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d10a      	bne.n	80005ec <Bootloader_Read_Protection_Level+0x54>


		/* Read Protection Level */
		RDP_Level = CBL_STM32F103_Get_RDP_Level();
 80005d6:	f7ff ffd3 	bl	8000580 <CBL_STM32F103_Get_RDP_Level>
 80005da:	4603      	mov	r3, r0
 80005dc:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		//	Bootloader_Send_ACK(1);
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 80005de:	f107 030f 	add.w	r3, r7, #15
 80005e2:	2101      	movs	r1, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff01 	bl	80003ec <Bootloader_Send_Data_To_Host>
	}
	else{

		Bootloader_Send_NACK();
	}
}
 80005ea:	e001      	b.n	80005f0 <Bootloader_Read_Protection_Level+0x58>
		Bootloader_Send_NACK();
 80005ec:	f7ff feec 	bl	80003c8 <Bootloader_Send_NACK>
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Perform_Flash_Erase>:





static uint8_t Perform_Flash_Erase(uint32_t Page_address, uint8_t Number_Of_Pages){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	uint8_t Page_Validity_Status = INVALID_PAGE_NUMBER;
 8000604:	2300      	movs	r3, #0
 8000606:	77fb      	strb	r3, [r7, #31]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000608:	2301      	movs	r3, #1
 800060a:	77bb      	strb	r3, [r7, #30]
	uint32_t PagError = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]

	if(Number_Of_Pages > CBL_FLASH_MAX_Page_NUMBER){
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2b40      	cmp	r3, #64	; 0x40
 8000614:	d902      	bls.n	800061c <Perform_Flash_Erase+0x24>
		/* Number Of sectors is out of range */
		Page_Validity_Status = INVALID_PAGE_NUMBER;
 8000616:	2300      	movs	r3, #0
 8000618:	77fb      	strb	r3, [r7, #31]
 800061a:	e031      	b.n	8000680 <Perform_Flash_Erase+0x88>
	}
	else{
		if((Number_Of_Pages <= (CBL_FLASH_MAX_Page_NUMBER )) || (CBL_FLASH_MASS_ERASE == Page_address)){
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b40      	cmp	r3, #64	; 0x40
 8000620:	d902      	bls.n	8000628 <Perform_Flash_Erase+0x30>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2bff      	cmp	r3, #255	; 0xff
 8000626:	d129      	bne.n	800067c <Perform_Flash_Erase+0x84>
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Page_address){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2bff      	cmp	r3, #255	; 0xff
 800062c:	d102      	bne.n	8000634 <Perform_Flash_Erase+0x3c>
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e005      	b.n	8000640 <Perform_Flash_Erase+0x48>
			}
			else{
				/* User needs Sector erase */


				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES; /* Sectors erase only */
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
				pEraseInit.NbPages = Number_Of_Pages;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	61bb      	str	r3, [r7, #24]
				pEraseInit.PageAddress =  Page_address  ; //0x8008000 ; /* Number of sectors to be erased. */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	617b      	str	r3, [r7, #20]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]


			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 8000644:	f000 fd72 	bl	800112c <HAL_FLASH_Unlock>
 8000648:	4603      	mov	r3, r0
 800064a:	77bb      	strb	r3, [r7, #30]
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &PagError);
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fe82 	bl	8001360 <HAL_FLASHEx_Erase>
 800065c:	4603      	mov	r3, r0
 800065e:	77bb      	strb	r3, [r7, #30]
			if(HAL_SUCCESSFUL_ERASE == PagError){
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000666:	d102      	bne.n	800066e <Perform_Flash_Erase+0x76>
				Page_Validity_Status = SUCCESSFUL_ERASE;
 8000668:	2303      	movs	r3, #3
 800066a:	77fb      	strb	r3, [r7, #31]
 800066c:	e001      	b.n	8000672 <Perform_Flash_Erase+0x7a>
			}
			else{
				Page_Validity_Status = UNSUCCESSFUL_ERASE;
 800066e:	2302      	movs	r3, #2
 8000670:	77fb      	strb	r3, [r7, #31]
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 8000672:	f000 fd81 	bl	8001178 <HAL_FLASH_Lock>
 8000676:	4603      	mov	r3, r0
 8000678:	77bb      	strb	r3, [r7, #30]
 800067a:	e001      	b.n	8000680 <Perform_Flash_Erase+0x88>
		}
		else{
			Page_Validity_Status = UNSUCCESSFUL_ERASE;
 800067c:	2302      	movs	r3, #2
 800067e:	77fb      	strb	r3, [r7, #31]
		}
	}
	return Page_Validity_Status;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <Bootloader_Erase_Flash>:





static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]


	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80006aa:	8afb      	ldrh	r3, [r7, #22]
 80006ac:	3b04      	subs	r3, #4
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	3b04      	subs	r3, #4
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff fe2a 	bl	8000318 <Bootloader_CRC_Verify>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d116      	bne.n	80006f8 <Bootloader_Erase_Flash+0x6c>

		/* Send acknowledgement to the HOST */

		/* Perform Mass erase or page erase of the user flash */
		Erase_Status = Perform_Flash_Erase(FLASH_Page_BASE_ADDRESS,64);/////////////////////////////////////////////////
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <Bootloader_Erase_Flash+0x78>)
 80006ce:	f7ff ff93 	bl	80005f8 <Perform_Flash_Erase>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d106      	bne.n	80006ea <Bootloader_Erase_Flash+0x5e>
			/* Report erase Passed */

			//Bootloader_Send_ACK(1); ////////////////////////
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 80006dc:	f107 030f 	add.w	r3, r7, #15
 80006e0:	2101      	movs	r1, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe82 	bl	80003ec <Bootloader_Send_Data_To_Host>
	else{

		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 80006e8:	e008      	b.n	80006fc <Bootloader_Erase_Flash+0x70>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 80006ea:	f107 030f 	add.w	r3, r7, #15
 80006ee:	2101      	movs	r1, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fe7b 	bl	80003ec <Bootloader_Send_Data_To_Host>
}
 80006f6:	e001      	b.n	80006fc <Bootloader_Erase_Flash+0x70>
		Bootloader_Send_NACK();
 80006f8:	f7ff fe66 	bl	80003c8 <Bootloader_Send_NACK>
}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08008000 	.word	0x08008000

08000708 <Flash_Memory_Write_Payload>:





static uint8_t Flash_Memory_Write_Payload(uint16_t *Host_Payload, uint32_t Payload_Start_Address, uint8_t Payload_Len){
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	4613      	mov	r3, r2
 8000714:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800071a:	2300      	movs	r3, #0
 800071c:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	82bb      	strh	r3, [r7, #20]

	uint16_t addres_counter = 0 ;
 8000722:	2300      	movs	r3, #0
 8000724:	827b      	strh	r3, [r7, #18]

	/* Unlock the FLASH control register access */
	HAL_Status = HAL_FLASH_Unlock();
 8000726:	f000 fd01 	bl	800112c <HAL_FLASH_Unlock>
 800072a:	4603      	mov	r3, r0
 800072c:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 800072e:	7dfb      	ldrb	r3, [r7, #23]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <Flash_Memory_Write_Payload+0x32>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000734:	2300      	movs	r3, #0
 8000736:	75bb      	strb	r3, [r7, #22]
 8000738:	e02c      	b.n	8000794 <Flash_Memory_Write_Payload+0x8c>
	}
	else{
		for(Payload_Counter = 0 ,addres_counter=0; Payload_Counter < (Payload_Len/2); Payload_Counter++ ,addres_counter+=2){
 800073a:	2300      	movs	r3, #0
 800073c:	82bb      	strh	r3, [r7, #20]
 800073e:	2300      	movs	r3, #0
 8000740:	827b      	strh	r3, [r7, #18]
 8000742:	e020      	b.n	8000786 <Flash_Memory_Write_Payload+0x7e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Payload_Start_Address +addres_counter, Host_Payload[Payload_Counter]);
 8000744:	8a7a      	ldrh	r2, [r7, #18]
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	18d1      	adds	r1, r2, r3
 800074a:	8abb      	ldrh	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4413      	add	r3, r2
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b29b      	uxth	r3, r3
 8000756:	2200      	movs	r2, #0
 8000758:	461c      	mov	r4, r3
 800075a:	4615      	mov	r5, r2
 800075c:	4622      	mov	r2, r4
 800075e:	462b      	mov	r3, r5
 8000760:	2001      	movs	r0, #1
 8000762:	f000 fc73 	bl	800104c <HAL_FLASH_Program>
 8000766:	4603      	mov	r3, r0
 8000768:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <Flash_Memory_Write_Payload+0x6e>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000770:	2300      	movs	r3, #0
 8000772:	75bb      	strb	r3, [r7, #22]
				break;
 8000774:	e00e      	b.n	8000794 <Flash_Memory_Write_Payload+0x8c>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000776:	2301      	movs	r3, #1
 8000778:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0 ,addres_counter=0; Payload_Counter < (Payload_Len/2); Payload_Counter++ ,addres_counter+=2){
 800077a:	8abb      	ldrh	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	82bb      	strh	r3, [r7, #20]
 8000780:	8a7b      	ldrh	r3, [r7, #18]
 8000782:	3302      	adds	r3, #2
 8000784:	827b      	strh	r3, [r7, #18]
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	b29b      	uxth	r3, r3
 800078e:	8aba      	ldrh	r2, [r7, #20]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3d7      	bcc.n	8000744 <Flash_Memory_Write_Payload+0x3c>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000794:	7dbb      	ldrb	r3, [r7, #22]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d10f      	bne.n	80007ba <Flash_Memory_Write_Payload+0xb2>
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10c      	bne.n	80007ba <Flash_Memory_Write_Payload+0xb2>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 80007a0:	f000 fcea 	bl	8001178 <HAL_FLASH_Lock>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <Flash_Memory_Write_Payload+0xac>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 80007b2:	e004      	b.n	80007be <Flash_Memory_Write_Payload+0xb6>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80007b4:	2301      	movs	r3, #1
 80007b6:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 80007b8:	e001      	b.n	80007be <Flash_Memory_Write_Payload+0xb6>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80007ba:	2300      	movs	r3, #0
 80007bc:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 80007be:	7dbb      	ldrb	r3, [r7, #22]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bdb0      	pop	{r4, r5, r7, pc}

080007c8 <Bootloader_Memory_Write>:





static void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80007e0:	2300      	movs	r3, #0
 80007e2:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80007e4:	2300      	movs	r3, #0
 80007e6:	727b      	strb	r3, [r7, #9]


	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	3b04      	subs	r3, #4
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80007fe:	8afb      	ldrh	r3, [r7, #22]
 8000800:	3b04      	subs	r3, #4
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fd86 	bl	8000318 <Bootloader_CRC_Verify>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d131      	bne.n	8000876 <Bootloader_Memory_Write+0xae>

		/* Send acknowledgement to the HOST */

		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000818:	60fb      	str	r3, [r7, #12]

		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	799b      	ldrb	r3, [r3, #6]
 800081e:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f7ff fe85 	bl	8000530 <Host_Address_Verification>
 8000826:	4603      	mov	r3, r0
 8000828:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 800082a:	7abb      	ldrb	r3, [r7, #10]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d119      	bne.n	8000864 <Bootloader_Memory_Write+0x9c>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint16_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3307      	adds	r3, #7
 8000834:	7afa      	ldrb	r2, [r7, #11]
 8000836:	68f9      	ldr	r1, [r7, #12]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff65 	bl	8000708 <Flash_Memory_Write_Payload>
 800083e:	4603      	mov	r3, r0
 8000840:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000842:	7a7b      	ldrb	r3, [r7, #9]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d106      	bne.n	8000856 <Bootloader_Memory_Write+0x8e>
				/* Report payload write passed */

				//Bootloader_Send_ACK(1);///////////////////////////
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000848:	f107 0309 	add.w	r3, r7, #9
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fdcc 	bl	80003ec <Bootloader_Send_Data_To_Host>
	else{

		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000854:	e011      	b.n	800087a <Bootloader_Memory_Write+0xb2>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000856:	f107 0309 	add.w	r3, r7, #9
 800085a:	2101      	movs	r1, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fdc5 	bl	80003ec <Bootloader_Send_Data_To_Host>
}
 8000862:	e00a      	b.n	800087a <Bootloader_Memory_Write+0xb2>
			Address_Verification = ADDRESS_IS_INVALID;
 8000864:	2300      	movs	r3, #0
 8000866:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000868:	f107 030a 	add.w	r3, r7, #10
 800086c:	2101      	movs	r1, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fdbc 	bl	80003ec <Bootloader_Send_Data_To_Host>
}
 8000874:	e001      	b.n	800087a <Bootloader_Memory_Write+0xb2>
		Bootloader_Send_NACK();
 8000876:	f7ff fda7 	bl	80003c8 <Bootloader_Send_NACK>
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <Change_ROP_Level>:





static uint8_t Change_ROP_Level(uint32_t ROP_Level){
 8000882:	b580      	push	{r7, lr}
 8000884:	b08a      	sub	sp, #40	; 0x28
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Unlock the FLASH Option Control Registers access */
	HAL_Status = HAL_FLASH_OB_Unlock();
 8000896:	f000 fc7f 	bl	8001198 <HAL_FLASH_OB_Unlock>
 800089a:	4603      	mov	r3, r0
 800089c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(HAL_Status != HAL_OK){
 80008a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d003      	beq.n	80008b0 <Change_ROP_Level+0x2e>
		ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008ae:	e02d      	b.n	800090c <Change_ROP_Level+0x8a>

	}
	else{

		FLASH_OBProgramInit.OptionType = OPTIONBYTE_RDP; /* RDP option byte configuration */
 80008b0:	2302      	movs	r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgramInit.Banks = FLASH_BANK_1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
		FLASH_OBProgramInit.RDPLevel = ROP_Level;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	763b      	strb	r3, [r7, #24]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgramInit);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fdfa 	bl	80014bc <HAL_FLASHEx_OBProgram>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_Status != HAL_OK){
 80008ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <Change_ROP_Level+0x66>

			HAL_Status = HAL_FLASH_OB_Lock();
 80008d6:	f000 fc7b 	bl	80011d0 <HAL_FLASH_OB_Lock>
 80008da:	4603      	mov	r3, r0
 80008dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008e6:	e011      	b.n	800090c <Change_ROP_Level+0x8a>
		}
		else{

			/* Launch the option byte loading */
			HAL_FLASH_OB_Launch();
 80008e8:	f000 fc82 	bl	80011f0 <HAL_FLASH_OB_Launch>


			/* Lock the FLASH Option Control Registers access */
			HAL_Status = HAL_FLASH_OB_Lock();
 80008ec:	f000 fc70 	bl	80011d0 <HAL_FLASH_OB_Lock>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_Status != HAL_OK){
 80008f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <Change_ROP_Level+0x84>
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 80008fe:	2300      	movs	r3, #0
 8000900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000904:	e002      	b.n	800090c <Change_ROP_Level+0x8a>
			}
			else{
				ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000906:	2301      	movs	r3, #1
 8000908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			}
		}

	}
	return ROP_Level_Status;
 800090c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000910:	4618      	mov	r0, r3
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <Bootloader_Change_Read_Protection_Level>:





static void Bootloader_Change_Read_Protection_Level(uint8_t *Host_Buffer){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	82bb      	strh	r3, [r7, #20]
	uint32_t Host_CRC32 = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_ROP_Level = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	75fb      	strb	r3, [r7, #23]


	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	3301      	adds	r3, #1
 8000938:	82bb      	strh	r3, [r7, #20]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800093a:	8abb      	ldrh	r3, [r7, #20]
 800093c:	3b04      	subs	r3, #4
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000946:	8abb      	ldrh	r3, [r7, #20]
 8000948:	3b04      	subs	r3, #4
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4619      	mov	r1, r3
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fce2 	bl	8000318 <Bootloader_CRC_Verify>
 8000954:	4603      	mov	r3, r0
 8000956:	2b01      	cmp	r3, #1
 8000958:	d123      	bne.n	80009a2 <Bootloader_Change_Read_Protection_Level+0x8a>

		Bootloader_Send_ACK(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff fd1a 	bl	8000394 <Bootloader_Send_ACK>
		/* Request change the Read Out Protection Level */
		Host_ROP_Level = Host_Buffer[2];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	75fb      	strb	r3, [r7, #23]
		/* Warning: When enabling read protection level 2, it s no more possible to go back to level 1 or 0 */
		if(CBL_ROP_LEVEL_2 == Host_ROP_Level) {
 8000966:	7dfb      	ldrb	r3, [r7, #23]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d102      	bne.n	8000972 <Bootloader_Change_Read_Protection_Level+0x5a>
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e010      	b.n	8000994 <Bootloader_Change_Read_Protection_Level+0x7c>
		}
		else{
			if(CBL_ROP_LEVEL_0 == Host_ROP_Level){
 8000972:	7dfb      	ldrb	r3, [r7, #23]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <Bootloader_Change_Read_Protection_Level+0x66>
				Host_ROP_Level = 0xAA;
 8000978:	23aa      	movs	r3, #170	; 0xaa
 800097a:	75fb      	strb	r3, [r7, #23]
 800097c:	e004      	b.n	8000988 <Bootloader_Change_Read_Protection_Level+0x70>
			}
			else if(CBL_ROP_LEVEL_1 == Host_ROP_Level){
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d101      	bne.n	8000988 <Bootloader_Change_Read_Protection_Level+0x70>
				Host_ROP_Level = 0x55;
 8000984:	2355      	movs	r3, #85	; 0x55
 8000986:	75fb      	strb	r3, [r7, #23]
			}
			ROP_Level_Status = Change_ROP_Level(Host_ROP_Level);
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ff79 	bl	8000882 <Change_ROP_Level>
 8000990:	4603      	mov	r3, r0
 8000992:	73fb      	strb	r3, [r7, #15]
		}
		Bootloader_Send_Data_To_Host((uint8_t *)&ROP_Level_Status, 1);
 8000994:	f107 030f 	add.w	r3, r7, #15
 8000998:	2101      	movs	r1, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fd26 	bl	80003ec <Bootloader_Send_Data_To_Host>
	}
	else{

		Bootloader_Send_NACK();
	}
}
 80009a0:	e001      	b.n	80009a6 <Bootloader_Change_Read_Protection_Level+0x8e>
		Bootloader_Send_NACK();
 80009a2:	f7ff fd11 	bl	80003c8 <Bootloader_Send_NACK>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_CRC_Init+0x20>)
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <MX_CRC_Init+0x24>)
 80009b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_CRC_Init+0x20>)
 80009bc:	f000 faff 	bl	8000fbe <HAL_CRC_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009c6:	f000 f89b 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000104 	.word	0x20000104
 80009d4:	40023000 	.word	0x40023000

080009d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <HAL_CRC_MspInit+0x34>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10b      	bne.n	8000a02 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_CRC_MspInit+0x38>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_CRC_MspInit+0x38>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_CRC_MspInit+0x38>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40023000 	.word	0x40023000
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_GPIO_Init+0x40>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <MX_GPIO_Init+0x40>)
 8000a20:	f043 0320 	orr.w	r3, r3, #32
 8000a24:	6193      	str	r3, [r2, #24]
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_GPIO_Init+0x40>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_GPIO_Init+0x40>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <MX_GPIO_Init+0x40>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MX_GPIO_Init+0x40>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a5c:	f000 f950 	bl	8000d00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a60:	f000 f809 	bl	8000a76 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a64:	f7ff ffd6 	bl	8000a14 <MX_GPIO_Init>
	MX_CRC_Init();
 8000a68:	f7ff ffa2 	bl	80009b0 <MX_CRC_Init>
	MX_USART2_UART_Init();
 8000a6c:	f000 f8ae 	bl	8000bcc <MX_USART2_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		BL_UART_Fetch_Host_Command();
 8000a70:	f7ff fb6c 	bl	800014c <BL_UART_Fetch_Host_Command>
 8000a74:	e7fc      	b.n	8000a70 <main+0x18>

08000a76 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b090      	sub	sp, #64	; 0x40
 8000a7a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	2228      	movs	r2, #40	; 0x28
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f817 	bl	8002ab8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ab4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 f988 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000aca:	f000 f819 	bl	8000b00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	230f      	movs	r3, #15
 8000ad0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fbf5 	bl	80022d8 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000af4:	f000 f804 	bl	8000b00 <Error_Handler>
	}
}
 8000af8:	bf00      	nop
 8000afa:	3740      	adds	r7, #64	; 0x40
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_MspInit+0x60>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_MspInit+0x60>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb6:	f000 f8e9 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_USART2_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f001 fcf6 	bl	80025f4 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f7ff ff77 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000010c 	.word	0x2000010c
 8000c1c:	40004400 	.word	0x40004400

08000c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d12f      	bne.n	8000ca0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	4a19      	ldr	r2, [pc, #100]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4a:	61d3      	str	r3, [r2, #28]
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c70:	2304      	movs	r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c84:	f000 ff22 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c9c:	f000 ff16 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ff83 	bl	8000bbe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cba:	490c      	ldr	r1, [pc, #48]	; (8000cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd0:	4c09      	ldr	r4, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f001 fef3 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff feb9 	bl	8000a58 <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cf0:	08002b5c 	.word	0x08002b5c
  ldr r2, =_sbss
 8000cf4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000cf8:	20000178 	.word	0x20000178

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f91d 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fef6 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f92b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f8fd 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000018 	.word	0x20000018
 8000d88:	20000014 	.word	0x20000014

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <HAL_IncTick+0x20>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000018 	.word	0x20000018
 8000dac:	20000154 	.word	0x20000154

08000db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000154 	.word	0x20000154

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	; (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee4:	f3bf 8f4f 	dsb	sy
}
 8000ee8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <__NVIC_SystemReset+0x24>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ef2:	4904      	ldr	r1, [pc, #16]	; (8000f04 <__NVIC_SystemReset+0x24>)
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_SystemReset+0x28>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efa:	f3bf 8f4f 	dsb	sy
}
 8000efe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <__NVIC_SystemReset+0x20>
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	05fa0004 	.word	0x05fa0004

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff7a 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff33 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff48 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff7a 	bl	8000e7c <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff49 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000fa2:	f7ff ff9d 	bl	8000ee0 <__NVIC_SystemReset>

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffac 	bl	8000f0c <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e00e      	b.n	8000fee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	795b      	ldrb	r3, [r3, #5]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fcf9 	bl	80009d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b087      	sub	sp, #28
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	60f8      	str	r0, [r7, #12]
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2202      	movs	r2, #2
 800100a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e00a      	b.n	8001028 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	441a      	add	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3f0      	bcc.n	8001012 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2201      	movs	r2, #1
 800103c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800103e:	693b      	ldr	r3, [r7, #16]
}
 8001040:	4618      	mov	r0, r3
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HAL_FLASH_Program+0xd8>)
 8001068:	7e1b      	ldrb	r3, [r3, #24]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_FLASH_Program+0x26>
 800106e:	2302      	movs	r3, #2
 8001070:	e054      	b.n	800111c <HAL_FLASH_Program+0xd0>
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <HAL_FLASH_Program+0xd8>)
 8001074:	2201      	movs	r2, #1
 8001076:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001078:	f24c 3050 	movw	r0, #50000	; 0xc350
 800107c:	f000 f8da 	bl	8001234 <FLASH_WaitForLastOperation>
 8001080:	4603      	mov	r3, r0
 8001082:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d144      	bne.n	8001114 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d102      	bne.n	8001096 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001090:	2301      	movs	r3, #1
 8001092:	757b      	strb	r3, [r7, #21]
 8001094:	e007      	b.n	80010a6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d102      	bne.n	80010a2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800109c:	2302      	movs	r3, #2
 800109e:	757b      	strb	r3, [r7, #21]
 80010a0:	e001      	b.n	80010a6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80010a2:	2304      	movs	r3, #4
 80010a4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	75bb      	strb	r3, [r7, #22]
 80010aa:	e02d      	b.n	8001108 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	005a      	lsls	r2, r3, #1
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	eb02 0c03 	add.w	ip, r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	0119      	lsls	r1, r3, #4
 80010ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010be:	f1c1 0620 	rsb	r6, r1, #32
 80010c2:	f1a1 0020 	sub.w	r0, r1, #32
 80010c6:	fa22 f401 	lsr.w	r4, r2, r1
 80010ca:	fa03 f606 	lsl.w	r6, r3, r6
 80010ce:	4334      	orrs	r4, r6
 80010d0:	fa23 f000 	lsr.w	r0, r3, r0
 80010d4:	4304      	orrs	r4, r0
 80010d6:	fa23 f501 	lsr.w	r5, r3, r1
 80010da:	b2a3      	uxth	r3, r4
 80010dc:	4619      	mov	r1, r3
 80010de:	4660      	mov	r0, ip
 80010e0:	f000 f88c 	bl	80011fc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010e8:	f000 f8a4 	bl	8001234 <FLASH_WaitForLastOperation>
 80010ec:	4603      	mov	r3, r0
 80010ee:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_FLASH_Program+0xdc>)
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_FLASH_Program+0xdc>)
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d107      	bne.n	8001112 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001102:	7dbb      	ldrb	r3, [r7, #22]
 8001104:	3301      	adds	r3, #1
 8001106:	75bb      	strb	r3, [r7, #22]
 8001108:	7dba      	ldrb	r2, [r7, #22]
 800110a:	7d7b      	ldrb	r3, [r7, #21]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3cd      	bcc.n	80010ac <HAL_FLASH_Program+0x60>
 8001110:	e000      	b.n	8001114 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001112:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_FLASH_Program+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]

  return status;
 800111a:	7dfb      	ldrb	r3, [r7, #23]
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001124:	20000158 	.word	0x20000158
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_FLASH_Unlock+0x40>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00d      	beq.n	800115e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_FLASH_Unlock+0x40>)
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_FLASH_Unlock+0x44>)
 8001146:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_FLASH_Unlock+0x40>)
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_FLASH_Unlock+0x48>)
 800114c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_FLASH_Unlock+0x40>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800115e:	79fb      	ldrb	r3, [r7, #7]
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000
 8001170:	45670123 	.word	0x45670123
 8001174:	cdef89ab 	.word	0xcdef89ab

08001178 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_FLASH_Lock+0x1c>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_FLASH_Lock+0x1c>)
 8001182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001186:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_FLASH_OB_Unlock+0x2c>)
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d107      	bne.n	80011b8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_FLASH_OB_Unlock+0x2c>)
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_FLASH_OB_Unlock+0x30>)
 80011ac:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_FLASH_OB_Unlock+0x2c>)
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_FLASH_OB_Unlock+0x34>)
 80011b2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80011b4:	2300      	movs	r3, #0
 80011b6:	e000      	b.n	80011ba <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	45670123 	.word	0x45670123
 80011cc:	cdef89ab 	.word	0xcdef89ab

080011d0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_FLASH_OB_Lock+0x1c>)
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_FLASH_OB_Lock+0x1c>)
 80011da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval None
  */
void HAL_FLASH_OB_Launch(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Initiates a system reset request to launch the option byte loading */
  HAL_NVIC_SystemReset();
 80011f4:	f7ff fed3 	bl	8000f9e <HAL_NVIC_SystemReset>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <FLASH_Program_HalfWord+0x30>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <FLASH_Program_HalfWord+0x34>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <FLASH_Program_HalfWord+0x34>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	801a      	strh	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000158 	.word	0x20000158
 8001230:	40022000 	.word	0x40022000

08001234 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff fdb8 	bl	8000db0 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001242:	e010      	b.n	8001266 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124a:	d00c      	beq.n	8001266 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <FLASH_WaitForLastOperation+0x2e>
 8001252:	f7ff fdad 	bl	8000db0 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d201      	bcs.n	8001266 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e025      	b.n	80012b2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <FLASH_WaitForLastOperation+0x88>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e8      	bne.n	8001244 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <FLASH_WaitForLastOperation+0x88>)
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <FLASH_WaitForLastOperation+0x88>)
 8001280:	2220      	movs	r2, #32
 8001282:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <FLASH_WaitForLastOperation+0x88>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10b      	bne.n	80012a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <FLASH_WaitForLastOperation+0x88>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <FLASH_WaitForLastOperation+0x88>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012a8:	f000 f80a 	bl	80012c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40022000 	.word	0x40022000

080012c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <FLASH_SetErrorCode+0x98>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d009      	beq.n	80012ea <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <FLASH_SetErrorCode+0x9c>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <FLASH_SetErrorCode+0x9c>)
 80012e0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <FLASH_SetErrorCode+0x98>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <FLASH_SetErrorCode+0x9c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <FLASH_SetErrorCode+0x9c>)
 8001300:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <FLASH_SetErrorCode+0x98>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <FLASH_SetErrorCode+0x9c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <FLASH_SetErrorCode+0x9c>)
 8001320:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <FLASH_SetErrorCode+0x98>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <FLASH_SetErrorCode+0x98>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f240 1201 	movw	r2, #257	; 0x101
 8001334:	4293      	cmp	r3, r2
 8001336:	d106      	bne.n	8001346 <FLASH_SetErrorCode+0x86>
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <FLASH_SetErrorCode+0x98>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <FLASH_SetErrorCode+0x98>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	61d3      	str	r3, [r2, #28]
}  
 8001344:	e002      	b.n	800134c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <FLASH_SetErrorCode+0x98>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60d3      	str	r3, [r2, #12]
}  
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000
 800135c:	20000158 	.word	0x20000158

08001360 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001372:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_FLASHEx_Erase+0xd0>)
 8001374:	7e1b      	ldrb	r3, [r3, #24]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_FLASHEx_Erase+0x1e>
 800137a:	2302      	movs	r3, #2
 800137c:	e053      	b.n	8001426 <HAL_FLASHEx_Erase+0xc6>
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_FLASHEx_Erase+0xd0>)
 8001380:	2201      	movs	r2, #1
 8001382:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d116      	bne.n	80013ba <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800138c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001390:	f7ff ff50 	bl	8001234 <FLASH_WaitForLastOperation>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d141      	bne.n	800141e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 f926 	bl	80015ec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013a4:	f7ff ff46 	bl	8001234 <FLASH_WaitForLastOperation>
 80013a8:	4603      	mov	r3, r0
 80013aa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_FLASHEx_Erase+0xd4>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_FLASHEx_Erase+0xd4>)
 80013b2:	f023 0304 	bic.w	r3, r3, #4
 80013b6:	6113      	str	r3, [r2, #16]
 80013b8:	e031      	b.n	800141e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013be:	f7ff ff39 	bl	8001234 <FLASH_WaitForLastOperation>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d12a      	bne.n	800141e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	e019      	b.n	800140c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013d8:	68b8      	ldr	r0, [r7, #8]
 80013da:	f000 fb57 	bl	8001a8c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013e2:	f7ff ff27 	bl	8001234 <FLASH_WaitForLastOperation>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_FLASHEx_Erase+0xd4>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_FLASHEx_Erase+0xd4>)
 80013f0:	f023 0302 	bic.w	r3, r3, #2
 80013f4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	601a      	str	r2, [r3, #0]
            break;
 8001402:	e00c      	b.n	800141e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800140a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	029a      	lsls	r2, r3, #10
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	4413      	add	r3, r2
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	d3dc      	bcc.n	80013d8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_FLASHEx_Erase+0xd0>)
 8001420:	2200      	movs	r2, #0
 8001422:	761a      	strb	r2, [r3, #24]

  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000158 	.word	0x20000158
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 800143e:	23a5      	movs	r3, #165	; 0xa5
 8001440:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	71fb      	strb	r3, [r7, #7]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 8001446:	f000 faf5 	bl	8001a34 <FLASH_OB_GetRDP>
 800144a:	4603      	mov	r3, r0
 800144c:	71bb      	strb	r3, [r7, #6]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800144e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001452:	f7ff feef 	bl	8001234 <FLASH_WaitForLastOperation>
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]

  if(status == HAL_OK)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d123      	bne.n	80014a8 <HAL_FLASHEx_OBErase+0x70>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_FLASHEx_OBErase+0x7c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_FLASHEx_OBErase+0x80>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_FLASHEx_OBErase+0x80>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_FLASHEx_OBErase+0x80>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_FLASHEx_OBErase+0x80>)
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800147e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001482:	f7ff fed7 	bl	8001234 <FLASH_WaitForLastOperation>
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_FLASHEx_OBErase+0x80>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_FLASHEx_OBErase+0x80>)
 8001490:	f023 0320 	bic.w	r3, r3, #32
 8001494:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <HAL_FLASHEx_OBErase+0x70>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fa02 	bl	80018a8 <FLASH_OB_RDP_LevelConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return the erase status */
  return status;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000158 	.word	0x20000158
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 80014ca:	7e1b      	ldrb	r3, [r3, #24]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_FLASHEx_OBProgram+0x18>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e069      	b.n	80015a8 <HAL_FLASHEx_OBProgram+0xec>
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01a      	beq.n	800151c <HAL_FLASHEx_OBProgram+0x60>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_FLASHEx_OBProgram+0x42>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f896 	bl	8001624 <FLASH_OB_EnableWRP>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e006      	b.n	800150c <HAL_FLASHEx_OBProgram+0x50>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f930 	bl	8001768 <FLASH_OB_DisableWRP>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_FLASHEx_OBProgram+0x60>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 8001514:	2200      	movs	r2, #0
 8001516:	761a      	strb	r2, [r3, #24]
      return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	e045      	b.n	80015a8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00e      	beq.n	8001546 <HAL_FLASHEx_OBProgram+0x8a>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7c1b      	ldrb	r3, [r3, #16]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f9bb 	bl	80018a8 <FLASH_OB_RDP_LevelConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_FLASHEx_OBProgram+0x8a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800153c:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 800153e:	2200      	movs	r2, #0
 8001540:	761a      	strb	r2, [r3, #24]
      return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	e030      	b.n	80015a8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00e      	beq.n	8001570 <HAL_FLASHEx_OBProgram+0xb4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7c5b      	ldrb	r3, [r3, #17]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f9f6 	bl	8001948 <FLASH_OB_UserConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_FLASHEx_OBProgram+0xb4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 8001568:	2200      	movs	r2, #0
 800156a:	761a      	strb	r2, [r3, #24]
      return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	e01b      	b.n	80015a8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d011      	beq.n	80015a0 <HAL_FLASHEx_OBProgram+0xe4>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7e1b      	ldrb	r3, [r3, #24]
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f000 fa16 	bl	80019b8 <FLASH_OB_ProgramData>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <HAL_FLASHEx_OBProgram+0xe4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 8001598:	2200      	movs	r2, #0
 800159a:	761a      	strb	r2, [r3, #24]
      return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	e003      	b.n	80015a8 <HAL_FLASHEx_OBProgram+0xec>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_FLASHEx_OBProgram+0xf4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	761a      	strb	r2, [r3, #24]

  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000158 	.word	0x20000158

080015b4 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2207      	movs	r2, #7
 80015c0:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80015c2:	f000 fa2d 	bl	8001a20 <FLASH_OB_GetWRP>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80015cc:	f000 fa32 	bl	8001a34 <FLASH_OB_GetRDP>
 80015d0:	4603      	mov	r3, r0
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80015d8:	f000 fa48 	bl	8001a6c <FLASH_OB_GetUser>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	745a      	strb	r2, [r3, #17]
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <FLASH_MassErase+0x30>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <FLASH_MassErase+0x34>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <FLASH_MassErase+0x34>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <FLASH_MassErase+0x34>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <FLASH_MassErase+0x34>)
 800160c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001610:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	20000158 	.word	0x20000158
 8001620:	40022000 	.word	0x40022000

08001624 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001634:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 8001636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163a:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001646:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8001648:	f000 f9ea 	bl	8001a20 <FLASH_OB_GetWRP>
 800164c:	4602      	mov	r2, r0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	43db      	mvns	r3, r3
 8001652:	4013      	ands	r3, r2
 8001654:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b29b      	uxth	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0c1b      	lsrs	r3, r3, #16
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0e1b      	lsrs	r3, r3, #24
 8001676:	81fb      	strh	r3, [r7, #14]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001678:	f24c 3050 	movw	r0, #50000	; 0xc350
 800167c:	f7ff fdda 	bl	8001234 <FLASH_WaitForLastOperation>
 8001680:	4603      	mov	r3, r0
 8001682:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d162      	bne.n	8001750 <FLASH_OB_EnableWRP+0x12c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <FLASH_OB_EnableWRP+0x138>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8001690:	f7ff fed2 	bl	8001438 <HAL_FLASHEx_OBErase>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d158      	bne.n	8001750 <FLASH_OB_EnableWRP+0x12c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <FLASH_OB_EnableWRP+0x13c>)
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <FLASH_OB_EnableWRP+0x13c>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80016aa:	8abb      	ldrh	r3, [r7, #20]
 80016ac:	2bff      	cmp	r3, #255	; 0xff
 80016ae:	d00d      	beq.n	80016cc <FLASH_OB_EnableWRP+0xa8>
      {
        OB->WRP0 &= WRP0_Data;
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 80016b2:	891b      	ldrh	r3, [r3, #8]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	492b      	ldr	r1, [pc, #172]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 80016b8:	8abb      	ldrh	r3, [r7, #20]
 80016ba:	4013      	ands	r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016c4:	f7ff fdb6 	bl	8001234 <FLASH_WaitForLastOperation>
 80016c8:	4603      	mov	r3, r0
 80016ca:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d110      	bne.n	80016f4 <FLASH_OB_EnableWRP+0xd0>
 80016d2:	8a7b      	ldrh	r3, [r7, #18]
 80016d4:	2bff      	cmp	r3, #255	; 0xff
 80016d6:	d00d      	beq.n	80016f4 <FLASH_OB_EnableWRP+0xd0>
      {
        OB->WRP1 &= WRP1_Data;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 80016da:	895b      	ldrh	r3, [r3, #10]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4921      	ldr	r1, [pc, #132]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 80016e0:	8a7b      	ldrh	r3, [r7, #18]
 80016e2:	4013      	ands	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016ec:	f7ff fda2 	bl	8001234 <FLASH_WaitForLastOperation>
 80016f0:	4603      	mov	r3, r0
 80016f2:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d110      	bne.n	800171c <FLASH_OB_EnableWRP+0xf8>
 80016fa:	8a3b      	ldrh	r3, [r7, #16]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d00d      	beq.n	800171c <FLASH_OB_EnableWRP+0xf8>
      {
        OB->WRP2 &= WRP2_Data;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 8001702:	899b      	ldrh	r3, [r3, #12]
 8001704:	b29a      	uxth	r2, r3
 8001706:	4917      	ldr	r1, [pc, #92]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 8001708:	8a3b      	ldrh	r3, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	b29b      	uxth	r3, r3
 800170e:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001710:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001714:	f7ff fd8e 	bl	8001234 <FLASH_WaitForLastOperation>
 8001718:	4603      	mov	r3, r0
 800171a:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d110      	bne.n	8001744 <FLASH_OB_EnableWRP+0x120>
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	2bff      	cmp	r3, #255	; 0xff
 8001726:	d00d      	beq.n	8001744 <FLASH_OB_EnableWRP+0x120>
      {
        OB->WRP3 &= WRP3_Data;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 800172a:	89db      	ldrh	r3, [r3, #14]
 800172c:	b29a      	uxth	r2, r3
 800172e:	490d      	ldr	r1, [pc, #52]	; (8001764 <FLASH_OB_EnableWRP+0x140>)
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	4013      	ands	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001738:	f24c 3050 	movw	r0, #50000	; 0xc350
 800173c:	f7ff fd7a 	bl	8001234 <FLASH_WaitForLastOperation>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <FLASH_OB_EnableWRP+0x13c>)
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <FLASH_OB_EnableWRP+0x13c>)
 800174a:	f023 0310 	bic.w	r3, r3, #16
 800174e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001750:	7dfb      	ldrb	r3, [r7, #23]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000158 	.word	0x20000158
 8001760:	40022000 	.word	0x40022000
 8001764:	1ffff800 	.word	0x1ffff800

08001768 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	75fb      	strb	r3, [r7, #23]
  uint16_t WRP0_Data = 0xFFFF;
 8001774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001778:	82bb      	strh	r3, [r7, #20]
#if defined(FLASH_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFF;
 800177a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177e:	827b      	strh	r3, [r7, #18]
#endif /* FLASH_WRP1_WRP1 */
#if defined(FLASH_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFF;
 8001780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001784:	823b      	strh	r3, [r7, #16]
#endif /* FLASH_WRP2_WRP2 */
#if defined(FLASH_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFF;
 8001786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 800178c:	f000 f948 	bl	8001a20 <FLASH_OB_GetWRP>
 8001790:	4602      	mov	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	b29b      	uxth	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	82bb      	strh	r3, [r7, #20]
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	827b      	strh	r3, [r7, #18]
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES64TO95MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES64TO95MASK) >> 16U);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	823b      	strh	r3, [r7, #16]
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES96TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES96TO127MASK) >> 24U); 
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0e1b      	lsrs	r3, r3, #24
 80017b8:	81fb      	strh	r3, [r7, #14]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES96TO127MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017be:	f7ff fd39 	bl	8001234 <FLASH_WaitForLastOperation>
 80017c2:	4603      	mov	r3, r0
 80017c4:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d162      	bne.n	8001892 <FLASH_OB_DisableWRP+0x12a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <FLASH_OB_DisableWRP+0x134>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80017d2:	f7ff fe31 	bl	8001438 <HAL_FLASHEx_OBErase>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)  
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d158      	bne.n	8001892 <FLASH_OB_DisableWRP+0x12a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <FLASH_OB_DisableWRP+0x138>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4a2e      	ldr	r2, [pc, #184]	; (80018a0 <FLASH_OB_DisableWRP+0x138>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6113      	str	r3, [r2, #16]

#if defined(FLASH_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80017ec:	8abb      	ldrh	r3, [r7, #20]
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	d00d      	beq.n	800180e <FLASH_OB_DisableWRP+0xa6>
      {
        OB->WRP0 |= WRP0_Data;
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 80017f4:	891b      	ldrh	r3, [r3, #8]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	492a      	ldr	r1, [pc, #168]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 80017fa:	8abb      	ldrh	r3, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b29b      	uxth	r3, r3
 8001800:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001802:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001806:	f7ff fd15 	bl	8001234 <FLASH_WaitForLastOperation>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP0_WRP0 */

#if defined(FLASH_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d110      	bne.n	8001836 <FLASH_OB_DisableWRP+0xce>
 8001814:	8a7b      	ldrh	r3, [r7, #18]
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d00d      	beq.n	8001836 <FLASH_OB_DisableWRP+0xce>
      {
        OB->WRP1 |= WRP1_Data;
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 800181c:	895b      	ldrh	r3, [r3, #10]
 800181e:	b29a      	uxth	r2, r3
 8001820:	4920      	ldr	r1, [pc, #128]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	4313      	orrs	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800182a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800182e:	f7ff fd01 	bl	8001234 <FLASH_WaitForLastOperation>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP1_WRP1 */

#if defined(FLASH_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d110      	bne.n	800185e <FLASH_OB_DisableWRP+0xf6>
 800183c:	8a3b      	ldrh	r3, [r7, #16]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d00d      	beq.n	800185e <FLASH_OB_DisableWRP+0xf6>
      {
        OB->WRP2 |= WRP2_Data;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 8001844:	899b      	ldrh	r3, [r3, #12]
 8001846:	b29a      	uxth	r2, r3
 8001848:	4916      	ldr	r1, [pc, #88]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 800184a:	8a3b      	ldrh	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001852:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001856:	f7ff fced 	bl	8001234 <FLASH_WaitForLastOperation>
 800185a:	4603      	mov	r3, r0
 800185c:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP2_WRP2 */

#if defined(FLASH_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d110      	bne.n	8001886 <FLASH_OB_DisableWRP+0x11e>
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d00d      	beq.n	8001886 <FLASH_OB_DisableWRP+0x11e>
      {
        OB->WRP3 |= WRP3_Data;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 800186c:	89db      	ldrh	r3, [r3, #14]
 800186e:	b29a      	uxth	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <FLASH_OB_DisableWRP+0x13c>)
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	4313      	orrs	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800187a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800187e:	f7ff fcd9 	bl	8001234 <FLASH_WaitForLastOperation>
 8001882:	4603      	mov	r3, r0
 8001884:	75fb      	strb	r3, [r7, #23]
      }
#endif /* FLASH_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <FLASH_OB_DisableWRP+0x138>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <FLASH_OB_DisableWRP+0x138>)
 800188c:	f023 0310 	bic.w	r3, r3, #16
 8001890:	6113      	str	r3, [r2, #16]
    }
  }
  return status;
 8001892:	7dfb      	ldrb	r3, [r7, #23]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000158 	.word	0x20000158
 80018a0:	40022000 	.word	0x40022000
 80018a4:	1ffff800 	.word	0x1ffff800

080018a8 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ba:	f7ff fcbb 	bl	8001234 <FLASH_WaitForLastOperation>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d133      	bne.n	8001930 <FLASH_OB_RDP_LevelConfig+0x88>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <FLASH_OB_RDP_LevelConfig+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 80018d4:	f043 0320 	orr.w	r3, r3, #32
 80018d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 80018e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e4:	6113      	str	r3, [r2, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018ea:	f7ff fca3 	bl	8001234 <FLASH_WaitForLastOperation>
 80018ee:	4603      	mov	r3, r0
 80018f0:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 80018f8:	f023 0320 	bic.w	r3, r3, #32
 80018fc:	6113      	str	r3, [r2, #16]

    if(status == HAL_OK)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d115      	bne.n	8001930 <FLASH_OB_RDP_LevelConfig+0x88>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	6113      	str	r3, [r2, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <FLASH_OB_RDP_LevelConfig+0x9c>)
 8001912:	79fa      	ldrb	r2, [r7, #7]
 8001914:	b292      	uxth	r2, r2
 8001916:	801a      	strh	r2, [r3, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8001918:	f24c 3050 	movw	r0, #50000	; 0xc350
 800191c:	f7ff fc8a 	bl	8001234 <FLASH_WaitForLastOperation>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <FLASH_OB_RDP_LevelConfig+0x98>)
 800192a:	f023 0310 	bic.w	r3, r3, #16
 800192e:	6113      	str	r3, [r2, #16]
    }
  }
  
  return status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000158 	.word	0x20000158
 8001940:	40022000 	.word	0x40022000
 8001944:	1ffff800 	.word	0x1ffff800

08001948 <FLASH_OB_UserConfig>:
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And BFBF2(Bit5) for STM32F101xG and STM32F103xG . 
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
#if defined(FLASH_BANK2_END)
  assert_param(IS_OB_BOOT1((UserConfig&OB_BOOT1_SET)));
#endif /* FLASH_BANK2_END */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001956:	f24c 3050 	movw	r0, #50000	; 0xc350
 800195a:	f7ff fc6b 	bl	8001234 <FLASH_WaitForLastOperation>
 800195e:	4603      	mov	r3, r0
 8001960:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11b      	bne.n	80019a0 <FLASH_OB_UserConfig+0x58>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <FLASH_OB_UserConfig+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <FLASH_OB_UserConfig+0x68>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <FLASH_OB_UserConfig+0x68>)
 8001974:	f043 0310 	orr.w	r3, r3, #16
 8001978:	6113      	str	r3, [r2, #16]
 
#if defined(FLASH_BANK2_END)
    OB->USER = (UserConfig | 0xF0U);
#else
    OB->USER = (UserConfig | 0x88U);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <FLASH_OB_UserConfig+0x6c>)
 8001984:	b292      	uxth	r2, r2
 8001986:	805a      	strh	r2, [r3, #2]
#endif /* FLASH_BANK2_END */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001988:	f24c 3050 	movw	r0, #50000	; 0xc350
 800198c:	f7ff fc52 	bl	8001234 <FLASH_WaitForLastOperation>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <FLASH_OB_UserConfig+0x68>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <FLASH_OB_UserConfig+0x68>)
 800199a:	f023 0310 	bic.w	r3, r3, #16
 800199e:	6113      	str	r3, [r2, #16]
  }
  
  return status; 
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000158 	.word	0x20000158
 80019b0:	40022000 	.word	0x40022000
 80019b4:	1ffff800 	.word	0x1ffff800

080019b8 <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019cc:	f7ff fc32 	bl	8001234 <FLASH_WaitForLastOperation>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <FLASH_OB_ProgramData+0x54>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <FLASH_OB_ProgramData+0x60>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <FLASH_OB_ProgramData+0x64>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <FLASH_OB_ProgramData+0x64>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6113      	str	r3, [r2, #16]
    *(__IO uint16_t*)Address = Data;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	b292      	uxth	r2, r2
 80019f2:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019f8:	f7ff fc1c 	bl	8001234 <FLASH_WaitForLastOperation>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <FLASH_OB_ProgramData+0x64>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <FLASH_OB_ProgramData+0x64>)
 8001a06:	f023 0310 	bic.w	r3, r3, #16
 8001a0a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000158 	.word	0x20000158
 8001a1c:	40022000 	.word	0x40022000

08001a20 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <FLASH_OB_GetWRP+0x10>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40022000 	.word	0x40022000

08001a34 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8001a3a:	23a5      	movs	r3, #165	; 0xa5
 8001a3c:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <FLASH_OB_GetRDP+0x34>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d102      	bne.n	8001a58 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e001      	b.n	8001a5c <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8001a58:	23a5      	movs	r3, #165	; 0xa5
 8001a5a:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40022000 	.word	0x40022000

08001a6c <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <FLASH_OB_GetUser+0x1c>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	b2db      	uxtb	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <FLASH_PageErase+0x38>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <FLASH_PageErase+0x3c>)
 8001ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000158 	.word	0x20000158
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	e169      	b.n	8001db4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8158 	bne.w	8001dae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a9a      	ldr	r2, [pc, #616]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b08:	4a98      	ldr	r2, [pc, #608]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d875      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b0e:	4a98      	ldr	r2, [pc, #608]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d058      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b14:	4a96      	ldr	r2, [pc, #600]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d86f      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b1a:	4a96      	ldr	r2, [pc, #600]	; (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d052      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b20:	4a94      	ldr	r2, [pc, #592]	; (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d869      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b26:	4a94      	ldr	r2, [pc, #592]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04c      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a92      	ldr	r2, [pc, #584]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d863      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b32:	4a92      	ldr	r2, [pc, #584]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d046      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a90      	ldr	r2, [pc, #576]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d85d      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d82a      	bhi.n	8001b98 <HAL_GPIO_Init+0xcc>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d859      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_GPIO_Init+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001bb3 	.word	0x08001bb3
 8001b58:	08001bf5 	.word	0x08001bf5
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001bfb 	.word	0x08001bfb
 8001b68:	08001bfb 	.word	0x08001bfb
 8001b6c:	08001bfb 	.word	0x08001bfb
 8001b70:	08001bfb 	.word	0x08001bfb
 8001b74:	08001bfb 	.word	0x08001bfb
 8001b78:	08001bfb 	.word	0x08001bfb
 8001b7c:	08001bfb 	.word	0x08001bfb
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bfb 	.word	0x08001bfb
 8001b88:	08001bfb 	.word	0x08001bfb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	4a79      	ldr	r2, [pc, #484]	; (8001d80 <HAL_GPIO_Init+0x2b4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e02c      	b.n	8001bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e029      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e024      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e01f      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e01a      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e013      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	611a      	str	r2, [r3, #16]
          break;
 8001be6:	e009      	b.n	8001bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
          break;
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          break;
 8001bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d801      	bhi.n	8001c06 <HAL_GPIO_Init+0x13a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_Init+0x13e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_Init+0x14c>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x152>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	210f      	movs	r1, #15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80b1 	beq.w	8001dae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c64:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3f      	ldr	r2, [pc, #252]	; (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00d      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3e      	ldr	r2, [pc, #248]	; (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cca:	492f      	ldr	r1, [pc, #188]	; (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	492c      	ldr	r1, [pc, #176]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4928      	ldr	r1, [pc, #160]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4922      	ldr	r1, [pc, #136]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	491e      	ldr	r1, [pc, #120]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4918      	ldr	r1, [pc, #96]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4914      	ldr	r1, [pc, #80]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d021      	beq.n	8001da0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e021      	b.n	8001dae <HAL_GPIO_Init+0x2e2>
 8001d6a:	bf00      	nop
 8001d6c:	10320000 	.word	0x10320000
 8001d70:	10310000 	.word	0x10310000
 8001d74:	10220000 	.word	0x10220000
 8001d78:	10210000 	.word	0x10210000
 8001d7c:	10120000 	.word	0x10120000
 8001d80:	10110000 	.word	0x10110000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	40011000 	.word	0x40011000
 8001d98:	40011400 	.word	0x40011400
 8001d9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4909      	ldr	r1, [pc, #36]	; (8001dd0 <HAL_GPIO_Init+0x304>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae8e 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	372c      	adds	r7, #44	; 0x2c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e272      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d112      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x12c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d168      	bne.n	8001f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e24c      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x76>
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7f      	ldr	r2, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x98>
 8001e52:	4b7b      	ldr	r3, [pc, #492]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b78      	ldr	r3, [pc, #480]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a77      	ldr	r2, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0xbc>
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a71      	ldr	r2, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e90:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ff7e 	bl	8000db0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ff7a 	bl	8000db0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e200      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe4>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff6a 	bl	8000db0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7fe ff66 	bl	8000db0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1ec      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x10c>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1c0      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4939      	ldr	r1, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe ff1f 	bl	8000db0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7fe ff1b 	bl	8000db0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1a1      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4927      	ldr	r1, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fefe 	bl	8000db0 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7fe fefa 	bl	8000db0 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e180      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03a      	beq.n	8002058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fede 	bl	8000db0 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe feda 	bl	8000db0 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e160      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 face 	bl	80025b8 <RCC_Delay>
 800201c:	e01c      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7fe fec4 	bl	8000db0 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fec0 	bl	8000db0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d908      	bls.n	800204c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e146      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	42420000 	.word	0x42420000
 8002048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b92      	ldr	r3, [pc, #584]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e9      	bne.n	800202c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a6 	beq.w	80021b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b8b      	ldr	r3, [pc, #556]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a87      	ldr	r2, [pc, #540]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a7e      	ldr	r2, [pc, #504]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fe81 	bl	8000db0 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe fe7d 	bl	8000db0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e103      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x4c8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x312>
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	e02d      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x334>
 80020ee:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a69      	ldr	r2, [pc, #420]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a66      	ldr	r2, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	e01c      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x356>
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 800212a:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a5a      	ldr	r2, [pc, #360]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d015      	beq.n	8002176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7fe fe31 	bl	8000db0 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe fe2d 	bl	8000db0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0b1      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCC_OscConfig+0x37e>
 8002174:	e014      	b.n	80021a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe fe1b 	bl	8000db0 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fe17 	bl	8000db0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e09b      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d061      	beq.n	800228c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d146      	bne.n	800225e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fdeb 	bl	8000db0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fde7 	bl	8000db0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e06d      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	4921      	ldr	r1, [pc, #132]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a19      	ldr	r1, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	430b      	orrs	r3, r1
 800222a:	491b      	ldr	r1, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fdbb 	bl	8000db0 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe fdb7 	bl	8000db0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e03d      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x46a>
 800225c:	e035      	b.n	80022ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x4cc>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fda4 	bl	8000db0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fda0 	bl	8000db0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e026      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x498>
 800228a:	e01e      	b.n	80022ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e019      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x500>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0d0      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d910      	bls.n	800231c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b67      	ldr	r3, [pc, #412]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	4965      	ldr	r1, [pc, #404]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b8      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800233e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a52      	ldr	r2, [pc, #328]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002356:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	494d      	ldr	r1, [pc, #308]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d040      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d115      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07f      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e073      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06b      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4936      	ldr	r1, [pc, #216]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fcf2 	bl	8000db0 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7fe fcee 	bl	8000db0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e053      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d210      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4922      	ldr	r1, [pc, #136]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e032      	b.n	800248e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4916      	ldr	r1, [pc, #88]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	490e      	ldr	r1, [pc, #56]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002466:	f000 f821 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 800246a:	4602      	mov	r2, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	490a      	ldr	r1, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	5ccb      	ldrb	r3, [r1, r3]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fc50 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000
 800249c:	40021000 	.word	0x40021000
 80024a0:	08002b28 	.word	0x08002b28
 80024a4:	20000010 	.word	0x20000010
 80024a8:	20000014 	.word	0x20000014

080024ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d002      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x30>
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d003      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x36>
 80024da:	e027      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_GetSysClockFreq+0x98>)
 80024de:	613b      	str	r3, [r7, #16]
      break;
 80024e0:	e027      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	0c9b      	lsrs	r3, r3, #18
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024ec:	5cd3      	ldrb	r3, [r2, r3]
 80024ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_GetSysClockFreq+0x94>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0c5b      	lsrs	r3, r3, #17
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_RCC_GetSysClockFreq+0x98>)
 800250e:	fb03 f202 	mul.w	r2, r3, r2
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e004      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	613b      	str	r3, [r7, #16]
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetSysClockFreq+0x98>)
 800252e:	613b      	str	r3, [r7, #16]
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	693b      	ldr	r3, [r7, #16]
}
 8002534:	4618      	mov	r0, r3
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	007a1200 	.word	0x007a1200
 8002548:	08002b40 	.word	0x08002b40
 800254c:	08002b50 	.word	0x08002b50
 8002550:	003d0900 	.word	0x003d0900

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_RCC_GetHCLKFreq+0x10>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000010 	.word	0x20000010

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff2 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	08002b38 	.word	0x08002b38

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffde 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0adb      	lsrs	r3, r3, #11
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08002b38 	.word	0x08002b38

080025b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <RCC_Delay+0x34>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <RCC_Delay+0x38>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0a5b      	lsrs	r3, r3, #9
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d4:	bf00      	nop
  }
  while (Delay --);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <RCC_Delay+0x1c>
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	20000010 	.word	0x20000010
 80025f0:	10624dd3 	.word	0x10624dd3

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fb00 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f9af 	bl	800299c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d16d      	bne.n	8002790 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_UART_Transmit+0x2c>
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e066      	b.n	8002792 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2221      	movs	r2, #33	; 0x21
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d2:	f7fe fb6d 	bl	8000db0 <HAL_GetTick>
 80026d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	88fa      	ldrh	r2, [r7, #6]
 80026e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ec:	d108      	bne.n	8002700 <HAL_UART_Transmit+0x6c>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e003      	b.n	8002708 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002708:	e02a      	b.n	8002760 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 f8d2 	bl	80028be <UART_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e036      	b.n	8002792 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	3302      	adds	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e007      	b.n	8002752 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3301      	adds	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1cf      	bne.n	800270a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2200      	movs	r2, #0
 8002772:	2140      	movs	r1, #64	; 0x40
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f8a2 	bl	80028be <UART_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e006      	b.n	8002792 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
  }
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b08a      	sub	sp, #40	; 0x28
 800279e:	af02      	add	r7, sp, #8
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b20      	cmp	r3, #32
 80027b8:	d17c      	bne.n	80028b4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_UART_Receive+0x2c>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e075      	b.n	80028b6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2222      	movs	r2, #34	; 0x22
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027de:	f7fe fae7 	bl	8000db0 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	88fa      	ldrh	r2, [r7, #6]
 80027ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f8:	d108      	bne.n	800280c <HAL_UART_Receive+0x72>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e003      	b.n	8002814 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002814:	e043      	b.n	800289e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2120      	movs	r1, #32
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f84c 	bl	80028be <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e042      	b.n	80028b6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002842:	b29a      	uxth	r2, r3
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3302      	adds	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e01f      	b.n	8002890 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002858:	d007      	beq.n	800286a <HAL_UART_Receive+0xd0>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <HAL_UART_Receive+0xde>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e008      	b.n	800288a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002884:	b2da      	uxtb	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1b6      	bne.n	8002816 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b090      	sub	sp, #64	; 0x40
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	4613      	mov	r3, r2
 80028cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ce:	e050      	b.n	8002972 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d04c      	beq.n	8002972 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0x30>
 80028de:	f7fe fa67 	bl	8000db0 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d241      	bcs.n	8002972 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800290e:	637a      	str	r2, [r7, #52]	; 0x34
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3314      	adds	r3, #20
 8002928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	613b      	str	r3, [r7, #16]
   return(result);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	63bb      	str	r3, [r7, #56]	; 0x38
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3314      	adds	r3, #20
 8002940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002942:	623a      	str	r2, [r7, #32]
 8002944:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	69f9      	ldr	r1, [r7, #28]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e5      	bne.n	8002922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	429a      	cmp	r2, r3
 800298e:	d09f      	beq.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3740      	adds	r7, #64	; 0x40
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029d6:	f023 030c 	bic.w	r3, r3, #12
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <UART_SetConfig+0x114>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d103      	bne.n	8002a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a04:	f7ff fdc4 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	e002      	b.n	8002a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f7ff fdac 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	0119      	lsls	r1, r3, #4
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2064      	movs	r0, #100	; 0x64
 8002a52:	fb00 f303 	mul.w	r3, r0, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	3332      	adds	r3, #50	; 0x32
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	4419      	add	r1, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a82:	fba3 0302 	umull	r0, r3, r3, r2
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2064      	movs	r0, #100	; 0x64
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	4a07      	ldr	r2, [pc, #28]	; (8002ab4 <UART_SetConfig+0x118>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa8:	bf00      	nop
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	51eb851f 	.word	0x51eb851f

08002ab8 <memset>:
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4402      	add	r2, r0
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <memset+0xa>
 8002ac0:	4770      	bx	lr
 8002ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac6:	e7f9      	b.n	8002abc <memset+0x4>

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	2600      	movs	r6, #0
 8002acc:	4d0c      	ldr	r5, [pc, #48]	; (8002b00 <__libc_init_array+0x38>)
 8002ace:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ad0:	1b64      	subs	r4, r4, r5
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	42a6      	cmp	r6, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	f000 f81a 	bl	8002b10 <_init>
 8002adc:	2600      	movs	r6, #0
 8002ade:	4d0a      	ldr	r5, [pc, #40]	; (8002b08 <__libc_init_array+0x40>)
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <__libc_init_array+0x44>)
 8002ae2:	1b64      	subs	r4, r4, r5
 8002ae4:	10a4      	asrs	r4, r4, #2
 8002ae6:	42a6      	cmp	r6, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af0:	4798      	blx	r3
 8002af2:	3601      	adds	r6, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afa:	4798      	blx	r3
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	08002b54 	.word	0x08002b54
 8002b04:	08002b54 	.word	0x08002b54
 8002b08:	08002b54 	.word	0x08002b54
 8002b0c:	08002b58 	.word	0x08002b58

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
